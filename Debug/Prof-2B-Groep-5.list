
Prof-2B-Groep-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057f4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005990  08005990  00015990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b80  08005b80  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b80  08005b80  00015b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b88  08005b88  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b88  08005b88  00015b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b8c  08005b8c  00015b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  20000070  08005c00  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  08005c00  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b1d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c7  00000000  00000000  00030bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00032c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  00033b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002130  00000000  00000000  000349d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011159  00000000  00000000  00036b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009af6b  00000000  00000000  00047c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2bc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004514  00000000  00000000  000e2c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005974 	.word	0x08005974

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08005974 	.word	0x08005974

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b974 	b.w	8000ee0 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9d08      	ldr	r5, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	468e      	mov	lr, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14d      	bne.n	8000cba <__udivmoddi4+0xaa>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4694      	mov	ip, r2
 8000c22:	d969      	bls.n	8000cf8 <__udivmoddi4+0xe8>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b152      	cbz	r2, 8000c40 <__udivmoddi4+0x30>
 8000c2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2e:	f1c2 0120 	rsb	r1, r2, #32
 8000c32:	fa20 f101 	lsr.w	r1, r0, r1
 8000c36:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c3e:	4094      	lsls	r4, r2
 8000c40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c44:	0c21      	lsrs	r1, r4, #16
 8000c46:	fbbe f6f8 	udiv	r6, lr, r8
 8000c4a:	fa1f f78c 	uxth.w	r7, ip
 8000c4e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c56:	fb06 f107 	mul.w	r1, r6, r7
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x64>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c66:	f080 811f 	bcs.w	8000ea8 <__udivmoddi4+0x298>
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	f240 811c 	bls.w	8000ea8 <__udivmoddi4+0x298>
 8000c70:	3e02      	subs	r6, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1a5b      	subs	r3, r3, r1
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c84:	fb00 f707 	mul.w	r7, r0, r7
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x92>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c94:	f080 810a 	bcs.w	8000eac <__udivmoddi4+0x29c>
 8000c98:	42a7      	cmp	r7, r4
 8000c9a:	f240 8107 	bls.w	8000eac <__udivmoddi4+0x29c>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca6:	1be4      	subs	r4, r4, r7
 8000ca8:	2600      	movs	r6, #0
 8000caa:	b11d      	cbz	r5, 8000cb4 <__udivmoddi4+0xa4>
 8000cac:	40d4      	lsrs	r4, r2
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d909      	bls.n	8000cd2 <__udivmoddi4+0xc2>
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	f000 80ef 	beq.w	8000ea2 <__udivmoddi4+0x292>
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cca:	4630      	mov	r0, r6
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	fab3 f683 	clz	r6, r3
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d14a      	bne.n	8000d70 <__udivmoddi4+0x160>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xd4>
 8000cde:	4282      	cmp	r2, r0
 8000ce0:	f200 80f9 	bhi.w	8000ed6 <__udivmoddi4+0x2c6>
 8000ce4:	1a84      	subs	r4, r0, r2
 8000ce6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	469e      	mov	lr, r3
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	d0e0      	beq.n	8000cb4 <__udivmoddi4+0xa4>
 8000cf2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cf6:	e7dd      	b.n	8000cb4 <__udivmoddi4+0xa4>
 8000cf8:	b902      	cbnz	r2, 8000cfc <__udivmoddi4+0xec>
 8000cfa:	deff      	udf	#255	; 0xff
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f040 8092 	bne.w	8000e2a <__udivmoddi4+0x21a>
 8000d06:	eba1 010c 	sub.w	r1, r1, ip
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2601      	movs	r6, #1
 8000d14:	0c20      	lsrs	r0, r4, #16
 8000d16:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d1a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d1e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d22:	fb0e f003 	mul.w	r0, lr, r3
 8000d26:	4288      	cmp	r0, r1
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x12c>
 8000d2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x12a>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2c0>
 8000d3a:	4643      	mov	r3, r8
 8000d3c:	1a09      	subs	r1, r1, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d44:	fb07 1110 	mls	r1, r7, r0, r1
 8000d48:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x156>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x154>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000d64:	4608      	mov	r0, r1
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d6e:	e79c      	b.n	8000caa <__udivmoddi4+0x9a>
 8000d70:	f1c6 0720 	rsb	r7, r6, #32
 8000d74:	40b3      	lsls	r3, r6
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d82:	fa01 f306 	lsl.w	r3, r1, r6
 8000d86:	431c      	orrs	r4, r3
 8000d88:	40f9      	lsrs	r1, r7
 8000d8a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d92:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d96:	0c20      	lsrs	r0, r4, #16
 8000d98:	fa1f fe8c 	uxth.w	lr, ip
 8000d9c:	fb09 1118 	mls	r1, r9, r8, r1
 8000da0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da4:	fb08 f00e 	mul.w	r0, r8, lr
 8000da8:	4288      	cmp	r0, r1
 8000daa:	fa02 f206 	lsl.w	r2, r2, r6
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b8>
 8000db0:	eb1c 0101 	adds.w	r1, ip, r1
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2bc>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2bc>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4461      	add	r1, ip
 8000dc8:	1a09      	subs	r1, r1, r0
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ddc:	458e      	cmp	lr, r1
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1e2>
 8000de0:	eb1c 0101 	adds.w	r1, ip, r1
 8000de4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2b4>
 8000dea:	458e      	cmp	lr, r1
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2b4>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4461      	add	r1, ip
 8000df2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dfa:	eba1 010e 	sub.w	r1, r1, lr
 8000dfe:	42a1      	cmp	r1, r4
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46a6      	mov	lr, r4
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x2a4>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x2a0>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x212>
 8000e0a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e0e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e12:	fa01 f707 	lsl.w	r7, r1, r7
 8000e16:	fa22 f306 	lsr.w	r3, r2, r6
 8000e1a:	40f1      	lsrs	r1, r6
 8000e1c:	431f      	orrs	r7, r3
 8000e1e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e22:	2600      	movs	r6, #0
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	f1c2 0320 	rsb	r3, r2, #32
 8000e2e:	40d8      	lsrs	r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa21 f303 	lsr.w	r3, r1, r3
 8000e38:	4091      	lsls	r1, r2
 8000e3a:	4301      	orrs	r1, r0
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e48:	fb07 3610 	mls	r6, r7, r0, r3
 8000e4c:	0c0b      	lsrs	r3, r1, #16
 8000e4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e52:	fb00 f60e 	mul.w	r6, r0, lr
 8000e56:	429e      	cmp	r6, r3
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x260>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b8>
 8000e68:	429e      	cmp	r6, r3
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b8>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1b9b      	subs	r3, r3, r6
 8000e72:	b289      	uxth	r1, r1
 8000e74:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e78:	fb07 3316 	mls	r3, r7, r6, r3
 8000e7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e80:	fb06 f30e 	mul.w	r3, r6, lr
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x28a>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e96:	3e02      	subs	r6, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	1ac9      	subs	r1, r1, r3
 8000e9c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0x104>
 8000ea2:	462e      	mov	r6, r5
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	e705      	b.n	8000cb4 <__udivmoddi4+0xa4>
 8000ea8:	4606      	mov	r6, r0
 8000eaa:	e6e3      	b.n	8000c74 <__udivmoddi4+0x64>
 8000eac:	4618      	mov	r0, r3
 8000eae:	e6f8      	b.n	8000ca2 <__udivmoddi4+0x92>
 8000eb0:	454b      	cmp	r3, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f8>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ebc:	3801      	subs	r0, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f8>
 8000ec0:	4646      	mov	r6, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x28a>
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1e2>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x260>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b8>
 8000ed0:	3b02      	subs	r3, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x12c>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e709      	b.n	8000cee <__udivmoddi4+0xde>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x156>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	0000      	movs	r0, r0
	...

08000ee8 <dft>:
	  float ImX[buffersize/2];// imaginaire deel van x
	  float AmpX[buffersize/2];// amplitude van x


float dft(int k)
{
 8000ee8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
	for (j=0; j<(buffersize/2);j++)
 8000ef2:	4b9d      	ldr	r3, [pc, #628]	; (8001168 <dft+0x280>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	e014      	b.n	8000f24 <dft+0x3c>
	{
		ReX[j]=0;
 8000efa:	4b9b      	ldr	r3, [pc, #620]	; (8001168 <dft+0x280>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a9b      	ldr	r2, [pc, #620]	; (800116c <dft+0x284>)
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	f04f 0200 	mov.w	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
		ImX[j]=0;
 8000f0a:	4b97      	ldr	r3, [pc, #604]	; (8001168 <dft+0x280>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a98      	ldr	r2, [pc, #608]	; (8001170 <dft+0x288>)
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
	for (j=0; j<(buffersize/2);j++)
 8000f1a:	4b93      	ldr	r3, [pc, #588]	; (8001168 <dft+0x280>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a91      	ldr	r2, [pc, #580]	; (8001168 <dft+0x280>)
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4b90      	ldr	r3, [pc, #576]	; (8001168 <dft+0x280>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b3f      	cmp	r3, #63	; 0x3f
 8000f2a:	dde6      	ble.n	8000efa <dft+0x12>
	}

		  for (n=0 ; n<(buffersize-1) ; n++)
 8000f2c:	4b91      	ldr	r3, [pc, #580]	; (8001174 <dft+0x28c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	e0ae      	b.n	8001092 <dft+0x1aa>
		  {
			  ReX[k] = ReX[k] + buffer[n] * cos(n * k * M_PI * 2 / buffersize);
 8000f34:	4a8d      	ldr	r2, [pc, #564]	; (800116c <dft+0x284>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff faae 	bl	80004a0 <__aeabi_f2d>
 8000f44:	4604      	mov	r4, r0
 8000f46:	460d      	mov	r5, r1
 8000f48:	4b8a      	ldr	r3, [pc, #552]	; (8001174 <dft+0x28c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a8a      	ldr	r2, [pc, #552]	; (8001178 <dft+0x290>)
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff faa3 	bl	80004a0 <__aeabi_f2d>
 8000f5a:	4680      	mov	r8, r0
 8000f5c:	4689      	mov	r9, r1
 8000f5e:	4b85      	ldr	r3, [pc, #532]	; (8001174 <dft+0x28c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	fb02 f303 	mul.w	r3, r2, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fa87 	bl	800047c <__aeabi_i2d>
 8000f6e:	a37c      	add	r3, pc, #496	; (adr r3, 8001160 <dft+0x278>)
 8000f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f74:	f7ff faec 	bl	8000550 <__aeabi_dmul>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	f7ff f92e 	bl	80001e4 <__adddf3>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	4b79      	ldr	r3, [pc, #484]	; (800117c <dft+0x294>)
 8000f96:	f7ff fc05 	bl	80007a4 <__aeabi_ddiv>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	ec43 2b17 	vmov	d7, r2, r3
 8000fa2:	eeb0 0a47 	vmov.f32	s0, s14
 8000fa6:	eef0 0a67 	vmov.f32	s1, s15
 8000faa:	f003 fb1d 	bl	80045e8 <cos>
 8000fae:	ec53 2b10 	vmov	r2, r3, d0
 8000fb2:	4640      	mov	r0, r8
 8000fb4:	4649      	mov	r1, r9
 8000fb6:	f7ff facb 	bl	8000550 <__aeabi_dmul>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	4629      	mov	r1, r5
 8000fc2:	f7ff f90f 	bl	80001e4 <__adddf3>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f7ff fdb7 	bl	8000b40 <__aeabi_d2f>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	4965      	ldr	r1, [pc, #404]	; (800116c <dft+0x284>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	601a      	str	r2, [r3, #0]
			  ImX[k] = ImX[k] - buffer[n] * sin(n * k * M_PI * 2 / buffersize);
 8000fde:	4a64      	ldr	r2, [pc, #400]	; (8001170 <dft+0x288>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fa59 	bl	80004a0 <__aeabi_f2d>
 8000fee:	4604      	mov	r4, r0
 8000ff0:	460d      	mov	r5, r1
 8000ff2:	4b60      	ldr	r3, [pc, #384]	; (8001174 <dft+0x28c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a60      	ldr	r2, [pc, #384]	; (8001178 <dft+0x290>)
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fa4e 	bl	80004a0 <__aeabi_f2d>
 8001004:	4680      	mov	r8, r0
 8001006:	4689      	mov	r9, r1
 8001008:	4b5a      	ldr	r3, [pc, #360]	; (8001174 <dft+0x28c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	fb02 f303 	mul.w	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa32 	bl	800047c <__aeabi_i2d>
 8001018:	a351      	add	r3, pc, #324	; (adr r3, 8001160 <dft+0x278>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff fa97 	bl	8000550 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	f7ff f8d9 	bl	80001e4 <__adddf3>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	4b4f      	ldr	r3, [pc, #316]	; (800117c <dft+0x294>)
 8001040:	f7ff fbb0 	bl	80007a4 <__aeabi_ddiv>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	ec43 2b17 	vmov	d7, r2, r3
 800104c:	eeb0 0a47 	vmov.f32	s0, s14
 8001050:	eef0 0a67 	vmov.f32	s1, s15
 8001054:	f003 fb64 	bl	8004720 <sin>
 8001058:	ec53 2b10 	vmov	r2, r3, d0
 800105c:	4640      	mov	r0, r8
 800105e:	4649      	mov	r1, r9
 8001060:	f7ff fa76 	bl	8000550 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4620      	mov	r0, r4
 800106a:	4629      	mov	r1, r5
 800106c:	f7ff f8b8 	bl	80001e0 <__aeabi_dsub>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f7ff fd62 	bl	8000b40 <__aeabi_d2f>
 800107c:	4602      	mov	r2, r0
 800107e:	493c      	ldr	r1, [pc, #240]	; (8001170 <dft+0x288>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	601a      	str	r2, [r3, #0]
		  for (n=0 ; n<(buffersize-1) ; n++)
 8001088:	4b3a      	ldr	r3, [pc, #232]	; (8001174 <dft+0x28c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	4a39      	ldr	r2, [pc, #228]	; (8001174 <dft+0x28c>)
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b38      	ldr	r3, [pc, #224]	; (8001174 <dft+0x28c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b7e      	cmp	r3, #126	; 0x7e
 8001098:	f77f af4c 	ble.w	8000f34 <dft+0x4c>
		  }

		  ReX[k] /= buffersize/2;
 800109c:	4a33      	ldr	r2, [pc, #204]	; (800116c <dft+0x284>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	ed93 7a00 	vldr	s14, [r3]
 80010a8:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001180 <dft+0x298>
 80010ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b0:	4a2e      	ldr	r2, [pc, #184]	; (800116c <dft+0x284>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	edc3 7a00 	vstr	s15, [r3]
		  ImX[k] /= buffersize/2;
 80010bc:	4a2c      	ldr	r2, [pc, #176]	; (8001170 <dft+0x288>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	ed93 7a00 	vldr	s14, [r3]
 80010c8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001180 <dft+0x298>
 80010cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d0:	4a27      	ldr	r2, [pc, #156]	; (8001170 <dft+0x288>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	edc3 7a00 	vstr	s15, [r3]

		  AmpX[k] = sqrt(ReX[k]*ReX[k] + ImX[k]*ImX[k]);//sterkte van signal per frequentie van k
 80010dc:	4a23      	ldr	r2, [pc, #140]	; (800116c <dft+0x284>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	ed93 7a00 	vldr	s14, [r3]
 80010e8:	4a20      	ldr	r2, [pc, #128]	; (800116c <dft+0x284>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	edd3 7a00 	vldr	s15, [r3]
 80010f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f8:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <dft+0x288>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	edd3 6a00 	vldr	s13, [r3]
 8001104:	4a1a      	ldr	r2, [pc, #104]	; (8001170 <dft+0x288>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	edd3 7a00 	vldr	s15, [r3]
 8001110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001118:	ee17 0a90 	vmov	r0, s15
 800111c:	f7ff f9c0 	bl	80004a0 <__aeabi_f2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	ec43 2b10 	vmov	d0, r2, r3
 8001128:	f003 fb52 	bl	80047d0 <sqrt>
 800112c:	ec53 2b10 	vmov	r2, r3, d0
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fd04 	bl	8000b40 <__aeabi_d2f>
 8001138:	4602      	mov	r2, r0
 800113a:	4912      	ldr	r1, [pc, #72]	; (8001184 <dft+0x29c>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	601a      	str	r2, [r3, #0]
		  return AmpX[k];
 8001144:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <dft+0x29c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	ee07 3a90 	vmov	s15, r3
}
 8001152:	eeb0 0a67 	vmov.f32	s0, s15
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800115e:	bf00      	nop
 8001160:	54442d18 	.word	0x54442d18
 8001164:	400921fb 	.word	0x400921fb
 8001168:	20000090 	.word	0x20000090
 800116c:	20000094 	.word	0x20000094
 8001170:	20000194 	.word	0x20000194
 8001174:	2000008c 	.word	0x2000008c
 8001178:	200004c0 	.word	0x200004c0
 800117c:	40600000 	.word	0x40600000
 8001180:	42800000 	.word	0x42800000
 8001184:	20000294 	.word	0x20000294

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118e:	f000 fd43 	bl	8001c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001192:	f000 f96b 	bl	800146c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001196:	f000 facf 	bl	8001738 <MX_GPIO_Init>
  MX_TIM2_Init();
 800119a:	f000 fa57 	bl	800164c <MX_TIM2_Init>
  MX_ADC1_Init();
 800119e:	f000 f9cd 	bl	800153c <MX_ADC1_Init>
  MX_SPI1_Init();
 80011a2:	f000 fa1d 	bl	80015e0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80011a6:	f000 fa9d 	bl	80016e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80011aa:	48a4      	ldr	r0, [pc, #656]	; (800143c <main+0x2b4>)
 80011ac:	f002 fa30 	bl	8003610 <HAL_TIM_Base_Start_IT>
  while (1)
  {



	  if (dft_waarde == 1){
 80011b0:	4ba3      	ldr	r3, [pc, #652]	; (8001440 <main+0x2b8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	f040 80c3 	bne.w	8001340 <main+0x1b8>
		  f2031hz = dft(12);
 80011ba:	200c      	movs	r0, #12
 80011bc:	f7ff fe94 	bl	8000ee8 <dft>
 80011c0:	eef0 7a40 	vmov.f32	s15, s0
 80011c4:	4b9f      	ldr	r3, [pc, #636]	; (8001444 <main+0x2bc>)
 80011c6:	edc3 7a00 	vstr	s15, [r3]
		  f1000hz = dft(6);
 80011ca:	2006      	movs	r0, #6
 80011cc:	f7ff fe8c 	bl	8000ee8 <dft>
 80011d0:	eef0 7a40 	vmov.f32	s15, s0
 80011d4:	4b9c      	ldr	r3, [pc, #624]	; (8001448 <main+0x2c0>)
 80011d6:	edc3 7a00 	vstr	s15, [r3]
		  f3000hz = dft(21);
 80011da:	2015      	movs	r0, #21
 80011dc:	f7ff fe84 	bl	8000ee8 <dft>
 80011e0:	eef0 7a40 	vmov.f32	s15, s0
 80011e4:	4b99      	ldr	r3, [pc, #612]	; (800144c <main+0x2c4>)
 80011e6:	edc3 7a00 	vstr	s15, [r3]
		  f4000hz = dft(26);
 80011ea:	201a      	movs	r0, #26
 80011ec:	f7ff fe7c 	bl	8000ee8 <dft>
 80011f0:	eef0 7a40 	vmov.f32	s15, s0
 80011f4:	4b96      	ldr	r3, [pc, #600]	; (8001450 <main+0x2c8>)
 80011f6:	edc3 7a00 	vstr	s15, [r3]
		  //for (int g=0; g<buffersize/2;g++) dft(g);
		  dft_waarde = 0;
 80011fa:	4b91      	ldr	r3, [pc, #580]	; (8001440 <main+0x2b8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]



		  if (f1000hz >= 200){
 8001200:	4b91      	ldr	r3, [pc, #580]	; (8001448 <main+0x2c0>)
 8001202:	edd3 7a00 	vldr	s15, [r3]
 8001206:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001454 <main+0x2cc>
 800120a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001212:	db1a      	blt.n	800124a <main+0xc2>
			  if (last1 ==0)
 8001214:	4b90      	ldr	r3, [pc, #576]	; (8001458 <main+0x2d0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d119      	bne.n	8001250 <main+0xc8>
			  {
				 int buf1waarde = round(f1000hz);
 800121c:	4b8a      	ldr	r3, [pc, #552]	; (8001448 <main+0x2c0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f93d 	bl	80004a0 <__aeabi_f2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	ec43 2b10 	vmov	d0, r2, r3
 800122e:	f003 fa2f 	bl	8004690 <round>
 8001232:	ec53 2b10 	vmov	r2, r3, d0
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fc39 	bl	8000ab0 <__aeabi_d2iz>
 800123e:	4603      	mov	r3, r0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
				 uint8_t buf1[3];
				// HAL_USART_Transmit(&husart2, (uint8_t*) buf1, sprintf(buf1, "%d", buf1waarde), HAL_MAX_DELAY);
				 last1 = 1;
 8001242:	4b85      	ldr	r3, [pc, #532]	; (8001458 <main+0x2d0>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e002      	b.n	8001250 <main+0xc8>
			  }
		  }
		  else last1 = 0;
 800124a:	4b83      	ldr	r3, [pc, #524]	; (8001458 <main+0x2d0>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]



		  if (f2031hz >= 200){
 8001250:	4b7c      	ldr	r3, [pc, #496]	; (8001444 <main+0x2bc>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001454 <main+0x2cc>
 800125a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800125e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001262:	db1a      	blt.n	800129a <main+0x112>
			  if (last2 == 0)
 8001264:	4b7d      	ldr	r3, [pc, #500]	; (800145c <main+0x2d4>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d119      	bne.n	80012a0 <main+0x118>
			  {
				  int buf2waarde = round(f2031hz);
 800126c:	4b75      	ldr	r3, [pc, #468]	; (8001444 <main+0x2bc>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f915 	bl	80004a0 <__aeabi_f2d>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	ec43 2b10 	vmov	d0, r2, r3
 800127e:	f003 fa07 	bl	8004690 <round>
 8001282:	ec53 2b10 	vmov	r2, r3, d0
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fc11 	bl	8000ab0 <__aeabi_d2iz>
 800128e:	4603      	mov	r3, r0
 8001290:	623b      	str	r3, [r7, #32]
				  uint8_t buf2[3];
				 // HAL_USART_Transmit(&husart2, (uint8_t*) buf2, sprintf(buf2, "%d", buf2waarde), HAL_MAX_DELAY);
				  last2 = 1;
 8001292:	4b72      	ldr	r3, [pc, #456]	; (800145c <main+0x2d4>)
 8001294:	2201      	movs	r2, #1
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	e002      	b.n	80012a0 <main+0x118>
			  }
		  }
		  else last2 = 0;
 800129a:	4b70      	ldr	r3, [pc, #448]	; (800145c <main+0x2d4>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]


		  if (f3000hz >= 200){
 80012a0:	4b6a      	ldr	r3, [pc, #424]	; (800144c <main+0x2c4>)
 80012a2:	edd3 7a00 	vldr	s15, [r3]
 80012a6:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001454 <main+0x2cc>
 80012aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b2:	db1a      	blt.n	80012ea <main+0x162>
			  if (last3 == 0)
 80012b4:	4b6a      	ldr	r3, [pc, #424]	; (8001460 <main+0x2d8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d119      	bne.n	80012f0 <main+0x168>
			  {
				  int buf3waarde = round(f3000hz);
 80012bc:	4b63      	ldr	r3, [pc, #396]	; (800144c <main+0x2c4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f8ed 	bl	80004a0 <__aeabi_f2d>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	ec43 2b10 	vmov	d0, r2, r3
 80012ce:	f003 f9df 	bl	8004690 <round>
 80012d2:	ec53 2b10 	vmov	r2, r3, d0
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fbe9 	bl	8000ab0 <__aeabi_d2iz>
 80012de:	4603      	mov	r3, r0
 80012e0:	61fb      	str	r3, [r7, #28]
				  uint8_t buf3[3];
				 // HAL_USART_Transmit(&husart2, (uint8_t*) buf3, sprintf(buf3, "%d", buf3waarde), HAL_MAX_DELAY);
			  	  last3 = 1;
 80012e2:	4b5f      	ldr	r3, [pc, #380]	; (8001460 <main+0x2d8>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	e002      	b.n	80012f0 <main+0x168>
			  }
		  }
		  else last3 = 0;
 80012ea:	4b5d      	ldr	r3, [pc, #372]	; (8001460 <main+0x2d8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]


		  if (f4000hz >= 200){
 80012f0:	4b57      	ldr	r3, [pc, #348]	; (8001450 <main+0x2c8>)
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001454 <main+0x2cc>
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	db1a      	blt.n	800133a <main+0x1b2>
			  if (last4 ==0)
 8001304:	4b57      	ldr	r3, [pc, #348]	; (8001464 <main+0x2dc>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d119      	bne.n	8001340 <main+0x1b8>
			  {
				  int buf4waarde = round(f4000hz);
 800130c:	4b50      	ldr	r3, [pc, #320]	; (8001450 <main+0x2c8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f8c5 	bl	80004a0 <__aeabi_f2d>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	ec43 2b10 	vmov	d0, r2, r3
 800131e:	f003 f9b7 	bl	8004690 <round>
 8001322:	ec53 2b10 	vmov	r2, r3, d0
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fbc1 	bl	8000ab0 <__aeabi_d2iz>
 800132e:	4603      	mov	r3, r0
 8001330:	61bb      	str	r3, [r7, #24]
				  uint8_t buf4[3];
				 // HAL_UART_Transmit(&huart2, (uint8_t*) buf4, sprintf(buf4, "%d", buf4waarde), HAL_MAX_DELAY);
				  last4 = 1;
 8001332:	4b4c      	ldr	r3, [pc, #304]	; (8001464 <main+0x2dc>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e002      	b.n	8001340 <main+0x1b8>
			  }
		  }
		  else last4 = 0;
 800133a:	4b4a      	ldr	r3, [pc, #296]	; (8001464 <main+0x2dc>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]



	  }

	  uint8_t testbuf[] = {(round(f1000hz))/2,(round(f2031hz))/2, (round(f3000hz))/2, (round(f4000hz))/2 };
 8001340:	4b41      	ldr	r3, [pc, #260]	; (8001448 <main+0x2c0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8ab 	bl	80004a0 <__aeabi_f2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	ec43 2b10 	vmov	d0, r2, r3
 8001352:	f003 f99d 	bl	8004690 <round>
 8001356:	ec51 0b10 	vmov	r0, r1, d0
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001362:	f7ff fa1f 	bl	80007a4 <__aeabi_ddiv>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff fbc7 	bl	8000b00 <__aeabi_d2uiz>
 8001372:	4603      	mov	r3, r0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	753b      	strb	r3, [r7, #20]
 8001378:	4b32      	ldr	r3, [pc, #200]	; (8001444 <main+0x2bc>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f88f 	bl	80004a0 <__aeabi_f2d>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	ec43 2b10 	vmov	d0, r2, r3
 800138a:	f003 f981 	bl	8004690 <round>
 800138e:	ec51 0b10 	vmov	r0, r1, d0
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800139a:	f7ff fa03 	bl	80007a4 <__aeabi_ddiv>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f7ff fbab 	bl	8000b00 <__aeabi_d2uiz>
 80013aa:	4603      	mov	r3, r0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	757b      	strb	r3, [r7, #21]
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <main+0x2c4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f873 	bl	80004a0 <__aeabi_f2d>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	ec43 2b10 	vmov	d0, r2, r3
 80013c2:	f003 f965 	bl	8004690 <round>
 80013c6:	ec51 0b10 	vmov	r0, r1, d0
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013d2:	f7ff f9e7 	bl	80007a4 <__aeabi_ddiv>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	f7ff fb8f 	bl	8000b00 <__aeabi_d2uiz>
 80013e2:	4603      	mov	r3, r0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	75bb      	strb	r3, [r7, #22]
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <main+0x2c8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f857 	bl	80004a0 <__aeabi_f2d>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	ec43 2b10 	vmov	d0, r2, r3
 80013fa:	f003 f949 	bl	8004690 <round>
 80013fe:	ec51 0b10 	vmov	r0, r1, d0
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800140a:	f7ff f9cb 	bl	80007a4 <__aeabi_ddiv>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fb73 	bl	8000b00 <__aeabi_d2uiz>
 800141a:	4603      	mov	r3, r0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	75fb      	strb	r3, [r7, #23]

	  HAL_UART_Transmit(&huart2, testbuf, sizeof(testbuf), HAL_MAX_DELAY);
 8001420:	f107 0114 	add.w	r1, r7, #20
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
 8001428:	2204      	movs	r2, #4
 800142a:	480f      	ldr	r0, [pc, #60]	; (8001468 <main+0x2e0>)
 800142c:	f002 fd33 	bl	8003e96 <HAL_UART_Transmit>
	  HAL_Delay(900);
 8001430:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001434:	f000 fc62 	bl	8001cfc <HAL_Delay>
  {
 8001438:	e6ba      	b.n	80011b0 <main+0x28>
 800143a:	bf00      	nop
 800143c:	20000434 	.word	0x20000434
 8001440:	200006c4 	.word	0x200006c4
 8001444:	200006cc 	.word	0x200006cc
 8001448:	200006c8 	.word	0x200006c8
 800144c:	200006d0 	.word	0x200006d0
 8001450:	200006d4 	.word	0x200006d4
 8001454:	43480000 	.word	0x43480000
 8001458:	200006dc 	.word	0x200006dc
 800145c:	200006e0 	.word	0x200006e0
 8001460:	200006d8 	.word	0x200006d8
 8001464:	200006e4 	.word	0x200006e4
 8001468:	2000047c 	.word	0x2000047c

0800146c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b094      	sub	sp, #80	; 0x50
 8001470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001472:	f107 0320 	add.w	r3, r7, #32
 8001476:	2230      	movs	r2, #48	; 0x30
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f003 f8aa 	bl	80045d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <SystemClock_Config+0xc8>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	4a26      	ldr	r2, [pc, #152]	; (8001534 <SystemClock_Config+0xc8>)
 800149a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149e:	6413      	str	r3, [r2, #64]	; 0x40
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <SystemClock_Config+0xc8>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	4b21      	ldr	r3, [pc, #132]	; (8001538 <SystemClock_Config+0xcc>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a20      	ldr	r2, [pc, #128]	; (8001538 <SystemClock_Config+0xcc>)
 80014b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <SystemClock_Config+0xcc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c8:	2302      	movs	r3, #2
 80014ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014cc:	2301      	movs	r3, #1
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d0:	2310      	movs	r3, #16
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d4:	2302      	movs	r3, #2
 80014d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014d8:	2300      	movs	r3, #0
 80014da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014dc:	2308      	movs	r3, #8
 80014de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80014e0:	2340      	movs	r3, #64	; 0x40
 80014e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014e4:	2302      	movs	r3, #2
 80014e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014e8:	2304      	movs	r3, #4
 80014ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ec:	f107 0320 	add.w	r3, r7, #32
 80014f0:	4618      	mov	r0, r3
 80014f2:	f001 fb5d 	bl	8002bb0 <HAL_RCC_OscConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014fc:	f000 f9c2 	bl	8001884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001500:	230f      	movs	r3, #15
 8001502:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001504:	2302      	movs	r3, #2
 8001506:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	2101      	movs	r1, #1
 800151a:	4618      	mov	r0, r3
 800151c:	f001 fdc0 	bl	80030a0 <HAL_RCC_ClockConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001526:	f000 f9ad 	bl	8001884 <Error_Handler>
  }
}
 800152a:	bf00      	nop
 800152c:	3750      	adds	r7, #80	; 0x50
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	40007000 	.word	0x40007000

0800153c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <MX_ADC1_Init+0x98>)
 8001550:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <MX_ADC1_Init+0x9c>)
 8001552:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <MX_ADC1_Init+0x98>)
 8001556:	2200      	movs	r2, #0
 8001558:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800155a:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <MX_ADC1_Init+0x98>)
 800155c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001560:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <MX_ADC1_Init+0x98>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <MX_ADC1_Init+0x98>)
 800156a:	2200      	movs	r2, #0
 800156c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800156e:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <MX_ADC1_Init+0x98>)
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <MX_ADC1_Init+0x98>)
 8001578:	2200      	movs	r2, #0
 800157a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <MX_ADC1_Init+0x98>)
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <MX_ADC1_Init+0xa0>)
 8001580:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <MX_ADC1_Init+0x98>)
 8001584:	2200      	movs	r2, #0
 8001586:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_ADC1_Init+0x98>)
 800158a:	2201      	movs	r2, #1
 800158c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_ADC1_Init+0x98>)
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_ADC1_Init+0x98>)
 8001598:	2201      	movs	r2, #1
 800159a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800159c:	480d      	ldr	r0, [pc, #52]	; (80015d4 <MX_ADC1_Init+0x98>)
 800159e:	f000 fbd1 	bl	8001d44 <HAL_ADC_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015a8:	f000 f96c 	bl	8001884 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015b0:	2301      	movs	r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b8:	463b      	mov	r3, r7
 80015ba:	4619      	mov	r1, r3
 80015bc:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_ADC1_Init+0x98>)
 80015be:	f000 fdf5 	bl	80021ac <HAL_ADC_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015c8:	f000 f95c 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000394 	.word	0x20000394
 80015d8:	40012000 	.word	0x40012000
 80015dc:	0f000001 	.word	0x0f000001

080015e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <MX_SPI1_Init+0x64>)
 80015e6:	4a18      	ldr	r2, [pc, #96]	; (8001648 <MX_SPI1_Init+0x68>)
 80015e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_SPI1_Init+0x64>)
 80015ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_SPI1_Init+0x64>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_SPI1_Init+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_SPI1_Init+0x64>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_SPI1_Init+0x64>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_SPI1_Init+0x64>)
 800160c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001610:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_SPI1_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <MX_SPI1_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_SPI1_Init+0x64>)
 8001620:	2200      	movs	r2, #0
 8001622:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <MX_SPI1_Init+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_SPI1_Init+0x64>)
 800162c:	220a      	movs	r2, #10
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <MX_SPI1_Init+0x64>)
 8001632:	f001 ff15 	bl	8003460 <HAL_SPI_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800163c:	f000 f922 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200003dc 	.word	0x200003dc
 8001648:	40013000 	.word	0x40013000

0800164c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001660:	463b      	mov	r3, r7
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001668:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <MX_TIM2_Init+0x94>)
 800166a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800166e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <MX_TIM2_Init+0x94>)
 8001672:	2220      	movs	r2, #32
 8001674:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <MX_TIM2_Init+0x94>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <MX_TIM2_Init+0x94>)
 800167e:	2232      	movs	r2, #50	; 0x32
 8001680:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <MX_TIM2_Init+0x94>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <MX_TIM2_Init+0x94>)
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800168e:	4814      	ldr	r0, [pc, #80]	; (80016e0 <MX_TIM2_Init+0x94>)
 8001690:	f001 ff6f 	bl	8003572 <HAL_TIM_Base_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800169a:	f000 f8f3 	bl	8001884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	4619      	mov	r1, r3
 80016aa:	480d      	ldr	r0, [pc, #52]	; (80016e0 <MX_TIM2_Init+0x94>)
 80016ac:	f002 f91a 	bl	80038e4 <HAL_TIM_ConfigClockSource>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80016b6:	f000 f8e5 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c2:	463b      	mov	r3, r7
 80016c4:	4619      	mov	r1, r3
 80016c6:	4806      	ldr	r0, [pc, #24]	; (80016e0 <MX_TIM2_Init+0x94>)
 80016c8:	f002 fb16 	bl	8003cf8 <HAL_TIMEx_MasterConfigSynchronization>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80016d2:	f000 f8d7 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000434 	.word	0x20000434

080016e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	; (8001734 <MX_USART2_UART_Init+0x50>)
 80016ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 800170a:	220c      	movs	r2, #12
 800170c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 800171c:	f002 fb6e 	bl	8003dfc <HAL_UART_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001726:	f000 f8ad 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	2000047c 	.word	0x2000047c
 8001734:	40004400 	.word	0x40004400

08001738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <MX_GPIO_Init+0xc4>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a29      	ldr	r2, [pc, #164]	; (80017fc <MX_GPIO_Init+0xc4>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b27      	ldr	r3, [pc, #156]	; (80017fc <MX_GPIO_Init+0xc4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	4b23      	ldr	r3, [pc, #140]	; (80017fc <MX_GPIO_Init+0xc4>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a22      	ldr	r2, [pc, #136]	; (80017fc <MX_GPIO_Init+0xc4>)
 8001774:	f043 0308 	orr.w	r3, r3, #8
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b20      	ldr	r3, [pc, #128]	; (80017fc <MX_GPIO_Init+0xc4>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <MX_GPIO_Init+0xc4>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a1b      	ldr	r2, [pc, #108]	; (80017fc <MX_GPIO_Init+0xc4>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <MX_GPIO_Init+0xc4>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|BLUELED_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80017a8:	4815      	ldr	r0, [pc, #84]	; (8001800 <MX_GPIO_Init+0xc8>)
 80017aa:	f001 f9cd 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ldac_Pin|SS1_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2190      	movs	r1, #144	; 0x90
 80017b2:	4814      	ldr	r0, [pc, #80]	; (8001804 <MX_GPIO_Init+0xcc>)
 80017b4:	f001 f9c8 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 BLUELED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|BLUELED_Pin;
 80017b8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80017bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	480b      	ldr	r0, [pc, #44]	; (8001800 <MX_GPIO_Init+0xc8>)
 80017d2:	f001 f835 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pins : ldac_Pin SS1_Pin */
  GPIO_InitStruct.Pin = ldac_Pin|SS1_Pin;
 80017d6:	2390      	movs	r3, #144	; 0x90
 80017d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017da:	2301      	movs	r3, #1
 80017dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	4619      	mov	r1, r3
 80017ec:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_GPIO_Init+0xcc>)
 80017ee:	f001 f827 	bl	8002840 <HAL_GPIO_Init>

}
 80017f2:	bf00      	nop
 80017f4:	3720      	adds	r7, #32
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020c00 	.word	0x40020c00
 8001804:	40020400 	.word	0x40020400

08001808 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
	{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_TogglePin(GPIOD, BLUELED_Pin);
 8001810:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001814:	4815      	ldr	r0, [pc, #84]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001816:	f001 f9b0 	bl	8002b7a <HAL_GPIO_TogglePin>

		if (htim == &htim2)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a14      	ldr	r2, [pc, #80]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d120      	bne.n	8001864 <HAL_TIM_PeriodElapsedCallback+0x5c>
		{
			pos++;
 8001822:	4b14      	ldr	r3, [pc, #80]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	3301      	adds	r3, #1
 8001828:	4a12      	ldr	r2, [pc, #72]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800182a:	6013      	str	r3, [r2, #0]
			buffer[(pos-1)] = HAL_ADC_GetValue(&hadc1);
 800182c:	4812      	ldr	r0, [pc, #72]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800182e:	f000 fc91 	bl	8002154 <HAL_ADC_GetValue>
 8001832:	ee07 0a90 	vmov	s15, r0
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3b01      	subs	r3, #1
 800183c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001840:	4a0e      	ldr	r2, [pc, #56]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	edc3 7a00 	vstr	s15, [r3]
			HAL_ADC_Start(&hadc1);
 800184a:	480b      	ldr	r0, [pc, #44]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800184c:	f000 fabe 	bl	8001dcc <HAL_ADC_Start>
			if (pos > buffersize)
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b80      	cmp	r3, #128	; 0x80
 8001856:	d905      	bls.n	8001864 <HAL_TIM_PeriodElapsedCallback+0x5c>
				{
				dft_waarde = 1;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]
				pos = 0;
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

				}

		}
	}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40020c00 	.word	0x40020c00
 8001870:	20000434 	.word	0x20000434
 8001874:	200006c0 	.word	0x200006c0
 8001878:	20000394 	.word	0x20000394
 800187c:	200004c0 	.word	0x200004c0
 8001880:	200006c4 	.word	0x200006c4

08001884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800188c:	e7fe      	b.n	800188c <Error_Handler+0x8>
	...

08001890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_MspInit+0x4c>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <HAL_MspInit+0x4c>)
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_MspInit+0x4c>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_MspInit+0x4c>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_MspInit+0x4c>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_MspInit+0x4c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800

080018e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a1b      	ldr	r2, [pc, #108]	; (800196c <HAL_ADC_MspInit+0x8c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d12f      	bne.n	8001962 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <HAL_ADC_MspInit+0x90>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4a19      	ldr	r2, [pc, #100]	; (8001970 <HAL_ADC_MspInit+0x90>)
 800190c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_ADC_MspInit+0x90>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <HAL_ADC_MspInit+0x90>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <HAL_ADC_MspInit+0x90>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_ADC_MspInit+0x90>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800193a:	2301      	movs	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800193e:	2303      	movs	r3, #3
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4809      	ldr	r0, [pc, #36]	; (8001974 <HAL_ADC_MspInit+0x94>)
 800194e:	f000 ff77 	bl	8002840 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	2100      	movs	r1, #0
 8001956:	2012      	movs	r0, #18
 8001958:	f000 ff3b 	bl	80027d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800195c:	2012      	movs	r0, #18
 800195e:	f000 ff54 	bl	800280a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001962:	bf00      	nop
 8001964:	3728      	adds	r7, #40	; 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40012000 	.word	0x40012000
 8001970:	40023800 	.word	0x40023800
 8001974:	40020000 	.word	0x40020000

08001978 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a28      	ldr	r2, [pc, #160]	; (8001a38 <HAL_SPI_MspInit+0xc0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d149      	bne.n	8001a2e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <HAL_SPI_MspInit+0xc4>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	4a26      	ldr	r2, [pc, #152]	; (8001a3c <HAL_SPI_MspInit+0xc4>)
 80019a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019a8:	6453      	str	r3, [r2, #68]	; 0x44
 80019aa:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <HAL_SPI_MspInit+0xc4>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <HAL_SPI_MspInit+0xc4>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a1f      	ldr	r2, [pc, #124]	; (8001a3c <HAL_SPI_MspInit+0xc4>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <HAL_SPI_MspInit+0xc4>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <HAL_SPI_MspInit+0xc4>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <HAL_SPI_MspInit+0xc4>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <HAL_SPI_MspInit+0xc4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ee:	23c0      	movs	r3, #192	; 0xc0
 80019f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019fe:	2305      	movs	r3, #5
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	480d      	ldr	r0, [pc, #52]	; (8001a40 <HAL_SPI_MspInit+0xc8>)
 8001a0a:	f000 ff19 	bl	8002840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a0e:	2308      	movs	r3, #8
 8001a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a1e:	2305      	movs	r3, #5
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	4806      	ldr	r0, [pc, #24]	; (8001a44 <HAL_SPI_MspInit+0xcc>)
 8001a2a:	f000 ff09 	bl	8002840 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a2e:	bf00      	nop
 8001a30:	3728      	adds	r7, #40	; 0x28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40013000 	.word	0x40013000
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40020400 	.word	0x40020400

08001a48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a58:	d115      	bne.n	8001a86 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_TIM_Base_MspInit+0x48>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <HAL_TIM_Base_MspInit+0x48>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_TIM_Base_MspInit+0x48>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	201c      	movs	r0, #28
 8001a7c:	f000 fea9 	bl	80027d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a80:	201c      	movs	r0, #28
 8001a82:	f000 fec2 	bl	800280a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800

08001a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a19      	ldr	r2, [pc, #100]	; (8001b18 <HAL_UART_MspInit+0x84>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d12b      	bne.n	8001b0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_UART_MspInit+0x88>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <HAL_UART_MspInit+0x88>)
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_UART_MspInit+0x88>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_UART_MspInit+0x88>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <HAL_UART_MspInit+0x88>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_UART_MspInit+0x88>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aee:	230c      	movs	r3, #12
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afa:	2303      	movs	r3, #3
 8001afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001afe:	2307      	movs	r3, #7
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4805      	ldr	r0, [pc, #20]	; (8001b20 <HAL_UART_MspInit+0x8c>)
 8001b0a:	f000 fe99 	bl	8002840 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40004400 	.word	0x40004400
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020000 	.word	0x40020000

08001b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <NMI_Handler+0x4>

08001b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <HardFault_Handler+0x4>

08001b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <MemManage_Handler+0x4>

08001b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3a:	e7fe      	b.n	8001b3a <BusFault_Handler+0x4>

08001b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <UsageFault_Handler+0x4>

08001b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b70:	f000 f8a4 	bl	8001cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <ADC_IRQHandler+0x10>)
 8001b7e:	f000 f9d9 	bl	8001f34 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000394 	.word	0x20000394

08001b8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <TIM2_IRQHandler+0x10>)
 8001b92:	f001 fd9f 	bl	80036d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000434 	.word	0x20000434

08001ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <SystemInit+0x20>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001baa:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <SystemInit+0x20>)
 8001bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bc8:	480d      	ldr	r0, [pc, #52]	; (8001c00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bca:	490e      	ldr	r1, [pc, #56]	; (8001c04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bcc:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001be0:	4c0b      	ldr	r4, [pc, #44]	; (8001c10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bee:	f7ff ffd7 	bl	8001ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f002 fccb 	bl	800458c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bf6:	f7ff fac7 	bl	8001188 <main>
  bx  lr    
 8001bfa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c08:	08005b90 	.word	0x08005b90
  ldr r2, =_sbss
 8001c0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c10:	200006ec 	.word	0x200006ec

08001c14 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <DMA1_Stream0_IRQHandler>
	...

08001c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0d      	ldr	r2, [pc, #52]	; (8001c58 <HAL_Init+0x40>)
 8001c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <HAL_Init+0x40>)
 8001c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_Init+0x40>)
 8001c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c40:	2003      	movs	r0, #3
 8001c42:	f000 fdbb 	bl	80027bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c46:	200f      	movs	r0, #15
 8001c48:	f000 f808 	bl	8001c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c4c:	f7ff fe20 	bl	8001890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023c00 	.word	0x40023c00

08001c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_InitTick+0x54>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_InitTick+0x58>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fdd3 	bl	8002826 <HAL_SYSTICK_Config>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00e      	b.n	8001ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b0f      	cmp	r3, #15
 8001c8e:	d80a      	bhi.n	8001ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c90:	2200      	movs	r2, #0
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f000 fd9b 	bl	80027d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c9c:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <HAL_InitTick+0x5c>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e000      	b.n	8001ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	20000004 	.word	0x20000004

08001cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_IncTick+0x20>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_IncTick+0x24>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <HAL_IncTick+0x24>)
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000008 	.word	0x20000008
 8001ce0:	200006e8 	.word	0x200006e8

08001ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_GetTick+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	200006e8 	.word	0x200006e8

08001cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d04:	f7ff ffee 	bl	8001ce4 <HAL_GetTick>
 8001d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d005      	beq.n	8001d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_Delay+0x44>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4413      	add	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d22:	bf00      	nop
 8001d24:	f7ff ffde 	bl	8001ce4 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d8f7      	bhi.n	8001d24 <HAL_Delay+0x28>
  {
  }
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000008 	.word	0x20000008

08001d44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e033      	b.n	8001dc2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d109      	bne.n	8001d76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff fdbc 	bl	80018e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d118      	bne.n	8001db4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d8a:	f023 0302 	bic.w	r3, r3, #2
 8001d8e:	f043 0202 	orr.w	r2, r3, #2
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fb3a 	bl	8002410 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f023 0303 	bic.w	r3, r3, #3
 8001daa:	f043 0201 	orr.w	r2, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
 8001db2:	e001      	b.n	8001db8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_ADC_Start+0x1a>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e097      	b.n	8001f16 <HAL_ADC_Start+0x14a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d018      	beq.n	8001e2e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e0c:	4b45      	ldr	r3, [pc, #276]	; (8001f24 <HAL_ADC_Start+0x158>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a45      	ldr	r2, [pc, #276]	; (8001f28 <HAL_ADC_Start+0x15c>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	0c9a      	lsrs	r2, r3, #18
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e20:	e002      	b.n	8001e28 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f9      	bne.n	8001e22 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d15f      	bne.n	8001efc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d007      	beq.n	8001e6e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e7a:	d106      	bne.n	8001e8a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e80:	f023 0206 	bic.w	r2, r3, #6
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	645a      	str	r2, [r3, #68]	; 0x44
 8001e88:	e002      	b.n	8001e90 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e98:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_ADC_Start+0x160>)
 8001e9a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ea4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10f      	bne.n	8001ed2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d129      	bne.n	8001f14 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	e020      	b.n	8001f14 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a16      	ldr	r2, [pc, #88]	; (8001f30 <HAL_ADC_Start+0x164>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d11b      	bne.n	8001f14 <HAL_ADC_Start+0x148>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d114      	bne.n	8001f14 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	e00b      	b.n	8001f14 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f043 0210 	orr.w	r2, r3, #16
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0c:	f043 0201 	orr.w	r2, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000000 	.word	0x20000000
 8001f28:	431bde83 	.word	0x431bde83
 8001f2c:	40012300 	.word	0x40012300
 8001f30:	40012000 	.word	0x40012000

08001f34 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d049      	beq.n	8001ffe <HAL_ADC_IRQHandler+0xca>
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d046      	beq.n	8001ffe <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f003 0310 	and.w	r3, r3, #16
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d12b      	bne.n	8001fee <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d127      	bne.n	8001fee <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d119      	bne.n	8001fee <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0220 	bic.w	r2, r2, #32
 8001fc8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d105      	bne.n	8001fee <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f8bd 	bl	800216e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0212 	mvn.w	r2, #18
 8001ffc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d057      	beq.n	80020c4 <HAL_ADC_IRQHandler+0x190>
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d054      	beq.n	80020c4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b00      	cmp	r3, #0
 8002024:	d105      	bne.n	8002032 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d139      	bne.n	80020b4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002046:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002058:	2b00      	cmp	r3, #0
 800205a:	d12b      	bne.n	80020b4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002066:	2b00      	cmp	r3, #0
 8002068:	d124      	bne.n	80020b4 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002074:	2b00      	cmp	r3, #0
 8002076:	d11d      	bne.n	80020b4 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800207c:	2b00      	cmp	r3, #0
 800207e:	d119      	bne.n	80020b4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800208e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d105      	bne.n	80020b4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 faa7 	bl	8002608 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f06f 020c 	mvn.w	r2, #12
 80020c2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d017      	beq.n	800210a <HAL_ADC_IRQHandler+0x1d6>
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d014      	beq.n	800210a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d10d      	bne.n	800210a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f841 	bl	8002182 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0201 	mvn.w	r2, #1
 8002108:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f003 0320 	and.w	r3, r3, #32
 8002110:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002118:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d015      	beq.n	800214c <HAL_ADC_IRQHandler+0x218>
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d012      	beq.n	800214c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f043 0202 	orr.w	r2, r3, #2
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f06f 0220 	mvn.w	r2, #32
 800213a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f82a 	bl	8002196 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f06f 0220 	mvn.w	r2, #32
 800214a:	601a      	str	r2, [r3, #0]
  }
}
 800214c:	bf00      	nop
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x1c>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e113      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x244>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b09      	cmp	r3, #9
 80021d6:	d925      	bls.n	8002224 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68d9      	ldr	r1, [r3, #12]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	4613      	mov	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	3b1e      	subs	r3, #30
 80021ee:	2207      	movs	r2, #7
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43da      	mvns	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	400a      	ands	r2, r1
 80021fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68d9      	ldr	r1, [r3, #12]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	b29b      	uxth	r3, r3
 800220e:	4618      	mov	r0, r3
 8002210:	4603      	mov	r3, r0
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4403      	add	r3, r0
 8002216:	3b1e      	subs	r3, #30
 8002218:	409a      	lsls	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	e022      	b.n	800226a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6919      	ldr	r1, [r3, #16]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	b29b      	uxth	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	4613      	mov	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	2207      	movs	r2, #7
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	400a      	ands	r2, r1
 8002246:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6919      	ldr	r1, [r3, #16]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	b29b      	uxth	r3, r3
 8002258:	4618      	mov	r0, r3
 800225a:	4603      	mov	r3, r0
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4403      	add	r3, r0
 8002260:	409a      	lsls	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b06      	cmp	r3, #6
 8002270:	d824      	bhi.n	80022bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	3b05      	subs	r3, #5
 8002284:	221f      	movs	r2, #31
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	400a      	ands	r2, r1
 8002292:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	4618      	mov	r0, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	3b05      	subs	r3, #5
 80022ae:	fa00 f203 	lsl.w	r2, r0, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	635a      	str	r2, [r3, #52]	; 0x34
 80022ba:	e04c      	b.n	8002356 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b0c      	cmp	r3, #12
 80022c2:	d824      	bhi.n	800230e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	3b23      	subs	r3, #35	; 0x23
 80022d6:	221f      	movs	r2, #31
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43da      	mvns	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	400a      	ands	r2, r1
 80022e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	3b23      	subs	r3, #35	; 0x23
 8002300:	fa00 f203 	lsl.w	r2, r0, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
 800230c:	e023      	b.n	8002356 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	3b41      	subs	r3, #65	; 0x41
 8002320:	221f      	movs	r2, #31
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43da      	mvns	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	400a      	ands	r2, r1
 800232e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	4618      	mov	r0, r3
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	3b41      	subs	r3, #65	; 0x41
 800234a:	fa00 f203 	lsl.w	r2, r0, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002356:	4b29      	ldr	r3, [pc, #164]	; (80023fc <HAL_ADC_ConfigChannel+0x250>)
 8002358:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a28      	ldr	r2, [pc, #160]	; (8002400 <HAL_ADC_ConfigChannel+0x254>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d10f      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1d8>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b12      	cmp	r3, #18
 800236a:	d10b      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a1d      	ldr	r2, [pc, #116]	; (8002400 <HAL_ADC_ConfigChannel+0x254>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d12b      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x23a>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <HAL_ADC_ConfigChannel+0x258>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d003      	beq.n	80023a0 <HAL_ADC_ConfigChannel+0x1f4>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b11      	cmp	r3, #17
 800239e:	d122      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a11      	ldr	r2, [pc, #68]	; (8002404 <HAL_ADC_ConfigChannel+0x258>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d111      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_ADC_ConfigChannel+0x25c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a11      	ldr	r2, [pc, #68]	; (800240c <HAL_ADC_ConfigChannel+0x260>)
 80023c8:	fba2 2303 	umull	r2, r3, r2, r3
 80023cc:	0c9a      	lsrs	r2, r3, #18
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023d8:	e002      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3b01      	subs	r3, #1
 80023de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f9      	bne.n	80023da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	40012300 	.word	0x40012300
 8002400:	40012000 	.word	0x40012000
 8002404:	10000012 	.word	0x10000012
 8002408:	20000000 	.word	0x20000000
 800240c:	431bde83 	.word	0x431bde83

08002410 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002418:	4b79      	ldr	r3, [pc, #484]	; (8002600 <ADC_Init+0x1f0>)
 800241a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	431a      	orrs	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6859      	ldr	r1, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	021a      	lsls	r2, r3, #8
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002468:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6859      	ldr	r1, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800248a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6899      	ldr	r1, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a2:	4a58      	ldr	r2, [pc, #352]	; (8002604 <ADC_Init+0x1f4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d022      	beq.n	80024ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6899      	ldr	r1, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6899      	ldr	r1, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	e00f      	b.n	800250e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800250c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0202 	bic.w	r2, r2, #2
 800251c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6899      	ldr	r1, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7e1b      	ldrb	r3, [r3, #24]
 8002528:	005a      	lsls	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01b      	beq.n	8002574 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800254a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800255a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6859      	ldr	r1, [r3, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	3b01      	subs	r3, #1
 8002568:	035a      	lsls	r2, r3, #13
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	e007      	b.n	8002584 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002582:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	3b01      	subs	r3, #1
 80025a0:	051a      	lsls	r2, r3, #20
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6899      	ldr	r1, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025c6:	025a      	lsls	r2, r3, #9
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6899      	ldr	r1, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	029a      	lsls	r2, r3, #10
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	609a      	str	r2, [r3, #8]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	40012300 	.word	0x40012300
 8002604:	0f000001 	.word	0x0f000001

08002608 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <__NVIC_SetPriorityGrouping+0x44>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002638:	4013      	ands	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800264c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264e:	4a04      	ldr	r2, [pc, #16]	; (8002660 <__NVIC_SetPriorityGrouping+0x44>)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	60d3      	str	r3, [r2, #12]
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <__NVIC_GetPriorityGrouping+0x18>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	0a1b      	lsrs	r3, r3, #8
 800266e:	f003 0307 	and.w	r3, r3, #7
}
 8002672:	4618      	mov	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	2b00      	cmp	r3, #0
 8002690:	db0b      	blt.n	80026aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	f003 021f 	and.w	r2, r3, #31
 8002698:	4907      	ldr	r1, [pc, #28]	; (80026b8 <__NVIC_EnableIRQ+0x38>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	2001      	movs	r0, #1
 80026a2:	fa00 f202 	lsl.w	r2, r0, r2
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000e100 	.word	0xe000e100

080026bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	db0a      	blt.n	80026e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	490c      	ldr	r1, [pc, #48]	; (8002708 <__NVIC_SetPriority+0x4c>)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	0112      	lsls	r2, r2, #4
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	440b      	add	r3, r1
 80026e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e4:	e00a      	b.n	80026fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	4908      	ldr	r1, [pc, #32]	; (800270c <__NVIC_SetPriority+0x50>)
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	3b04      	subs	r3, #4
 80026f4:	0112      	lsls	r2, r2, #4
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	440b      	add	r3, r1
 80026fa:	761a      	strb	r2, [r3, #24]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000e100 	.word	0xe000e100
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002710:	b480      	push	{r7}
 8002712:	b089      	sub	sp, #36	; 0x24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f1c3 0307 	rsb	r3, r3, #7
 800272a:	2b04      	cmp	r3, #4
 800272c:	bf28      	it	cs
 800272e:	2304      	movcs	r3, #4
 8002730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3304      	adds	r3, #4
 8002736:	2b06      	cmp	r3, #6
 8002738:	d902      	bls.n	8002740 <NVIC_EncodePriority+0x30>
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3b03      	subs	r3, #3
 800273e:	e000      	b.n	8002742 <NVIC_EncodePriority+0x32>
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002744:	f04f 32ff 	mov.w	r2, #4294967295
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43da      	mvns	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	401a      	ands	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002758:	f04f 31ff 	mov.w	r1, #4294967295
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	43d9      	mvns	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	4313      	orrs	r3, r2
         );
}
 800276a:	4618      	mov	r0, r3
 800276c:	3724      	adds	r7, #36	; 0x24
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3b01      	subs	r3, #1
 8002784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002788:	d301      	bcc.n	800278e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800278a:	2301      	movs	r3, #1
 800278c:	e00f      	b.n	80027ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800278e:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <SysTick_Config+0x40>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3b01      	subs	r3, #1
 8002794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002796:	210f      	movs	r1, #15
 8002798:	f04f 30ff 	mov.w	r0, #4294967295
 800279c:	f7ff ff8e 	bl	80026bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <SysTick_Config+0x40>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027a6:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <SysTick_Config+0x40>)
 80027a8:	2207      	movs	r2, #7
 80027aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	e000e010 	.word	0xe000e010

080027bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff ff29 	bl	800261c <__NVIC_SetPriorityGrouping>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b086      	sub	sp, #24
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	4603      	mov	r3, r0
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e4:	f7ff ff3e 	bl	8002664 <__NVIC_GetPriorityGrouping>
 80027e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	6978      	ldr	r0, [r7, #20]
 80027f0:	f7ff ff8e 	bl	8002710 <NVIC_EncodePriority>
 80027f4:	4602      	mov	r2, r0
 80027f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff5d 	bl	80026bc <__NVIC_SetPriority>
}
 8002802:	bf00      	nop
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	4603      	mov	r3, r0
 8002812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff31 	bl	8002680 <__NVIC_EnableIRQ>
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff ffa2 	bl	8002778 <SysTick_Config>
 8002834:	4603      	mov	r3, r0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002840:	b480      	push	{r7}
 8002842:	b089      	sub	sp, #36	; 0x24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	e159      	b.n	8002b10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800285c:	2201      	movs	r2, #1
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	429a      	cmp	r2, r3
 8002876:	f040 8148 	bne.w	8002b0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b01      	cmp	r3, #1
 8002884:	d005      	beq.n	8002892 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800288e:	2b02      	cmp	r3, #2
 8002890:	d130      	bne.n	80028f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	2203      	movs	r2, #3
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c8:	2201      	movs	r2, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 0201 	and.w	r2, r3, #1
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d017      	beq.n	8002930 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	2203      	movs	r2, #3
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d123      	bne.n	8002984 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	08da      	lsrs	r2, r3, #3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3208      	adds	r2, #8
 8002944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002948:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	220f      	movs	r2, #15
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	08da      	lsrs	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3208      	adds	r2, #8
 800297e:	69b9      	ldr	r1, [r7, #24]
 8002980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	2203      	movs	r2, #3
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0203 	and.w	r2, r3, #3
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80a2 	beq.w	8002b0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	4b57      	ldr	r3, [pc, #348]	; (8002b28 <HAL_GPIO_Init+0x2e8>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	4a56      	ldr	r2, [pc, #344]	; (8002b28 <HAL_GPIO_Init+0x2e8>)
 80029d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d4:	6453      	str	r3, [r2, #68]	; 0x44
 80029d6:	4b54      	ldr	r3, [pc, #336]	; (8002b28 <HAL_GPIO_Init+0x2e8>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029e2:	4a52      	ldr	r2, [pc, #328]	; (8002b2c <HAL_GPIO_Init+0x2ec>)
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	089b      	lsrs	r3, r3, #2
 80029e8:	3302      	adds	r3, #2
 80029ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	220f      	movs	r2, #15
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4013      	ands	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a49      	ldr	r2, [pc, #292]	; (8002b30 <HAL_GPIO_Init+0x2f0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d019      	beq.n	8002a42 <HAL_GPIO_Init+0x202>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a48      	ldr	r2, [pc, #288]	; (8002b34 <HAL_GPIO_Init+0x2f4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <HAL_GPIO_Init+0x1fe>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a47      	ldr	r2, [pc, #284]	; (8002b38 <HAL_GPIO_Init+0x2f8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00d      	beq.n	8002a3a <HAL_GPIO_Init+0x1fa>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a46      	ldr	r2, [pc, #280]	; (8002b3c <HAL_GPIO_Init+0x2fc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d007      	beq.n	8002a36 <HAL_GPIO_Init+0x1f6>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a45      	ldr	r2, [pc, #276]	; (8002b40 <HAL_GPIO_Init+0x300>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_GPIO_Init+0x1f2>
 8002a2e:	2304      	movs	r3, #4
 8002a30:	e008      	b.n	8002a44 <HAL_GPIO_Init+0x204>
 8002a32:	2307      	movs	r3, #7
 8002a34:	e006      	b.n	8002a44 <HAL_GPIO_Init+0x204>
 8002a36:	2303      	movs	r3, #3
 8002a38:	e004      	b.n	8002a44 <HAL_GPIO_Init+0x204>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e002      	b.n	8002a44 <HAL_GPIO_Init+0x204>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_GPIO_Init+0x204>
 8002a42:	2300      	movs	r3, #0
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	f002 0203 	and.w	r2, r2, #3
 8002a4a:	0092      	lsls	r2, r2, #2
 8002a4c:	4093      	lsls	r3, r2
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a54:	4935      	ldr	r1, [pc, #212]	; (8002b2c <HAL_GPIO_Init+0x2ec>)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a62:	4b38      	ldr	r3, [pc, #224]	; (8002b44 <HAL_GPIO_Init+0x304>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a86:	4a2f      	ldr	r2, [pc, #188]	; (8002b44 <HAL_GPIO_Init+0x304>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a8c:	4b2d      	ldr	r3, [pc, #180]	; (8002b44 <HAL_GPIO_Init+0x304>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab0:	4a24      	ldr	r2, [pc, #144]	; (8002b44 <HAL_GPIO_Init+0x304>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ab6:	4b23      	ldr	r3, [pc, #140]	; (8002b44 <HAL_GPIO_Init+0x304>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ada:	4a1a      	ldr	r2, [pc, #104]	; (8002b44 <HAL_GPIO_Init+0x304>)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae0:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <HAL_GPIO_Init+0x304>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b04:	4a0f      	ldr	r2, [pc, #60]	; (8002b44 <HAL_GPIO_Init+0x304>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b0f      	cmp	r3, #15
 8002b14:	f67f aea2 	bls.w	800285c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	3724      	adds	r7, #36	; 0x24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40013800 	.word	0x40013800
 8002b30:	40020000 	.word	0x40020000
 8002b34:	40020400 	.word	0x40020400
 8002b38:	40020800 	.word	0x40020800
 8002b3c:	40020c00 	.word	0x40020c00
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40013c00 	.word	0x40013c00

08002b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
 8002b54:	4613      	mov	r3, r2
 8002b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b58:	787b      	ldrb	r3, [r7, #1]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b64:	e003      	b.n	8002b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b66:	887b      	ldrh	r3, [r7, #2]
 8002b68:	041a      	lsls	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	619a      	str	r2, [r3, #24]
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	460b      	mov	r3, r1
 8002b84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b8c:	887a      	ldrh	r2, [r7, #2]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4013      	ands	r3, r2
 8002b92:	041a      	lsls	r2, r3, #16
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	43d9      	mvns	r1, r3
 8002b98:	887b      	ldrh	r3, [r7, #2]
 8002b9a:	400b      	ands	r3, r1
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	619a      	str	r2, [r3, #24]
}
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e267      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d075      	beq.n	8002cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bce:	4b88      	ldr	r3, [pc, #544]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bda:	4b85      	ldr	r3, [pc, #532]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d112      	bne.n	8002c0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be6:	4b82      	ldr	r3, [pc, #520]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf2:	d10b      	bne.n	8002c0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf4:	4b7e      	ldr	r3, [pc, #504]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d05b      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x108>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d157      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e242      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c14:	d106      	bne.n	8002c24 <HAL_RCC_OscConfig+0x74>
 8002c16:	4b76      	ldr	r3, [pc, #472]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a75      	ldr	r2, [pc, #468]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e01d      	b.n	8002c60 <HAL_RCC_OscConfig+0xb0>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x98>
 8002c2e:	4b70      	ldr	r3, [pc, #448]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a6f      	ldr	r2, [pc, #444]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b6d      	ldr	r3, [pc, #436]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a6c      	ldr	r2, [pc, #432]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e00b      	b.n	8002c60 <HAL_RCC_OscConfig+0xb0>
 8002c48:	4b69      	ldr	r3, [pc, #420]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a68      	ldr	r2, [pc, #416]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b66      	ldr	r3, [pc, #408]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a65      	ldr	r2, [pc, #404]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d013      	beq.n	8002c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7ff f83c 	bl	8001ce4 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c70:	f7ff f838 	bl	8001ce4 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e207      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	4b5b      	ldr	r3, [pc, #364]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0xc0>
 8002c8e:	e014      	b.n	8002cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7ff f828 	bl	8001ce4 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c98:	f7ff f824 	bl	8001ce4 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e1f3      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	4b51      	ldr	r3, [pc, #324]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0xe8>
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d063      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cc6:	4b4a      	ldr	r3, [pc, #296]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd2:	4b47      	ldr	r3, [pc, #284]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d11c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cde:	4b44      	ldr	r3, [pc, #272]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d116      	bne.n	8002d18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cea:	4b41      	ldr	r3, [pc, #260]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x152>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e1c7      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d02:	4b3b      	ldr	r3, [pc, #236]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4937      	ldr	r1, [pc, #220]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d16:	e03a      	b.n	8002d8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d020      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d20:	4b34      	ldr	r3, [pc, #208]	; (8002df4 <HAL_RCC_OscConfig+0x244>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7fe ffdd 	bl	8001ce4 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7fe ffd9 	bl	8001ce4 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e1a8      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d40:	4b2b      	ldr	r3, [pc, #172]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4c:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4925      	ldr	r1, [pc, #148]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]
 8002d60:	e015      	b.n	8002d8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d62:	4b24      	ldr	r3, [pc, #144]	; (8002df4 <HAL_RCC_OscConfig+0x244>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe ffbc 	bl	8001ce4 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d70:	f7fe ffb8 	bl	8001ce4 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e187      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d82:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d036      	beq.n	8002e08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d016      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da2:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <HAL_RCC_OscConfig+0x248>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7fe ff9c 	bl	8001ce4 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db0:	f7fe ff98 	bl	8001ce4 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e167      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x200>
 8002dce:	e01b      	b.n	8002e08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_RCC_OscConfig+0x248>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd6:	f7fe ff85 	bl	8001ce4 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ddc:	e00e      	b.n	8002dfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dde:	f7fe ff81 	bl	8001ce4 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d907      	bls.n	8002dfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e150      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
 8002df0:	40023800 	.word	0x40023800
 8002df4:	42470000 	.word	0x42470000
 8002df8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	4b88      	ldr	r3, [pc, #544]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1ea      	bne.n	8002dde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8097 	beq.w	8002f44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1a:	4b81      	ldr	r3, [pc, #516]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10f      	bne.n	8002e46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	4b7d      	ldr	r3, [pc, #500]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	4a7c      	ldr	r2, [pc, #496]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e34:	6413      	str	r3, [r2, #64]	; 0x40
 8002e36:	4b7a      	ldr	r3, [pc, #488]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e46:	4b77      	ldr	r3, [pc, #476]	; (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d118      	bne.n	8002e84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e52:	4b74      	ldr	r3, [pc, #464]	; (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a73      	ldr	r2, [pc, #460]	; (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5e:	f7fe ff41 	bl	8001ce4 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e66:	f7fe ff3d 	bl	8001ce4 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e10c      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCC_OscConfig+0x2ea>
 8002e8c:	4b64      	ldr	r3, [pc, #400]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	4a63      	ldr	r2, [pc, #396]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6713      	str	r3, [r2, #112]	; 0x70
 8002e98:	e01c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x324>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b05      	cmp	r3, #5
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x30c>
 8002ea2:	4b5f      	ldr	r3, [pc, #380]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	4a5e      	ldr	r2, [pc, #376]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	6713      	str	r3, [r2, #112]	; 0x70
 8002eae:	4b5c      	ldr	r3, [pc, #368]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	4a5b      	ldr	r2, [pc, #364]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0x324>
 8002ebc:	4b58      	ldr	r3, [pc, #352]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	4a57      	ldr	r2, [pc, #348]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec8:	4b55      	ldr	r3, [pc, #340]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	4a54      	ldr	r2, [pc, #336]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ece:	f023 0304 	bic.w	r3, r3, #4
 8002ed2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d015      	beq.n	8002f08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fe ff02 	bl	8001ce4 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee2:	e00a      	b.n	8002efa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee4:	f7fe fefe 	bl	8001ce4 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e0cb      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efa:	4b49      	ldr	r3, [pc, #292]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0ee      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x334>
 8002f06:	e014      	b.n	8002f32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f08:	f7fe feec 	bl	8001ce4 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f10:	f7fe fee8 	bl	8001ce4 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e0b5      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f26:	4b3e      	ldr	r3, [pc, #248]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1ee      	bne.n	8002f10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d105      	bne.n	8002f44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f38:	4b39      	ldr	r3, [pc, #228]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	4a38      	ldr	r2, [pc, #224]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80a1 	beq.w	8003090 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f4e:	4b34      	ldr	r3, [pc, #208]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d05c      	beq.n	8003014 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d141      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f62:	4b31      	ldr	r3, [pc, #196]	; (8003028 <HAL_RCC_OscConfig+0x478>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fe febc 	bl	8001ce4 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fe feb8 	bl	8001ce4 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e087      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f82:	4b27      	ldr	r3, [pc, #156]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69da      	ldr	r2, [r3, #28]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	019b      	lsls	r3, r3, #6
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	085b      	lsrs	r3, r3, #1
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	041b      	lsls	r3, r3, #16
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	061b      	lsls	r3, r3, #24
 8002fb2:	491b      	ldr	r1, [pc, #108]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <HAL_RCC_OscConfig+0x478>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7fe fe91 	bl	8001ce4 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc6:	f7fe fe8d 	bl	8001ce4 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e05c      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x416>
 8002fe4:	e054      	b.n	8003090 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <HAL_RCC_OscConfig+0x478>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fe fe7a 	bl	8001ce4 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7fe fe76 	bl	8001ce4 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e045      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x444>
 8003012:	e03d      	b.n	8003090 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d107      	bne.n	800302c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e038      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
 8003020:	40023800 	.word	0x40023800
 8003024:	40007000 	.word	0x40007000
 8003028:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800302c:	4b1b      	ldr	r3, [pc, #108]	; (800309c <HAL_RCC_OscConfig+0x4ec>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d028      	beq.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d121      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	429a      	cmp	r2, r3
 8003054:	d11a      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800305c:	4013      	ands	r3, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003062:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003064:	4293      	cmp	r3, r2
 8003066:	d111      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	3b01      	subs	r3, #1
 8003076:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d107      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800

080030a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0cc      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b4:	4b68      	ldr	r3, [pc, #416]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d90c      	bls.n	80030dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b65      	ldr	r3, [pc, #404]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b63      	ldr	r3, [pc, #396]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0b8      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f4:	4b59      	ldr	r3, [pc, #356]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4a58      	ldr	r2, [pc, #352]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800310c:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a52      	ldr	r2, [pc, #328]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003118:	4b50      	ldr	r3, [pc, #320]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	494d      	ldr	r1, [pc, #308]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d044      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4b47      	ldr	r3, [pc, #284]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d119      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e07f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d003      	beq.n	800315e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800315a:	2b03      	cmp	r3, #3
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315e:	4b3f      	ldr	r3, [pc, #252]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e06f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316e:	4b3b      	ldr	r3, [pc, #236]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e067      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317e:	4b37      	ldr	r3, [pc, #220]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f023 0203 	bic.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4934      	ldr	r1, [pc, #208]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	4313      	orrs	r3, r2
 800318e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003190:	f7fe fda8 	bl	8001ce4 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	e00a      	b.n	80031ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003198:	f7fe fda4 	bl	8001ce4 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e04f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	4b2b      	ldr	r3, [pc, #172]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 020c 	and.w	r2, r3, #12
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	429a      	cmp	r2, r3
 80031be:	d1eb      	bne.n	8003198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c0:	4b25      	ldr	r3, [pc, #148]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d20c      	bcs.n	80031e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b22      	ldr	r3, [pc, #136]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e032      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f4:	4b19      	ldr	r3, [pc, #100]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4916      	ldr	r1, [pc, #88]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003212:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	490e      	ldr	r1, [pc, #56]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003226:	f000 f821 	bl	800326c <HAL_RCC_GetSysClockFreq>
 800322a:	4602      	mov	r2, r0
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	490a      	ldr	r1, [pc, #40]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 8003238:	5ccb      	ldrb	r3, [r1, r3]
 800323a:	fa22 f303 	lsr.w	r3, r2, r3
 800323e:	4a09      	ldr	r2, [pc, #36]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe fd08 	bl	8001c5c <HAL_InitTick>

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023c00 	.word	0x40023c00
 800325c:	40023800 	.word	0x40023800
 8003260:	08005990 	.word	0x08005990
 8003264:	20000000 	.word	0x20000000
 8003268:	20000004 	.word	0x20000004

0800326c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800326c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003270:	b090      	sub	sp, #64	; 0x40
 8003272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	637b      	str	r3, [r7, #52]	; 0x34
 8003278:	2300      	movs	r3, #0
 800327a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800327c:	2300      	movs	r3, #0
 800327e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003284:	4b59      	ldr	r3, [pc, #356]	; (80033ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b08      	cmp	r3, #8
 800328e:	d00d      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x40>
 8003290:	2b08      	cmp	r3, #8
 8003292:	f200 80a1 	bhi.w	80033d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x34>
 800329a:	2b04      	cmp	r3, #4
 800329c:	d003      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800329e:	e09b      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032a0:	4b53      	ldr	r3, [pc, #332]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80032a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80032a4:	e09b      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032a6:	4b53      	ldr	r3, [pc, #332]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80032a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032aa:	e098      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032ac:	4b4f      	ldr	r3, [pc, #316]	; (80033ec <HAL_RCC_GetSysClockFreq+0x180>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032b6:	4b4d      	ldr	r3, [pc, #308]	; (80033ec <HAL_RCC_GetSysClockFreq+0x180>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d028      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c2:	4b4a      	ldr	r3, [pc, #296]	; (80033ec <HAL_RCC_GetSysClockFreq+0x180>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	099b      	lsrs	r3, r3, #6
 80032c8:	2200      	movs	r2, #0
 80032ca:	623b      	str	r3, [r7, #32]
 80032cc:	627a      	str	r2, [r7, #36]	; 0x24
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032d4:	2100      	movs	r1, #0
 80032d6:	4b47      	ldr	r3, [pc, #284]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80032d8:	fb03 f201 	mul.w	r2, r3, r1
 80032dc:	2300      	movs	r3, #0
 80032de:	fb00 f303 	mul.w	r3, r0, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	4a43      	ldr	r2, [pc, #268]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80032e6:	fba0 1202 	umull	r1, r2, r0, r2
 80032ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032ec:	460a      	mov	r2, r1
 80032ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80032f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032f2:	4413      	add	r3, r2
 80032f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f8:	2200      	movs	r2, #0
 80032fa:	61bb      	str	r3, [r7, #24]
 80032fc:	61fa      	str	r2, [r7, #28]
 80032fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003302:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003306:	f7fd fc6b 	bl	8000be0 <__aeabi_uldivmod>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4613      	mov	r3, r2
 8003310:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003312:	e053      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003314:	4b35      	ldr	r3, [pc, #212]	; (80033ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	099b      	lsrs	r3, r3, #6
 800331a:	2200      	movs	r2, #0
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	617a      	str	r2, [r7, #20]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003326:	f04f 0b00 	mov.w	fp, #0
 800332a:	4652      	mov	r2, sl
 800332c:	465b      	mov	r3, fp
 800332e:	f04f 0000 	mov.w	r0, #0
 8003332:	f04f 0100 	mov.w	r1, #0
 8003336:	0159      	lsls	r1, r3, #5
 8003338:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800333c:	0150      	lsls	r0, r2, #5
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	ebb2 080a 	subs.w	r8, r2, sl
 8003346:	eb63 090b 	sbc.w	r9, r3, fp
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003356:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800335a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800335e:	ebb2 0408 	subs.w	r4, r2, r8
 8003362:	eb63 0509 	sbc.w	r5, r3, r9
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	00eb      	lsls	r3, r5, #3
 8003370:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003374:	00e2      	lsls	r2, r4, #3
 8003376:	4614      	mov	r4, r2
 8003378:	461d      	mov	r5, r3
 800337a:	eb14 030a 	adds.w	r3, r4, sl
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	eb45 030b 	adc.w	r3, r5, fp
 8003384:	607b      	str	r3, [r7, #4]
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003392:	4629      	mov	r1, r5
 8003394:	028b      	lsls	r3, r1, #10
 8003396:	4621      	mov	r1, r4
 8003398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800339c:	4621      	mov	r1, r4
 800339e:	028a      	lsls	r2, r1, #10
 80033a0:	4610      	mov	r0, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a6:	2200      	movs	r2, #0
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	60fa      	str	r2, [r7, #12]
 80033ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033b0:	f7fd fc16 	bl	8000be0 <__aeabi_uldivmod>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4613      	mov	r3, r2
 80033ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_RCC_GetSysClockFreq+0x180>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	0c1b      	lsrs	r3, r3, #16
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	3301      	adds	r3, #1
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80033cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033d6:	e002      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80033da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3740      	adds	r7, #64	; 0x40
 80033e4:	46bd      	mov	sp, r7
 80033e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	00f42400 	.word	0x00f42400
 80033f4:	017d7840 	.word	0x017d7840

080033f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033fc:	4b03      	ldr	r3, [pc, #12]	; (800340c <HAL_RCC_GetHCLKFreq+0x14>)
 80033fe:	681b      	ldr	r3, [r3, #0]
}
 8003400:	4618      	mov	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000000 	.word	0x20000000

08003410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003414:	f7ff fff0 	bl	80033f8 <HAL_RCC_GetHCLKFreq>
 8003418:	4602      	mov	r2, r0
 800341a:	4b05      	ldr	r3, [pc, #20]	; (8003430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	0a9b      	lsrs	r3, r3, #10
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	4903      	ldr	r1, [pc, #12]	; (8003434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003426:	5ccb      	ldrb	r3, [r1, r3]
 8003428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800342c:	4618      	mov	r0, r3
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40023800 	.word	0x40023800
 8003434:	080059a0 	.word	0x080059a0

08003438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800343c:	f7ff ffdc 	bl	80033f8 <HAL_RCC_GetHCLKFreq>
 8003440:	4602      	mov	r2, r0
 8003442:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	0b5b      	lsrs	r3, r3, #13
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	4903      	ldr	r1, [pc, #12]	; (800345c <HAL_RCC_GetPCLK2Freq+0x24>)
 800344e:	5ccb      	ldrb	r3, [r1, r3]
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40023800 	.word	0x40023800
 800345c:	080059a0 	.word	0x080059a0

08003460 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e07b      	b.n	800356a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2b00      	cmp	r3, #0
 8003478:	d108      	bne.n	800348c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003482:	d009      	beq.n	8003498 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	61da      	str	r2, [r3, #28]
 800348a:	e005      	b.n	8003498 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fe fa60 	bl	8001978 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351c:	ea42 0103 	orr.w	r1, r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	f003 0104 	and.w	r1, r3, #4
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	f003 0210 	and.w	r2, r3, #16
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69da      	ldr	r2, [r3, #28]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003558:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e041      	b.n	8003608 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d106      	bne.n	800359e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7fe fa55 	bl	8001a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2202      	movs	r2, #2
 80035a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3304      	adds	r3, #4
 80035ae:	4619      	mov	r1, r3
 80035b0:	4610      	mov	r0, r2
 80035b2:	f000 fa87 	bl	8003ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b01      	cmp	r3, #1
 8003622:	d001      	beq.n	8003628 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e044      	b.n	80036b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1e      	ldr	r2, [pc, #120]	; (80036c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d018      	beq.n	800367c <HAL_TIM_Base_Start_IT+0x6c>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003652:	d013      	beq.n	800367c <HAL_TIM_Base_Start_IT+0x6c>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1a      	ldr	r2, [pc, #104]	; (80036c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00e      	beq.n	800367c <HAL_TIM_Base_Start_IT+0x6c>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a19      	ldr	r2, [pc, #100]	; (80036c8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d009      	beq.n	800367c <HAL_TIM_Base_Start_IT+0x6c>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a17      	ldr	r2, [pc, #92]	; (80036cc <HAL_TIM_Base_Start_IT+0xbc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d004      	beq.n	800367c <HAL_TIM_Base_Start_IT+0x6c>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a16      	ldr	r2, [pc, #88]	; (80036d0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d111      	bne.n	80036a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b06      	cmp	r3, #6
 800368c:	d010      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0201 	orr.w	r2, r2, #1
 800369c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800369e:	e007      	b.n	80036b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40010000 	.word	0x40010000
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40000800 	.word	0x40000800
 80036cc:	40000c00 	.word	0x40000c00
 80036d0:	40014000 	.word	0x40014000

080036d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d122      	bne.n	8003730 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d11b      	bne.n	8003730 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0202 	mvn.w	r2, #2
 8003700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f9b5 	bl	8003a86 <HAL_TIM_IC_CaptureCallback>
 800371c:	e005      	b.n	800372a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f9a7 	bl	8003a72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f9b8 	bl	8003a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b04      	cmp	r3, #4
 800373c:	d122      	bne.n	8003784 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b04      	cmp	r3, #4
 800374a:	d11b      	bne.n	8003784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0204 	mvn.w	r2, #4
 8003754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2202      	movs	r2, #2
 800375a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f98b 	bl	8003a86 <HAL_TIM_IC_CaptureCallback>
 8003770:	e005      	b.n	800377e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f97d 	bl	8003a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f98e 	bl	8003a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b08      	cmp	r3, #8
 8003790:	d122      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b08      	cmp	r3, #8
 800379e:	d11b      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0208 	mvn.w	r2, #8
 80037a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2204      	movs	r2, #4
 80037ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f961 	bl	8003a86 <HAL_TIM_IC_CaptureCallback>
 80037c4:	e005      	b.n	80037d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f953 	bl	8003a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f964 	bl	8003a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0310 	and.w	r3, r3, #16
 80037e2:	2b10      	cmp	r3, #16
 80037e4:	d122      	bne.n	800382c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d11b      	bne.n	800382c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0210 	mvn.w	r2, #16
 80037fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2208      	movs	r2, #8
 8003802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f937 	bl	8003a86 <HAL_TIM_IC_CaptureCallback>
 8003818:	e005      	b.n	8003826 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f929 	bl	8003a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f93a 	bl	8003a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b01      	cmp	r3, #1
 8003838:	d10e      	bne.n	8003858 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b01      	cmp	r3, #1
 8003846:	d107      	bne.n	8003858 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0201 	mvn.w	r2, #1
 8003850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fd ffd8 	bl	8001808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003862:	2b80      	cmp	r3, #128	; 0x80
 8003864:	d10e      	bne.n	8003884 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003870:	2b80      	cmp	r3, #128	; 0x80
 8003872:	d107      	bne.n	8003884 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800387c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fab2 	bl	8003de8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388e:	2b40      	cmp	r3, #64	; 0x40
 8003890:	d10e      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389c:	2b40      	cmp	r3, #64	; 0x40
 800389e:	d107      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f8ff 	bl	8003aae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d10e      	bne.n	80038dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d107      	bne.n	80038dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0220 	mvn.w	r2, #32
 80038d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fa7c 	bl	8003dd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_TIM_ConfigClockSource+0x1c>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e0b4      	b.n	8003a6a <HAL_TIM_ConfigClockSource+0x186>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800391e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003926:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003938:	d03e      	beq.n	80039b8 <HAL_TIM_ConfigClockSource+0xd4>
 800393a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800393e:	f200 8087 	bhi.w	8003a50 <HAL_TIM_ConfigClockSource+0x16c>
 8003942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003946:	f000 8086 	beq.w	8003a56 <HAL_TIM_ConfigClockSource+0x172>
 800394a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800394e:	d87f      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x16c>
 8003950:	2b70      	cmp	r3, #112	; 0x70
 8003952:	d01a      	beq.n	800398a <HAL_TIM_ConfigClockSource+0xa6>
 8003954:	2b70      	cmp	r3, #112	; 0x70
 8003956:	d87b      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x16c>
 8003958:	2b60      	cmp	r3, #96	; 0x60
 800395a:	d050      	beq.n	80039fe <HAL_TIM_ConfigClockSource+0x11a>
 800395c:	2b60      	cmp	r3, #96	; 0x60
 800395e:	d877      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x16c>
 8003960:	2b50      	cmp	r3, #80	; 0x50
 8003962:	d03c      	beq.n	80039de <HAL_TIM_ConfigClockSource+0xfa>
 8003964:	2b50      	cmp	r3, #80	; 0x50
 8003966:	d873      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x16c>
 8003968:	2b40      	cmp	r3, #64	; 0x40
 800396a:	d058      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0x13a>
 800396c:	2b40      	cmp	r3, #64	; 0x40
 800396e:	d86f      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x16c>
 8003970:	2b30      	cmp	r3, #48	; 0x30
 8003972:	d064      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x15a>
 8003974:	2b30      	cmp	r3, #48	; 0x30
 8003976:	d86b      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x16c>
 8003978:	2b20      	cmp	r3, #32
 800397a:	d060      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x15a>
 800397c:	2b20      	cmp	r3, #32
 800397e:	d867      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x16c>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d05c      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x15a>
 8003984:	2b10      	cmp	r3, #16
 8003986:	d05a      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x15a>
 8003988:	e062      	b.n	8003a50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6899      	ldr	r1, [r3, #8]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f000 f98d 	bl	8003cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	609a      	str	r2, [r3, #8]
      break;
 80039b6:	e04f      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	6899      	ldr	r1, [r3, #8]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f000 f976 	bl	8003cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039da:	609a      	str	r2, [r3, #8]
      break;
 80039dc:	e03c      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6859      	ldr	r1, [r3, #4]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	461a      	mov	r2, r3
 80039ec:	f000 f8ea 	bl	8003bc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2150      	movs	r1, #80	; 0x50
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 f943 	bl	8003c82 <TIM_ITRx_SetConfig>
      break;
 80039fc:	e02c      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6859      	ldr	r1, [r3, #4]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f000 f909 	bl	8003c22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2160      	movs	r1, #96	; 0x60
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 f933 	bl	8003c82 <TIM_ITRx_SetConfig>
      break;
 8003a1c:	e01c      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6859      	ldr	r1, [r3, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f000 f8ca 	bl	8003bc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2140      	movs	r1, #64	; 0x40
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f923 	bl	8003c82 <TIM_ITRx_SetConfig>
      break;
 8003a3c:	e00c      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4619      	mov	r1, r3
 8003a48:	4610      	mov	r0, r2
 8003a4a:	f000 f91a 	bl	8003c82 <TIM_ITRx_SetConfig>
      break;
 8003a4e:	e003      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
      break;
 8003a54:	e000      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a34      	ldr	r2, [pc, #208]	; (8003ba8 <TIM_Base_SetConfig+0xe4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00f      	beq.n	8003afc <TIM_Base_SetConfig+0x38>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae2:	d00b      	beq.n	8003afc <TIM_Base_SetConfig+0x38>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a31      	ldr	r2, [pc, #196]	; (8003bac <TIM_Base_SetConfig+0xe8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d007      	beq.n	8003afc <TIM_Base_SetConfig+0x38>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a30      	ldr	r2, [pc, #192]	; (8003bb0 <TIM_Base_SetConfig+0xec>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d003      	beq.n	8003afc <TIM_Base_SetConfig+0x38>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a2f      	ldr	r2, [pc, #188]	; (8003bb4 <TIM_Base_SetConfig+0xf0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d108      	bne.n	8003b0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a25      	ldr	r2, [pc, #148]	; (8003ba8 <TIM_Base_SetConfig+0xe4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01b      	beq.n	8003b4e <TIM_Base_SetConfig+0x8a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1c:	d017      	beq.n	8003b4e <TIM_Base_SetConfig+0x8a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a22      	ldr	r2, [pc, #136]	; (8003bac <TIM_Base_SetConfig+0xe8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d013      	beq.n	8003b4e <TIM_Base_SetConfig+0x8a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a21      	ldr	r2, [pc, #132]	; (8003bb0 <TIM_Base_SetConfig+0xec>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00f      	beq.n	8003b4e <TIM_Base_SetConfig+0x8a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a20      	ldr	r2, [pc, #128]	; (8003bb4 <TIM_Base_SetConfig+0xf0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00b      	beq.n	8003b4e <TIM_Base_SetConfig+0x8a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a1f      	ldr	r2, [pc, #124]	; (8003bb8 <TIM_Base_SetConfig+0xf4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d007      	beq.n	8003b4e <TIM_Base_SetConfig+0x8a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a1e      	ldr	r2, [pc, #120]	; (8003bbc <TIM_Base_SetConfig+0xf8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d003      	beq.n	8003b4e <TIM_Base_SetConfig+0x8a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a1d      	ldr	r2, [pc, #116]	; (8003bc0 <TIM_Base_SetConfig+0xfc>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d108      	bne.n	8003b60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a08      	ldr	r2, [pc, #32]	; (8003ba8 <TIM_Base_SetConfig+0xe4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d103      	bne.n	8003b94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	615a      	str	r2, [r3, #20]
}
 8003b9a:	bf00      	nop
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40010000 	.word	0x40010000
 8003bac:	40000400 	.word	0x40000400
 8003bb0:	40000800 	.word	0x40000800
 8003bb4:	40000c00 	.word	0x40000c00
 8003bb8:	40014000 	.word	0x40014000
 8003bbc:	40014400 	.word	0x40014400
 8003bc0:	40014800 	.word	0x40014800

08003bc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	f023 0201 	bic.w	r2, r3, #1
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f023 030a 	bic.w	r3, r3, #10
 8003c00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	621a      	str	r2, [r3, #32]
}
 8003c16:	bf00      	nop
 8003c18:	371c      	adds	r7, #28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b087      	sub	sp, #28
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	f023 0210 	bic.w	r2, r3, #16
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	031b      	lsls	r3, r3, #12
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	621a      	str	r2, [r3, #32]
}
 8003c76:	bf00      	nop
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b085      	sub	sp, #20
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f043 0307 	orr.w	r3, r3, #7
 8003ca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	609a      	str	r2, [r3, #8]
}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	021a      	lsls	r2, r3, #8
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	609a      	str	r2, [r3, #8]
}
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e050      	b.n	8003db2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1c      	ldr	r2, [pc, #112]	; (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d018      	beq.n	8003d86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5c:	d013      	beq.n	8003d86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a18      	ldr	r2, [pc, #96]	; (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00e      	beq.n	8003d86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a16      	ldr	r2, [pc, #88]	; (8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d009      	beq.n	8003d86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a15      	ldr	r2, [pc, #84]	; (8003dcc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d004      	beq.n	8003d86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d10c      	bne.n	8003da0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40010000 	.word	0x40010000
 8003dc4:	40000400 	.word	0x40000400
 8003dc8:	40000800 	.word	0x40000800
 8003dcc:	40000c00 	.word	0x40000c00
 8003dd0:	40014000 	.word	0x40014000

08003dd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e03f      	b.n	8003e8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fd fe36 	bl	8001a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2224      	movs	r2, #36	; 0x24
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f929 	bl	8004098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695a      	ldr	r2, [r3, #20]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b08a      	sub	sp, #40	; 0x28
 8003e9a:	af02      	add	r7, sp, #8
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	d17c      	bne.n	8003fb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_UART_Transmit+0x2c>
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e075      	b.n	8003fb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_UART_Transmit+0x3e>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e06e      	b.n	8003fb2 <HAL_UART_Transmit+0x11c>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2221      	movs	r2, #33	; 0x21
 8003ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eea:	f7fd fefb 	bl	8001ce4 <HAL_GetTick>
 8003eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	88fa      	ldrh	r2, [r7, #6]
 8003ef4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	88fa      	ldrh	r2, [r7, #6]
 8003efa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f04:	d108      	bne.n	8003f18 <HAL_UART_Transmit+0x82>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d104      	bne.n	8003f18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	e003      	b.n	8003f20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f28:	e02a      	b.n	8003f80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2200      	movs	r2, #0
 8003f32:	2180      	movs	r1, #128	; 0x80
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f840 	bl	8003fba <UART_WaitOnFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e036      	b.n	8003fb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10b      	bne.n	8003f62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	3302      	adds	r3, #2
 8003f5e:	61bb      	str	r3, [r7, #24]
 8003f60:	e007      	b.n	8003f72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	781a      	ldrb	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1cf      	bne.n	8003f2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2200      	movs	r2, #0
 8003f92:	2140      	movs	r1, #64	; 0x40
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f810 	bl	8003fba <UART_WaitOnFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e006      	b.n	8003fb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	e000      	b.n	8003fb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003fb0:	2302      	movs	r3, #2
  }
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3720      	adds	r7, #32
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b090      	sub	sp, #64	; 0x40
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fca:	e050      	b.n	800406e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd2:	d04c      	beq.n	800406e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0x30>
 8003fda:	f7fd fe83 	bl	8001ce4 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d241      	bcs.n	800406e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	330c      	adds	r3, #12
 8003ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004000:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	330c      	adds	r3, #12
 8004008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800400a:	637a      	str	r2, [r7, #52]	; 0x34
 800400c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e5      	bne.n	8003fea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3314      	adds	r3, #20
 8004024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	613b      	str	r3, [r7, #16]
   return(result);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	63bb      	str	r3, [r7, #56]	; 0x38
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3314      	adds	r3, #20
 800403c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800403e:	623a      	str	r2, [r7, #32]
 8004040:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	69f9      	ldr	r1, [r7, #28]
 8004044:	6a3a      	ldr	r2, [r7, #32]
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	61bb      	str	r3, [r7, #24]
   return(result);
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e5      	bne.n	800401e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e00f      	b.n	800408e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4013      	ands	r3, r2
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	429a      	cmp	r2, r3
 800407c:	bf0c      	ite	eq
 800407e:	2301      	moveq	r3, #1
 8004080:	2300      	movne	r3, #0
 8004082:	b2db      	uxtb	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	79fb      	ldrb	r3, [r7, #7]
 8004088:	429a      	cmp	r2, r3
 800408a:	d09f      	beq.n	8003fcc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3740      	adds	r7, #64	; 0x40
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800409c:	b0c0      	sub	sp, #256	; 0x100
 800409e:	af00      	add	r7, sp, #0
 80040a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b4:	68d9      	ldr	r1, [r3, #12]
 80040b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	ea40 0301 	orr.w	r3, r0, r1
 80040c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040f0:	f021 010c 	bic.w	r1, r1, #12
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040fe:	430b      	orrs	r3, r1
 8004100:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800410e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004112:	6999      	ldr	r1, [r3, #24]
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	ea40 0301 	orr.w	r3, r0, r1
 800411e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	4b8f      	ldr	r3, [pc, #572]	; (8004364 <UART_SetConfig+0x2cc>)
 8004128:	429a      	cmp	r2, r3
 800412a:	d005      	beq.n	8004138 <UART_SetConfig+0xa0>
 800412c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4b8d      	ldr	r3, [pc, #564]	; (8004368 <UART_SetConfig+0x2d0>)
 8004134:	429a      	cmp	r2, r3
 8004136:	d104      	bne.n	8004142 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004138:	f7ff f97e 	bl	8003438 <HAL_RCC_GetPCLK2Freq>
 800413c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004140:	e003      	b.n	800414a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004142:	f7ff f965 	bl	8003410 <HAL_RCC_GetPCLK1Freq>
 8004146:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800414a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004154:	f040 810c 	bne.w	8004370 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800415c:	2200      	movs	r2, #0
 800415e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004162:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004166:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800416a:	4622      	mov	r2, r4
 800416c:	462b      	mov	r3, r5
 800416e:	1891      	adds	r1, r2, r2
 8004170:	65b9      	str	r1, [r7, #88]	; 0x58
 8004172:	415b      	adcs	r3, r3
 8004174:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004176:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800417a:	4621      	mov	r1, r4
 800417c:	eb12 0801 	adds.w	r8, r2, r1
 8004180:	4629      	mov	r1, r5
 8004182:	eb43 0901 	adc.w	r9, r3, r1
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800419a:	4690      	mov	r8, r2
 800419c:	4699      	mov	r9, r3
 800419e:	4623      	mov	r3, r4
 80041a0:	eb18 0303 	adds.w	r3, r8, r3
 80041a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041a8:	462b      	mov	r3, r5
 80041aa:	eb49 0303 	adc.w	r3, r9, r3
 80041ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041c6:	460b      	mov	r3, r1
 80041c8:	18db      	adds	r3, r3, r3
 80041ca:	653b      	str	r3, [r7, #80]	; 0x50
 80041cc:	4613      	mov	r3, r2
 80041ce:	eb42 0303 	adc.w	r3, r2, r3
 80041d2:	657b      	str	r3, [r7, #84]	; 0x54
 80041d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80041dc:	f7fc fd00 	bl	8000be0 <__aeabi_uldivmod>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4b61      	ldr	r3, [pc, #388]	; (800436c <UART_SetConfig+0x2d4>)
 80041e6:	fba3 2302 	umull	r2, r3, r3, r2
 80041ea:	095b      	lsrs	r3, r3, #5
 80041ec:	011c      	lsls	r4, r3, #4
 80041ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004200:	4642      	mov	r2, r8
 8004202:	464b      	mov	r3, r9
 8004204:	1891      	adds	r1, r2, r2
 8004206:	64b9      	str	r1, [r7, #72]	; 0x48
 8004208:	415b      	adcs	r3, r3
 800420a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800420c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004210:	4641      	mov	r1, r8
 8004212:	eb12 0a01 	adds.w	sl, r2, r1
 8004216:	4649      	mov	r1, r9
 8004218:	eb43 0b01 	adc.w	fp, r3, r1
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004228:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800422c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004230:	4692      	mov	sl, r2
 8004232:	469b      	mov	fp, r3
 8004234:	4643      	mov	r3, r8
 8004236:	eb1a 0303 	adds.w	r3, sl, r3
 800423a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800423e:	464b      	mov	r3, r9
 8004240:	eb4b 0303 	adc.w	r3, fp, r3
 8004244:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004254:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004258:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800425c:	460b      	mov	r3, r1
 800425e:	18db      	adds	r3, r3, r3
 8004260:	643b      	str	r3, [r7, #64]	; 0x40
 8004262:	4613      	mov	r3, r2
 8004264:	eb42 0303 	adc.w	r3, r2, r3
 8004268:	647b      	str	r3, [r7, #68]	; 0x44
 800426a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800426e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004272:	f7fc fcb5 	bl	8000be0 <__aeabi_uldivmod>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4611      	mov	r1, r2
 800427c:	4b3b      	ldr	r3, [pc, #236]	; (800436c <UART_SetConfig+0x2d4>)
 800427e:	fba3 2301 	umull	r2, r3, r3, r1
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	2264      	movs	r2, #100	; 0x64
 8004286:	fb02 f303 	mul.w	r3, r2, r3
 800428a:	1acb      	subs	r3, r1, r3
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004292:	4b36      	ldr	r3, [pc, #216]	; (800436c <UART_SetConfig+0x2d4>)
 8004294:	fba3 2302 	umull	r2, r3, r3, r2
 8004298:	095b      	lsrs	r3, r3, #5
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042a0:	441c      	add	r4, r3
 80042a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042b4:	4642      	mov	r2, r8
 80042b6:	464b      	mov	r3, r9
 80042b8:	1891      	adds	r1, r2, r2
 80042ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80042bc:	415b      	adcs	r3, r3
 80042be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042c4:	4641      	mov	r1, r8
 80042c6:	1851      	adds	r1, r2, r1
 80042c8:	6339      	str	r1, [r7, #48]	; 0x30
 80042ca:	4649      	mov	r1, r9
 80042cc:	414b      	adcs	r3, r1
 80042ce:	637b      	str	r3, [r7, #52]	; 0x34
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80042dc:	4659      	mov	r1, fp
 80042de:	00cb      	lsls	r3, r1, #3
 80042e0:	4651      	mov	r1, sl
 80042e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042e6:	4651      	mov	r1, sl
 80042e8:	00ca      	lsls	r2, r1, #3
 80042ea:	4610      	mov	r0, r2
 80042ec:	4619      	mov	r1, r3
 80042ee:	4603      	mov	r3, r0
 80042f0:	4642      	mov	r2, r8
 80042f2:	189b      	adds	r3, r3, r2
 80042f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042f8:	464b      	mov	r3, r9
 80042fa:	460a      	mov	r2, r1
 80042fc:	eb42 0303 	adc.w	r3, r2, r3
 8004300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004310:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004314:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004318:	460b      	mov	r3, r1
 800431a:	18db      	adds	r3, r3, r3
 800431c:	62bb      	str	r3, [r7, #40]	; 0x28
 800431e:	4613      	mov	r3, r2
 8004320:	eb42 0303 	adc.w	r3, r2, r3
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004326:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800432a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800432e:	f7fc fc57 	bl	8000be0 <__aeabi_uldivmod>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4b0d      	ldr	r3, [pc, #52]	; (800436c <UART_SetConfig+0x2d4>)
 8004338:	fba3 1302 	umull	r1, r3, r3, r2
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	2164      	movs	r1, #100	; 0x64
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	3332      	adds	r3, #50	; 0x32
 800434a:	4a08      	ldr	r2, [pc, #32]	; (800436c <UART_SetConfig+0x2d4>)
 800434c:	fba2 2303 	umull	r2, r3, r2, r3
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	f003 0207 	and.w	r2, r3, #7
 8004356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4422      	add	r2, r4
 800435e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004360:	e105      	b.n	800456e <UART_SetConfig+0x4d6>
 8004362:	bf00      	nop
 8004364:	40011000 	.word	0x40011000
 8004368:	40011400 	.word	0x40011400
 800436c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004374:	2200      	movs	r2, #0
 8004376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800437a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800437e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004382:	4642      	mov	r2, r8
 8004384:	464b      	mov	r3, r9
 8004386:	1891      	adds	r1, r2, r2
 8004388:	6239      	str	r1, [r7, #32]
 800438a:	415b      	adcs	r3, r3
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
 800438e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004392:	4641      	mov	r1, r8
 8004394:	1854      	adds	r4, r2, r1
 8004396:	4649      	mov	r1, r9
 8004398:	eb43 0501 	adc.w	r5, r3, r1
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	00eb      	lsls	r3, r5, #3
 80043a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043aa:	00e2      	lsls	r2, r4, #3
 80043ac:	4614      	mov	r4, r2
 80043ae:	461d      	mov	r5, r3
 80043b0:	4643      	mov	r3, r8
 80043b2:	18e3      	adds	r3, r4, r3
 80043b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043b8:	464b      	mov	r3, r9
 80043ba:	eb45 0303 	adc.w	r3, r5, r3
 80043be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043de:	4629      	mov	r1, r5
 80043e0:	008b      	lsls	r3, r1, #2
 80043e2:	4621      	mov	r1, r4
 80043e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043e8:	4621      	mov	r1, r4
 80043ea:	008a      	lsls	r2, r1, #2
 80043ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043f0:	f7fc fbf6 	bl	8000be0 <__aeabi_uldivmod>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4b60      	ldr	r3, [pc, #384]	; (800457c <UART_SetConfig+0x4e4>)
 80043fa:	fba3 2302 	umull	r2, r3, r3, r2
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	011c      	lsls	r4, r3, #4
 8004402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004406:	2200      	movs	r2, #0
 8004408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800440c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004410:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004414:	4642      	mov	r2, r8
 8004416:	464b      	mov	r3, r9
 8004418:	1891      	adds	r1, r2, r2
 800441a:	61b9      	str	r1, [r7, #24]
 800441c:	415b      	adcs	r3, r3
 800441e:	61fb      	str	r3, [r7, #28]
 8004420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004424:	4641      	mov	r1, r8
 8004426:	1851      	adds	r1, r2, r1
 8004428:	6139      	str	r1, [r7, #16]
 800442a:	4649      	mov	r1, r9
 800442c:	414b      	adcs	r3, r1
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800443c:	4659      	mov	r1, fp
 800443e:	00cb      	lsls	r3, r1, #3
 8004440:	4651      	mov	r1, sl
 8004442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004446:	4651      	mov	r1, sl
 8004448:	00ca      	lsls	r2, r1, #3
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	4603      	mov	r3, r0
 8004450:	4642      	mov	r2, r8
 8004452:	189b      	adds	r3, r3, r2
 8004454:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004458:	464b      	mov	r3, r9
 800445a:	460a      	mov	r2, r1
 800445c:	eb42 0303 	adc.w	r3, r2, r3
 8004460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	67bb      	str	r3, [r7, #120]	; 0x78
 800446e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800447c:	4649      	mov	r1, r9
 800447e:	008b      	lsls	r3, r1, #2
 8004480:	4641      	mov	r1, r8
 8004482:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004486:	4641      	mov	r1, r8
 8004488:	008a      	lsls	r2, r1, #2
 800448a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800448e:	f7fc fba7 	bl	8000be0 <__aeabi_uldivmod>
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	4b39      	ldr	r3, [pc, #228]	; (800457c <UART_SetConfig+0x4e4>)
 8004498:	fba3 1302 	umull	r1, r3, r3, r2
 800449c:	095b      	lsrs	r3, r3, #5
 800449e:	2164      	movs	r1, #100	; 0x64
 80044a0:	fb01 f303 	mul.w	r3, r1, r3
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	3332      	adds	r3, #50	; 0x32
 80044aa:	4a34      	ldr	r2, [pc, #208]	; (800457c <UART_SetConfig+0x4e4>)
 80044ac:	fba2 2303 	umull	r2, r3, r2, r3
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044b6:	441c      	add	r4, r3
 80044b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044bc:	2200      	movs	r2, #0
 80044be:	673b      	str	r3, [r7, #112]	; 0x70
 80044c0:	677a      	str	r2, [r7, #116]	; 0x74
 80044c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044c6:	4642      	mov	r2, r8
 80044c8:	464b      	mov	r3, r9
 80044ca:	1891      	adds	r1, r2, r2
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	415b      	adcs	r3, r3
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044d6:	4641      	mov	r1, r8
 80044d8:	1851      	adds	r1, r2, r1
 80044da:	6039      	str	r1, [r7, #0]
 80044dc:	4649      	mov	r1, r9
 80044de:	414b      	adcs	r3, r1
 80044e0:	607b      	str	r3, [r7, #4]
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	f04f 0300 	mov.w	r3, #0
 80044ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044ee:	4659      	mov	r1, fp
 80044f0:	00cb      	lsls	r3, r1, #3
 80044f2:	4651      	mov	r1, sl
 80044f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044f8:	4651      	mov	r1, sl
 80044fa:	00ca      	lsls	r2, r1, #3
 80044fc:	4610      	mov	r0, r2
 80044fe:	4619      	mov	r1, r3
 8004500:	4603      	mov	r3, r0
 8004502:	4642      	mov	r2, r8
 8004504:	189b      	adds	r3, r3, r2
 8004506:	66bb      	str	r3, [r7, #104]	; 0x68
 8004508:	464b      	mov	r3, r9
 800450a:	460a      	mov	r2, r1
 800450c:	eb42 0303 	adc.w	r3, r2, r3
 8004510:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	663b      	str	r3, [r7, #96]	; 0x60
 800451c:	667a      	str	r2, [r7, #100]	; 0x64
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800452a:	4649      	mov	r1, r9
 800452c:	008b      	lsls	r3, r1, #2
 800452e:	4641      	mov	r1, r8
 8004530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004534:	4641      	mov	r1, r8
 8004536:	008a      	lsls	r2, r1, #2
 8004538:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800453c:	f7fc fb50 	bl	8000be0 <__aeabi_uldivmod>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4b0d      	ldr	r3, [pc, #52]	; (800457c <UART_SetConfig+0x4e4>)
 8004546:	fba3 1302 	umull	r1, r3, r3, r2
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	2164      	movs	r1, #100	; 0x64
 800454e:	fb01 f303 	mul.w	r3, r1, r3
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	3332      	adds	r3, #50	; 0x32
 8004558:	4a08      	ldr	r2, [pc, #32]	; (800457c <UART_SetConfig+0x4e4>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	f003 020f 	and.w	r2, r3, #15
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4422      	add	r2, r4
 800456c:	609a      	str	r2, [r3, #8]
}
 800456e:	bf00      	nop
 8004570:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004574:	46bd      	mov	sp, r7
 8004576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800457a:	bf00      	nop
 800457c:	51eb851f 	.word	0x51eb851f

08004580 <__errno>:
 8004580:	4b01      	ldr	r3, [pc, #4]	; (8004588 <__errno+0x8>)
 8004582:	6818      	ldr	r0, [r3, #0]
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	2000000c 	.word	0x2000000c

0800458c <__libc_init_array>:
 800458c:	b570      	push	{r4, r5, r6, lr}
 800458e:	4d0d      	ldr	r5, [pc, #52]	; (80045c4 <__libc_init_array+0x38>)
 8004590:	4c0d      	ldr	r4, [pc, #52]	; (80045c8 <__libc_init_array+0x3c>)
 8004592:	1b64      	subs	r4, r4, r5
 8004594:	10a4      	asrs	r4, r4, #2
 8004596:	2600      	movs	r6, #0
 8004598:	42a6      	cmp	r6, r4
 800459a:	d109      	bne.n	80045b0 <__libc_init_array+0x24>
 800459c:	4d0b      	ldr	r5, [pc, #44]	; (80045cc <__libc_init_array+0x40>)
 800459e:	4c0c      	ldr	r4, [pc, #48]	; (80045d0 <__libc_init_array+0x44>)
 80045a0:	f001 f9e8 	bl	8005974 <_init>
 80045a4:	1b64      	subs	r4, r4, r5
 80045a6:	10a4      	asrs	r4, r4, #2
 80045a8:	2600      	movs	r6, #0
 80045aa:	42a6      	cmp	r6, r4
 80045ac:	d105      	bne.n	80045ba <__libc_init_array+0x2e>
 80045ae:	bd70      	pop	{r4, r5, r6, pc}
 80045b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b4:	4798      	blx	r3
 80045b6:	3601      	adds	r6, #1
 80045b8:	e7ee      	b.n	8004598 <__libc_init_array+0xc>
 80045ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80045be:	4798      	blx	r3
 80045c0:	3601      	adds	r6, #1
 80045c2:	e7f2      	b.n	80045aa <__libc_init_array+0x1e>
 80045c4:	08005b88 	.word	0x08005b88
 80045c8:	08005b88 	.word	0x08005b88
 80045cc:	08005b88 	.word	0x08005b88
 80045d0:	08005b8c 	.word	0x08005b8c

080045d4 <memset>:
 80045d4:	4402      	add	r2, r0
 80045d6:	4603      	mov	r3, r0
 80045d8:	4293      	cmp	r3, r2
 80045da:	d100      	bne.n	80045de <memset+0xa>
 80045dc:	4770      	bx	lr
 80045de:	f803 1b01 	strb.w	r1, [r3], #1
 80045e2:	e7f9      	b.n	80045d8 <memset+0x4>
 80045e4:	0000      	movs	r0, r0
	...

080045e8 <cos>:
 80045e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80045ea:	ec53 2b10 	vmov	r2, r3, d0
 80045ee:	4826      	ldr	r0, [pc, #152]	; (8004688 <cos+0xa0>)
 80045f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80045f4:	4281      	cmp	r1, r0
 80045f6:	dc06      	bgt.n	8004606 <cos+0x1e>
 80045f8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8004680 <cos+0x98>
 80045fc:	b005      	add	sp, #20
 80045fe:	f85d eb04 	ldr.w	lr, [sp], #4
 8004602:	f000 bbd1 	b.w	8004da8 <__kernel_cos>
 8004606:	4821      	ldr	r0, [pc, #132]	; (800468c <cos+0xa4>)
 8004608:	4281      	cmp	r1, r0
 800460a:	dd09      	ble.n	8004620 <cos+0x38>
 800460c:	ee10 0a10 	vmov	r0, s0
 8004610:	4619      	mov	r1, r3
 8004612:	f7fb fde5 	bl	80001e0 <__aeabi_dsub>
 8004616:	ec41 0b10 	vmov	d0, r0, r1
 800461a:	b005      	add	sp, #20
 800461c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004620:	4668      	mov	r0, sp
 8004622:	f000 f901 	bl	8004828 <__ieee754_rem_pio2>
 8004626:	f000 0003 	and.w	r0, r0, #3
 800462a:	2801      	cmp	r0, #1
 800462c:	d00b      	beq.n	8004646 <cos+0x5e>
 800462e:	2802      	cmp	r0, #2
 8004630:	d016      	beq.n	8004660 <cos+0x78>
 8004632:	b9e0      	cbnz	r0, 800466e <cos+0x86>
 8004634:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004638:	ed9d 0b00 	vldr	d0, [sp]
 800463c:	f000 fbb4 	bl	8004da8 <__kernel_cos>
 8004640:	ec51 0b10 	vmov	r0, r1, d0
 8004644:	e7e7      	b.n	8004616 <cos+0x2e>
 8004646:	ed9d 1b02 	vldr	d1, [sp, #8]
 800464a:	ed9d 0b00 	vldr	d0, [sp]
 800464e:	f000 ffc3 	bl	80055d8 <__kernel_sin>
 8004652:	ec53 2b10 	vmov	r2, r3, d0
 8004656:	ee10 0a10 	vmov	r0, s0
 800465a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800465e:	e7da      	b.n	8004616 <cos+0x2e>
 8004660:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004664:	ed9d 0b00 	vldr	d0, [sp]
 8004668:	f000 fb9e 	bl	8004da8 <__kernel_cos>
 800466c:	e7f1      	b.n	8004652 <cos+0x6a>
 800466e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004672:	ed9d 0b00 	vldr	d0, [sp]
 8004676:	2001      	movs	r0, #1
 8004678:	f000 ffae 	bl	80055d8 <__kernel_sin>
 800467c:	e7e0      	b.n	8004640 <cos+0x58>
 800467e:	bf00      	nop
	...
 8004688:	3fe921fb 	.word	0x3fe921fb
 800468c:	7fefffff 	.word	0x7fefffff

08004690 <round>:
 8004690:	ec51 0b10 	vmov	r0, r1, d0
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800469a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800469e:	2c13      	cmp	r4, #19
 80046a0:	ee10 2a10 	vmov	r2, s0
 80046a4:	460b      	mov	r3, r1
 80046a6:	dc19      	bgt.n	80046dc <round+0x4c>
 80046a8:	2c00      	cmp	r4, #0
 80046aa:	da09      	bge.n	80046c0 <round+0x30>
 80046ac:	3401      	adds	r4, #1
 80046ae:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80046b2:	d103      	bne.n	80046bc <round+0x2c>
 80046b4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80046b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80046bc:	2200      	movs	r2, #0
 80046be:	e028      	b.n	8004712 <round+0x82>
 80046c0:	4d15      	ldr	r5, [pc, #84]	; (8004718 <round+0x88>)
 80046c2:	4125      	asrs	r5, r4
 80046c4:	ea01 0605 	and.w	r6, r1, r5
 80046c8:	4332      	orrs	r2, r6
 80046ca:	d00e      	beq.n	80046ea <round+0x5a>
 80046cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80046d0:	fa42 f404 	asr.w	r4, r2, r4
 80046d4:	4423      	add	r3, r4
 80046d6:	ea23 0305 	bic.w	r3, r3, r5
 80046da:	e7ef      	b.n	80046bc <round+0x2c>
 80046dc:	2c33      	cmp	r4, #51	; 0x33
 80046de:	dd07      	ble.n	80046f0 <round+0x60>
 80046e0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80046e4:	d101      	bne.n	80046ea <round+0x5a>
 80046e6:	f7fb fd7d 	bl	80001e4 <__adddf3>
 80046ea:	ec41 0b10 	vmov	d0, r0, r1
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80046f4:	f04f 35ff 	mov.w	r5, #4294967295
 80046f8:	40f5      	lsrs	r5, r6
 80046fa:	4228      	tst	r0, r5
 80046fc:	d0f5      	beq.n	80046ea <round+0x5a>
 80046fe:	2101      	movs	r1, #1
 8004700:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8004704:	fa01 f404 	lsl.w	r4, r1, r4
 8004708:	1912      	adds	r2, r2, r4
 800470a:	bf28      	it	cs
 800470c:	185b      	addcs	r3, r3, r1
 800470e:	ea22 0205 	bic.w	r2, r2, r5
 8004712:	4619      	mov	r1, r3
 8004714:	4610      	mov	r0, r2
 8004716:	e7e8      	b.n	80046ea <round+0x5a>
 8004718:	000fffff 	.word	0x000fffff
 800471c:	00000000 	.word	0x00000000

08004720 <sin>:
 8004720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004722:	ec53 2b10 	vmov	r2, r3, d0
 8004726:	4828      	ldr	r0, [pc, #160]	; (80047c8 <sin+0xa8>)
 8004728:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800472c:	4281      	cmp	r1, r0
 800472e:	dc07      	bgt.n	8004740 <sin+0x20>
 8004730:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80047c0 <sin+0xa0>
 8004734:	2000      	movs	r0, #0
 8004736:	b005      	add	sp, #20
 8004738:	f85d eb04 	ldr.w	lr, [sp], #4
 800473c:	f000 bf4c 	b.w	80055d8 <__kernel_sin>
 8004740:	4822      	ldr	r0, [pc, #136]	; (80047cc <sin+0xac>)
 8004742:	4281      	cmp	r1, r0
 8004744:	dd09      	ble.n	800475a <sin+0x3a>
 8004746:	ee10 0a10 	vmov	r0, s0
 800474a:	4619      	mov	r1, r3
 800474c:	f7fb fd48 	bl	80001e0 <__aeabi_dsub>
 8004750:	ec41 0b10 	vmov	d0, r0, r1
 8004754:	b005      	add	sp, #20
 8004756:	f85d fb04 	ldr.w	pc, [sp], #4
 800475a:	4668      	mov	r0, sp
 800475c:	f000 f864 	bl	8004828 <__ieee754_rem_pio2>
 8004760:	f000 0003 	and.w	r0, r0, #3
 8004764:	2801      	cmp	r0, #1
 8004766:	d00c      	beq.n	8004782 <sin+0x62>
 8004768:	2802      	cmp	r0, #2
 800476a:	d011      	beq.n	8004790 <sin+0x70>
 800476c:	b9f0      	cbnz	r0, 80047ac <sin+0x8c>
 800476e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004772:	ed9d 0b00 	vldr	d0, [sp]
 8004776:	2001      	movs	r0, #1
 8004778:	f000 ff2e 	bl	80055d8 <__kernel_sin>
 800477c:	ec51 0b10 	vmov	r0, r1, d0
 8004780:	e7e6      	b.n	8004750 <sin+0x30>
 8004782:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004786:	ed9d 0b00 	vldr	d0, [sp]
 800478a:	f000 fb0d 	bl	8004da8 <__kernel_cos>
 800478e:	e7f5      	b.n	800477c <sin+0x5c>
 8004790:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004794:	ed9d 0b00 	vldr	d0, [sp]
 8004798:	2001      	movs	r0, #1
 800479a:	f000 ff1d 	bl	80055d8 <__kernel_sin>
 800479e:	ec53 2b10 	vmov	r2, r3, d0
 80047a2:	ee10 0a10 	vmov	r0, s0
 80047a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80047aa:	e7d1      	b.n	8004750 <sin+0x30>
 80047ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80047b0:	ed9d 0b00 	vldr	d0, [sp]
 80047b4:	f000 faf8 	bl	8004da8 <__kernel_cos>
 80047b8:	e7f1      	b.n	800479e <sin+0x7e>
 80047ba:	bf00      	nop
 80047bc:	f3af 8000 	nop.w
	...
 80047c8:	3fe921fb 	.word	0x3fe921fb
 80047cc:	7fefffff 	.word	0x7fefffff

080047d0 <sqrt>:
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	ed2d 8b02 	vpush	{d8}
 80047d6:	ec55 4b10 	vmov	r4, r5, d0
 80047da:	f000 fa31 	bl	8004c40 <__ieee754_sqrt>
 80047de:	4622      	mov	r2, r4
 80047e0:	462b      	mov	r3, r5
 80047e2:	4620      	mov	r0, r4
 80047e4:	4629      	mov	r1, r5
 80047e6:	eeb0 8a40 	vmov.f32	s16, s0
 80047ea:	eef0 8a60 	vmov.f32	s17, s1
 80047ee:	f7fc f949 	bl	8000a84 <__aeabi_dcmpun>
 80047f2:	b990      	cbnz	r0, 800481a <sqrt+0x4a>
 80047f4:	2200      	movs	r2, #0
 80047f6:	2300      	movs	r3, #0
 80047f8:	4620      	mov	r0, r4
 80047fa:	4629      	mov	r1, r5
 80047fc:	f7fc f91a 	bl	8000a34 <__aeabi_dcmplt>
 8004800:	b158      	cbz	r0, 800481a <sqrt+0x4a>
 8004802:	f7ff febd 	bl	8004580 <__errno>
 8004806:	2321      	movs	r3, #33	; 0x21
 8004808:	6003      	str	r3, [r0, #0]
 800480a:	2200      	movs	r2, #0
 800480c:	2300      	movs	r3, #0
 800480e:	4610      	mov	r0, r2
 8004810:	4619      	mov	r1, r3
 8004812:	f7fb ffc7 	bl	80007a4 <__aeabi_ddiv>
 8004816:	ec41 0b18 	vmov	d8, r0, r1
 800481a:	eeb0 0a48 	vmov.f32	s0, s16
 800481e:	eef0 0a68 	vmov.f32	s1, s17
 8004822:	ecbd 8b02 	vpop	{d8}
 8004826:	bd38      	pop	{r3, r4, r5, pc}

08004828 <__ieee754_rem_pio2>:
 8004828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482c:	ed2d 8b02 	vpush	{d8}
 8004830:	ec55 4b10 	vmov	r4, r5, d0
 8004834:	4bca      	ldr	r3, [pc, #808]	; (8004b60 <__ieee754_rem_pio2+0x338>)
 8004836:	b08b      	sub	sp, #44	; 0x2c
 8004838:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800483c:	4598      	cmp	r8, r3
 800483e:	4682      	mov	sl, r0
 8004840:	9502      	str	r5, [sp, #8]
 8004842:	dc08      	bgt.n	8004856 <__ieee754_rem_pio2+0x2e>
 8004844:	2200      	movs	r2, #0
 8004846:	2300      	movs	r3, #0
 8004848:	ed80 0b00 	vstr	d0, [r0]
 800484c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004850:	f04f 0b00 	mov.w	fp, #0
 8004854:	e028      	b.n	80048a8 <__ieee754_rem_pio2+0x80>
 8004856:	4bc3      	ldr	r3, [pc, #780]	; (8004b64 <__ieee754_rem_pio2+0x33c>)
 8004858:	4598      	cmp	r8, r3
 800485a:	dc78      	bgt.n	800494e <__ieee754_rem_pio2+0x126>
 800485c:	9b02      	ldr	r3, [sp, #8]
 800485e:	4ec2      	ldr	r6, [pc, #776]	; (8004b68 <__ieee754_rem_pio2+0x340>)
 8004860:	2b00      	cmp	r3, #0
 8004862:	ee10 0a10 	vmov	r0, s0
 8004866:	a3b0      	add	r3, pc, #704	; (adr r3, 8004b28 <__ieee754_rem_pio2+0x300>)
 8004868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486c:	4629      	mov	r1, r5
 800486e:	dd39      	ble.n	80048e4 <__ieee754_rem_pio2+0xbc>
 8004870:	f7fb fcb6 	bl	80001e0 <__aeabi_dsub>
 8004874:	45b0      	cmp	r8, r6
 8004876:	4604      	mov	r4, r0
 8004878:	460d      	mov	r5, r1
 800487a:	d01b      	beq.n	80048b4 <__ieee754_rem_pio2+0x8c>
 800487c:	a3ac      	add	r3, pc, #688	; (adr r3, 8004b30 <__ieee754_rem_pio2+0x308>)
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	f7fb fcad 	bl	80001e0 <__aeabi_dsub>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	e9ca 2300 	strd	r2, r3, [sl]
 800488e:	4620      	mov	r0, r4
 8004890:	4629      	mov	r1, r5
 8004892:	f7fb fca5 	bl	80001e0 <__aeabi_dsub>
 8004896:	a3a6      	add	r3, pc, #664	; (adr r3, 8004b30 <__ieee754_rem_pio2+0x308>)
 8004898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489c:	f7fb fca0 	bl	80001e0 <__aeabi_dsub>
 80048a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80048a4:	f04f 0b01 	mov.w	fp, #1
 80048a8:	4658      	mov	r0, fp
 80048aa:	b00b      	add	sp, #44	; 0x2c
 80048ac:	ecbd 8b02 	vpop	{d8}
 80048b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b4:	a3a0      	add	r3, pc, #640	; (adr r3, 8004b38 <__ieee754_rem_pio2+0x310>)
 80048b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ba:	f7fb fc91 	bl	80001e0 <__aeabi_dsub>
 80048be:	a3a0      	add	r3, pc, #640	; (adr r3, 8004b40 <__ieee754_rem_pio2+0x318>)
 80048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c4:	4604      	mov	r4, r0
 80048c6:	460d      	mov	r5, r1
 80048c8:	f7fb fc8a 	bl	80001e0 <__aeabi_dsub>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	e9ca 2300 	strd	r2, r3, [sl]
 80048d4:	4620      	mov	r0, r4
 80048d6:	4629      	mov	r1, r5
 80048d8:	f7fb fc82 	bl	80001e0 <__aeabi_dsub>
 80048dc:	a398      	add	r3, pc, #608	; (adr r3, 8004b40 <__ieee754_rem_pio2+0x318>)
 80048de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e2:	e7db      	b.n	800489c <__ieee754_rem_pio2+0x74>
 80048e4:	f7fb fc7e 	bl	80001e4 <__adddf3>
 80048e8:	45b0      	cmp	r8, r6
 80048ea:	4604      	mov	r4, r0
 80048ec:	460d      	mov	r5, r1
 80048ee:	d016      	beq.n	800491e <__ieee754_rem_pio2+0xf6>
 80048f0:	a38f      	add	r3, pc, #572	; (adr r3, 8004b30 <__ieee754_rem_pio2+0x308>)
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	f7fb fc75 	bl	80001e4 <__adddf3>
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	e9ca 2300 	strd	r2, r3, [sl]
 8004902:	4620      	mov	r0, r4
 8004904:	4629      	mov	r1, r5
 8004906:	f7fb fc6b 	bl	80001e0 <__aeabi_dsub>
 800490a:	a389      	add	r3, pc, #548	; (adr r3, 8004b30 <__ieee754_rem_pio2+0x308>)
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	f7fb fc68 	bl	80001e4 <__adddf3>
 8004914:	f04f 3bff 	mov.w	fp, #4294967295
 8004918:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800491c:	e7c4      	b.n	80048a8 <__ieee754_rem_pio2+0x80>
 800491e:	a386      	add	r3, pc, #536	; (adr r3, 8004b38 <__ieee754_rem_pio2+0x310>)
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	f7fb fc5e 	bl	80001e4 <__adddf3>
 8004928:	a385      	add	r3, pc, #532	; (adr r3, 8004b40 <__ieee754_rem_pio2+0x318>)
 800492a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492e:	4604      	mov	r4, r0
 8004930:	460d      	mov	r5, r1
 8004932:	f7fb fc57 	bl	80001e4 <__adddf3>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	e9ca 2300 	strd	r2, r3, [sl]
 800493e:	4620      	mov	r0, r4
 8004940:	4629      	mov	r1, r5
 8004942:	f7fb fc4d 	bl	80001e0 <__aeabi_dsub>
 8004946:	a37e      	add	r3, pc, #504	; (adr r3, 8004b40 <__ieee754_rem_pio2+0x318>)
 8004948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494c:	e7e0      	b.n	8004910 <__ieee754_rem_pio2+0xe8>
 800494e:	4b87      	ldr	r3, [pc, #540]	; (8004b6c <__ieee754_rem_pio2+0x344>)
 8004950:	4598      	cmp	r8, r3
 8004952:	f300 80d9 	bgt.w	8004b08 <__ieee754_rem_pio2+0x2e0>
 8004956:	f000 fefd 	bl	8005754 <fabs>
 800495a:	ec55 4b10 	vmov	r4, r5, d0
 800495e:	ee10 0a10 	vmov	r0, s0
 8004962:	a379      	add	r3, pc, #484	; (adr r3, 8004b48 <__ieee754_rem_pio2+0x320>)
 8004964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004968:	4629      	mov	r1, r5
 800496a:	f7fb fdf1 	bl	8000550 <__aeabi_dmul>
 800496e:	4b80      	ldr	r3, [pc, #512]	; (8004b70 <__ieee754_rem_pio2+0x348>)
 8004970:	2200      	movs	r2, #0
 8004972:	f7fb fc37 	bl	80001e4 <__adddf3>
 8004976:	f7fc f89b 	bl	8000ab0 <__aeabi_d2iz>
 800497a:	4683      	mov	fp, r0
 800497c:	f7fb fd7e 	bl	800047c <__aeabi_i2d>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	ec43 2b18 	vmov	d8, r2, r3
 8004988:	a367      	add	r3, pc, #412	; (adr r3, 8004b28 <__ieee754_rem_pio2+0x300>)
 800498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498e:	f7fb fddf 	bl	8000550 <__aeabi_dmul>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4620      	mov	r0, r4
 8004998:	4629      	mov	r1, r5
 800499a:	f7fb fc21 	bl	80001e0 <__aeabi_dsub>
 800499e:	a364      	add	r3, pc, #400	; (adr r3, 8004b30 <__ieee754_rem_pio2+0x308>)
 80049a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a4:	4606      	mov	r6, r0
 80049a6:	460f      	mov	r7, r1
 80049a8:	ec51 0b18 	vmov	r0, r1, d8
 80049ac:	f7fb fdd0 	bl	8000550 <__aeabi_dmul>
 80049b0:	f1bb 0f1f 	cmp.w	fp, #31
 80049b4:	4604      	mov	r4, r0
 80049b6:	460d      	mov	r5, r1
 80049b8:	dc0d      	bgt.n	80049d6 <__ieee754_rem_pio2+0x1ae>
 80049ba:	4b6e      	ldr	r3, [pc, #440]	; (8004b74 <__ieee754_rem_pio2+0x34c>)
 80049bc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80049c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049c4:	4543      	cmp	r3, r8
 80049c6:	d006      	beq.n	80049d6 <__ieee754_rem_pio2+0x1ae>
 80049c8:	4622      	mov	r2, r4
 80049ca:	462b      	mov	r3, r5
 80049cc:	4630      	mov	r0, r6
 80049ce:	4639      	mov	r1, r7
 80049d0:	f7fb fc06 	bl	80001e0 <__aeabi_dsub>
 80049d4:	e00f      	b.n	80049f6 <__ieee754_rem_pio2+0x1ce>
 80049d6:	462b      	mov	r3, r5
 80049d8:	4622      	mov	r2, r4
 80049da:	4630      	mov	r0, r6
 80049dc:	4639      	mov	r1, r7
 80049de:	f7fb fbff 	bl	80001e0 <__aeabi_dsub>
 80049e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80049e6:	9303      	str	r3, [sp, #12]
 80049e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80049ec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80049f0:	f1b8 0f10 	cmp.w	r8, #16
 80049f4:	dc02      	bgt.n	80049fc <__ieee754_rem_pio2+0x1d4>
 80049f6:	e9ca 0100 	strd	r0, r1, [sl]
 80049fa:	e039      	b.n	8004a70 <__ieee754_rem_pio2+0x248>
 80049fc:	a34e      	add	r3, pc, #312	; (adr r3, 8004b38 <__ieee754_rem_pio2+0x310>)
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	ec51 0b18 	vmov	r0, r1, d8
 8004a06:	f7fb fda3 	bl	8000550 <__aeabi_dmul>
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	460d      	mov	r5, r1
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	4630      	mov	r0, r6
 8004a14:	4639      	mov	r1, r7
 8004a16:	f7fb fbe3 	bl	80001e0 <__aeabi_dsub>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4680      	mov	r8, r0
 8004a20:	4689      	mov	r9, r1
 8004a22:	4630      	mov	r0, r6
 8004a24:	4639      	mov	r1, r7
 8004a26:	f7fb fbdb 	bl	80001e0 <__aeabi_dsub>
 8004a2a:	4622      	mov	r2, r4
 8004a2c:	462b      	mov	r3, r5
 8004a2e:	f7fb fbd7 	bl	80001e0 <__aeabi_dsub>
 8004a32:	a343      	add	r3, pc, #268	; (adr r3, 8004b40 <__ieee754_rem_pio2+0x318>)
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	4604      	mov	r4, r0
 8004a3a:	460d      	mov	r5, r1
 8004a3c:	ec51 0b18 	vmov	r0, r1, d8
 8004a40:	f7fb fd86 	bl	8000550 <__aeabi_dmul>
 8004a44:	4622      	mov	r2, r4
 8004a46:	462b      	mov	r3, r5
 8004a48:	f7fb fbca 	bl	80001e0 <__aeabi_dsub>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4604      	mov	r4, r0
 8004a52:	460d      	mov	r5, r1
 8004a54:	4640      	mov	r0, r8
 8004a56:	4649      	mov	r1, r9
 8004a58:	f7fb fbc2 	bl	80001e0 <__aeabi_dsub>
 8004a5c:	9a03      	ldr	r2, [sp, #12]
 8004a5e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b31      	cmp	r3, #49	; 0x31
 8004a66:	dc24      	bgt.n	8004ab2 <__ieee754_rem_pio2+0x28a>
 8004a68:	e9ca 0100 	strd	r0, r1, [sl]
 8004a6c:	4646      	mov	r6, r8
 8004a6e:	464f      	mov	r7, r9
 8004a70:	e9da 8900 	ldrd	r8, r9, [sl]
 8004a74:	4630      	mov	r0, r6
 8004a76:	4642      	mov	r2, r8
 8004a78:	464b      	mov	r3, r9
 8004a7a:	4639      	mov	r1, r7
 8004a7c:	f7fb fbb0 	bl	80001e0 <__aeabi_dsub>
 8004a80:	462b      	mov	r3, r5
 8004a82:	4622      	mov	r2, r4
 8004a84:	f7fb fbac 	bl	80001e0 <__aeabi_dsub>
 8004a88:	9b02      	ldr	r3, [sp, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004a90:	f6bf af0a 	bge.w	80048a8 <__ieee754_rem_pio2+0x80>
 8004a94:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004a98:	f8ca 3004 	str.w	r3, [sl, #4]
 8004a9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004aa0:	f8ca 8000 	str.w	r8, [sl]
 8004aa4:	f8ca 0008 	str.w	r0, [sl, #8]
 8004aa8:	f8ca 300c 	str.w	r3, [sl, #12]
 8004aac:	f1cb 0b00 	rsb	fp, fp, #0
 8004ab0:	e6fa      	b.n	80048a8 <__ieee754_rem_pio2+0x80>
 8004ab2:	a327      	add	r3, pc, #156	; (adr r3, 8004b50 <__ieee754_rem_pio2+0x328>)
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	ec51 0b18 	vmov	r0, r1, d8
 8004abc:	f7fb fd48 	bl	8000550 <__aeabi_dmul>
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	460d      	mov	r5, r1
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4640      	mov	r0, r8
 8004aca:	4649      	mov	r1, r9
 8004acc:	f7fb fb88 	bl	80001e0 <__aeabi_dsub>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4606      	mov	r6, r0
 8004ad6:	460f      	mov	r7, r1
 8004ad8:	4640      	mov	r0, r8
 8004ada:	4649      	mov	r1, r9
 8004adc:	f7fb fb80 	bl	80001e0 <__aeabi_dsub>
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	462b      	mov	r3, r5
 8004ae4:	f7fb fb7c 	bl	80001e0 <__aeabi_dsub>
 8004ae8:	a31b      	add	r3, pc, #108	; (adr r3, 8004b58 <__ieee754_rem_pio2+0x330>)
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	4604      	mov	r4, r0
 8004af0:	460d      	mov	r5, r1
 8004af2:	ec51 0b18 	vmov	r0, r1, d8
 8004af6:	f7fb fd2b 	bl	8000550 <__aeabi_dmul>
 8004afa:	4622      	mov	r2, r4
 8004afc:	462b      	mov	r3, r5
 8004afe:	f7fb fb6f 	bl	80001e0 <__aeabi_dsub>
 8004b02:	4604      	mov	r4, r0
 8004b04:	460d      	mov	r5, r1
 8004b06:	e75f      	b.n	80049c8 <__ieee754_rem_pio2+0x1a0>
 8004b08:	4b1b      	ldr	r3, [pc, #108]	; (8004b78 <__ieee754_rem_pio2+0x350>)
 8004b0a:	4598      	cmp	r8, r3
 8004b0c:	dd36      	ble.n	8004b7c <__ieee754_rem_pio2+0x354>
 8004b0e:	ee10 2a10 	vmov	r2, s0
 8004b12:	462b      	mov	r3, r5
 8004b14:	4620      	mov	r0, r4
 8004b16:	4629      	mov	r1, r5
 8004b18:	f7fb fb62 	bl	80001e0 <__aeabi_dsub>
 8004b1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004b20:	e9ca 0100 	strd	r0, r1, [sl]
 8004b24:	e694      	b.n	8004850 <__ieee754_rem_pio2+0x28>
 8004b26:	bf00      	nop
 8004b28:	54400000 	.word	0x54400000
 8004b2c:	3ff921fb 	.word	0x3ff921fb
 8004b30:	1a626331 	.word	0x1a626331
 8004b34:	3dd0b461 	.word	0x3dd0b461
 8004b38:	1a600000 	.word	0x1a600000
 8004b3c:	3dd0b461 	.word	0x3dd0b461
 8004b40:	2e037073 	.word	0x2e037073
 8004b44:	3ba3198a 	.word	0x3ba3198a
 8004b48:	6dc9c883 	.word	0x6dc9c883
 8004b4c:	3fe45f30 	.word	0x3fe45f30
 8004b50:	2e000000 	.word	0x2e000000
 8004b54:	3ba3198a 	.word	0x3ba3198a
 8004b58:	252049c1 	.word	0x252049c1
 8004b5c:	397b839a 	.word	0x397b839a
 8004b60:	3fe921fb 	.word	0x3fe921fb
 8004b64:	4002d97b 	.word	0x4002d97b
 8004b68:	3ff921fb 	.word	0x3ff921fb
 8004b6c:	413921fb 	.word	0x413921fb
 8004b70:	3fe00000 	.word	0x3fe00000
 8004b74:	080059a8 	.word	0x080059a8
 8004b78:	7fefffff 	.word	0x7fefffff
 8004b7c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004b80:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004b84:	ee10 0a10 	vmov	r0, s0
 8004b88:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8004b8c:	ee10 6a10 	vmov	r6, s0
 8004b90:	460f      	mov	r7, r1
 8004b92:	f7fb ff8d 	bl	8000ab0 <__aeabi_d2iz>
 8004b96:	f7fb fc71 	bl	800047c <__aeabi_i2d>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	4639      	mov	r1, r7
 8004ba2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ba6:	f7fb fb1b 	bl	80001e0 <__aeabi_dsub>
 8004baa:	4b23      	ldr	r3, [pc, #140]	; (8004c38 <__ieee754_rem_pio2+0x410>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	f7fb fccf 	bl	8000550 <__aeabi_dmul>
 8004bb2:	460f      	mov	r7, r1
 8004bb4:	4606      	mov	r6, r0
 8004bb6:	f7fb ff7b 	bl	8000ab0 <__aeabi_d2iz>
 8004bba:	f7fb fc5f 	bl	800047c <__aeabi_i2d>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	4639      	mov	r1, r7
 8004bc6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004bca:	f7fb fb09 	bl	80001e0 <__aeabi_dsub>
 8004bce:	4b1a      	ldr	r3, [pc, #104]	; (8004c38 <__ieee754_rem_pio2+0x410>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f7fb fcbd 	bl	8000550 <__aeabi_dmul>
 8004bd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004bda:	ad04      	add	r5, sp, #16
 8004bdc:	f04f 0803 	mov.w	r8, #3
 8004be0:	46a9      	mov	r9, r5
 8004be2:	2600      	movs	r6, #0
 8004be4:	2700      	movs	r7, #0
 8004be6:	4632      	mov	r2, r6
 8004be8:	463b      	mov	r3, r7
 8004bea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004bee:	46c3      	mov	fp, r8
 8004bf0:	3d08      	subs	r5, #8
 8004bf2:	f108 38ff 	add.w	r8, r8, #4294967295
 8004bf6:	f7fb ff13 	bl	8000a20 <__aeabi_dcmpeq>
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	d1f3      	bne.n	8004be6 <__ieee754_rem_pio2+0x3be>
 8004bfe:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <__ieee754_rem_pio2+0x414>)
 8004c00:	9301      	str	r3, [sp, #4]
 8004c02:	2302      	movs	r3, #2
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	4622      	mov	r2, r4
 8004c08:	465b      	mov	r3, fp
 8004c0a:	4651      	mov	r1, sl
 8004c0c:	4648      	mov	r0, r9
 8004c0e:	f000 f993 	bl	8004f38 <__kernel_rem_pio2>
 8004c12:	9b02      	ldr	r3, [sp, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	4683      	mov	fp, r0
 8004c18:	f6bf ae46 	bge.w	80048a8 <__ieee754_rem_pio2+0x80>
 8004c1c:	e9da 2100 	ldrd	r2, r1, [sl]
 8004c20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c24:	e9ca 2300 	strd	r2, r3, [sl]
 8004c28:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004c2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c30:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004c34:	e73a      	b.n	8004aac <__ieee754_rem_pio2+0x284>
 8004c36:	bf00      	nop
 8004c38:	41700000 	.word	0x41700000
 8004c3c:	08005a28 	.word	0x08005a28

08004c40 <__ieee754_sqrt>:
 8004c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c44:	ec55 4b10 	vmov	r4, r5, d0
 8004c48:	4e55      	ldr	r6, [pc, #340]	; (8004da0 <__ieee754_sqrt+0x160>)
 8004c4a:	43ae      	bics	r6, r5
 8004c4c:	ee10 0a10 	vmov	r0, s0
 8004c50:	ee10 3a10 	vmov	r3, s0
 8004c54:	462a      	mov	r2, r5
 8004c56:	4629      	mov	r1, r5
 8004c58:	d110      	bne.n	8004c7c <__ieee754_sqrt+0x3c>
 8004c5a:	ee10 2a10 	vmov	r2, s0
 8004c5e:	462b      	mov	r3, r5
 8004c60:	f7fb fc76 	bl	8000550 <__aeabi_dmul>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4620      	mov	r0, r4
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	f7fb faba 	bl	80001e4 <__adddf3>
 8004c70:	4604      	mov	r4, r0
 8004c72:	460d      	mov	r5, r1
 8004c74:	ec45 4b10 	vmov	d0, r4, r5
 8004c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c7c:	2d00      	cmp	r5, #0
 8004c7e:	dc10      	bgt.n	8004ca2 <__ieee754_sqrt+0x62>
 8004c80:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004c84:	4330      	orrs	r0, r6
 8004c86:	d0f5      	beq.n	8004c74 <__ieee754_sqrt+0x34>
 8004c88:	b15d      	cbz	r5, 8004ca2 <__ieee754_sqrt+0x62>
 8004c8a:	ee10 2a10 	vmov	r2, s0
 8004c8e:	462b      	mov	r3, r5
 8004c90:	ee10 0a10 	vmov	r0, s0
 8004c94:	f7fb faa4 	bl	80001e0 <__aeabi_dsub>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	f7fb fd82 	bl	80007a4 <__aeabi_ddiv>
 8004ca0:	e7e6      	b.n	8004c70 <__ieee754_sqrt+0x30>
 8004ca2:	1512      	asrs	r2, r2, #20
 8004ca4:	d074      	beq.n	8004d90 <__ieee754_sqrt+0x150>
 8004ca6:	07d4      	lsls	r4, r2, #31
 8004ca8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004cac:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004cb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004cb4:	bf5e      	ittt	pl
 8004cb6:	0fda      	lsrpl	r2, r3, #31
 8004cb8:	005b      	lslpl	r3, r3, #1
 8004cba:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004cbe:	2400      	movs	r4, #0
 8004cc0:	0fda      	lsrs	r2, r3, #31
 8004cc2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004cc6:	107f      	asrs	r7, r7, #1
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	2516      	movs	r5, #22
 8004ccc:	4620      	mov	r0, r4
 8004cce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004cd2:	1886      	adds	r6, r0, r2
 8004cd4:	428e      	cmp	r6, r1
 8004cd6:	bfde      	ittt	le
 8004cd8:	1b89      	suble	r1, r1, r6
 8004cda:	18b0      	addle	r0, r6, r2
 8004cdc:	18a4      	addle	r4, r4, r2
 8004cde:	0049      	lsls	r1, r1, #1
 8004ce0:	3d01      	subs	r5, #1
 8004ce2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004ce6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004cea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004cee:	d1f0      	bne.n	8004cd2 <__ieee754_sqrt+0x92>
 8004cf0:	462a      	mov	r2, r5
 8004cf2:	f04f 0e20 	mov.w	lr, #32
 8004cf6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004cfa:	4281      	cmp	r1, r0
 8004cfc:	eb06 0c05 	add.w	ip, r6, r5
 8004d00:	dc02      	bgt.n	8004d08 <__ieee754_sqrt+0xc8>
 8004d02:	d113      	bne.n	8004d2c <__ieee754_sqrt+0xec>
 8004d04:	459c      	cmp	ip, r3
 8004d06:	d811      	bhi.n	8004d2c <__ieee754_sqrt+0xec>
 8004d08:	f1bc 0f00 	cmp.w	ip, #0
 8004d0c:	eb0c 0506 	add.w	r5, ip, r6
 8004d10:	da43      	bge.n	8004d9a <__ieee754_sqrt+0x15a>
 8004d12:	2d00      	cmp	r5, #0
 8004d14:	db41      	blt.n	8004d9a <__ieee754_sqrt+0x15a>
 8004d16:	f100 0801 	add.w	r8, r0, #1
 8004d1a:	1a09      	subs	r1, r1, r0
 8004d1c:	459c      	cmp	ip, r3
 8004d1e:	bf88      	it	hi
 8004d20:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004d24:	eba3 030c 	sub.w	r3, r3, ip
 8004d28:	4432      	add	r2, r6
 8004d2a:	4640      	mov	r0, r8
 8004d2c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004d30:	f1be 0e01 	subs.w	lr, lr, #1
 8004d34:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8004d38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d3c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004d40:	d1db      	bne.n	8004cfa <__ieee754_sqrt+0xba>
 8004d42:	430b      	orrs	r3, r1
 8004d44:	d006      	beq.n	8004d54 <__ieee754_sqrt+0x114>
 8004d46:	1c50      	adds	r0, r2, #1
 8004d48:	bf13      	iteet	ne
 8004d4a:	3201      	addne	r2, #1
 8004d4c:	3401      	addeq	r4, #1
 8004d4e:	4672      	moveq	r2, lr
 8004d50:	f022 0201 	bicne.w	r2, r2, #1
 8004d54:	1063      	asrs	r3, r4, #1
 8004d56:	0852      	lsrs	r2, r2, #1
 8004d58:	07e1      	lsls	r1, r4, #31
 8004d5a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004d5e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004d62:	bf48      	it	mi
 8004d64:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004d68:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004d6c:	4614      	mov	r4, r2
 8004d6e:	e781      	b.n	8004c74 <__ieee754_sqrt+0x34>
 8004d70:	0ad9      	lsrs	r1, r3, #11
 8004d72:	3815      	subs	r0, #21
 8004d74:	055b      	lsls	r3, r3, #21
 8004d76:	2900      	cmp	r1, #0
 8004d78:	d0fa      	beq.n	8004d70 <__ieee754_sqrt+0x130>
 8004d7a:	02cd      	lsls	r5, r1, #11
 8004d7c:	d50a      	bpl.n	8004d94 <__ieee754_sqrt+0x154>
 8004d7e:	f1c2 0420 	rsb	r4, r2, #32
 8004d82:	fa23 f404 	lsr.w	r4, r3, r4
 8004d86:	1e55      	subs	r5, r2, #1
 8004d88:	4093      	lsls	r3, r2
 8004d8a:	4321      	orrs	r1, r4
 8004d8c:	1b42      	subs	r2, r0, r5
 8004d8e:	e78a      	b.n	8004ca6 <__ieee754_sqrt+0x66>
 8004d90:	4610      	mov	r0, r2
 8004d92:	e7f0      	b.n	8004d76 <__ieee754_sqrt+0x136>
 8004d94:	0049      	lsls	r1, r1, #1
 8004d96:	3201      	adds	r2, #1
 8004d98:	e7ef      	b.n	8004d7a <__ieee754_sqrt+0x13a>
 8004d9a:	4680      	mov	r8, r0
 8004d9c:	e7bd      	b.n	8004d1a <__ieee754_sqrt+0xda>
 8004d9e:	bf00      	nop
 8004da0:	7ff00000 	.word	0x7ff00000
 8004da4:	00000000 	.word	0x00000000

08004da8 <__kernel_cos>:
 8004da8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dac:	ec57 6b10 	vmov	r6, r7, d0
 8004db0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004db4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004db8:	ed8d 1b00 	vstr	d1, [sp]
 8004dbc:	da07      	bge.n	8004dce <__kernel_cos+0x26>
 8004dbe:	ee10 0a10 	vmov	r0, s0
 8004dc2:	4639      	mov	r1, r7
 8004dc4:	f7fb fe74 	bl	8000ab0 <__aeabi_d2iz>
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	f000 8088 	beq.w	8004ede <__kernel_cos+0x136>
 8004dce:	4632      	mov	r2, r6
 8004dd0:	463b      	mov	r3, r7
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	4639      	mov	r1, r7
 8004dd6:	f7fb fbbb 	bl	8000550 <__aeabi_dmul>
 8004dda:	4b51      	ldr	r3, [pc, #324]	; (8004f20 <__kernel_cos+0x178>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	4604      	mov	r4, r0
 8004de0:	460d      	mov	r5, r1
 8004de2:	f7fb fbb5 	bl	8000550 <__aeabi_dmul>
 8004de6:	a340      	add	r3, pc, #256	; (adr r3, 8004ee8 <__kernel_cos+0x140>)
 8004de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dec:	4682      	mov	sl, r0
 8004dee:	468b      	mov	fp, r1
 8004df0:	4620      	mov	r0, r4
 8004df2:	4629      	mov	r1, r5
 8004df4:	f7fb fbac 	bl	8000550 <__aeabi_dmul>
 8004df8:	a33d      	add	r3, pc, #244	; (adr r3, 8004ef0 <__kernel_cos+0x148>)
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	f7fb f9f1 	bl	80001e4 <__adddf3>
 8004e02:	4622      	mov	r2, r4
 8004e04:	462b      	mov	r3, r5
 8004e06:	f7fb fba3 	bl	8000550 <__aeabi_dmul>
 8004e0a:	a33b      	add	r3, pc, #236	; (adr r3, 8004ef8 <__kernel_cos+0x150>)
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	f7fb f9e6 	bl	80001e0 <__aeabi_dsub>
 8004e14:	4622      	mov	r2, r4
 8004e16:	462b      	mov	r3, r5
 8004e18:	f7fb fb9a 	bl	8000550 <__aeabi_dmul>
 8004e1c:	a338      	add	r3, pc, #224	; (adr r3, 8004f00 <__kernel_cos+0x158>)
 8004e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e22:	f7fb f9df 	bl	80001e4 <__adddf3>
 8004e26:	4622      	mov	r2, r4
 8004e28:	462b      	mov	r3, r5
 8004e2a:	f7fb fb91 	bl	8000550 <__aeabi_dmul>
 8004e2e:	a336      	add	r3, pc, #216	; (adr r3, 8004f08 <__kernel_cos+0x160>)
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	f7fb f9d4 	bl	80001e0 <__aeabi_dsub>
 8004e38:	4622      	mov	r2, r4
 8004e3a:	462b      	mov	r3, r5
 8004e3c:	f7fb fb88 	bl	8000550 <__aeabi_dmul>
 8004e40:	a333      	add	r3, pc, #204	; (adr r3, 8004f10 <__kernel_cos+0x168>)
 8004e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e46:	f7fb f9cd 	bl	80001e4 <__adddf3>
 8004e4a:	4622      	mov	r2, r4
 8004e4c:	462b      	mov	r3, r5
 8004e4e:	f7fb fb7f 	bl	8000550 <__aeabi_dmul>
 8004e52:	4622      	mov	r2, r4
 8004e54:	462b      	mov	r3, r5
 8004e56:	f7fb fb7b 	bl	8000550 <__aeabi_dmul>
 8004e5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e5e:	4604      	mov	r4, r0
 8004e60:	460d      	mov	r5, r1
 8004e62:	4630      	mov	r0, r6
 8004e64:	4639      	mov	r1, r7
 8004e66:	f7fb fb73 	bl	8000550 <__aeabi_dmul>
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	4629      	mov	r1, r5
 8004e70:	4620      	mov	r0, r4
 8004e72:	f7fb f9b5 	bl	80001e0 <__aeabi_dsub>
 8004e76:	4b2b      	ldr	r3, [pc, #172]	; (8004f24 <__kernel_cos+0x17c>)
 8004e78:	4598      	cmp	r8, r3
 8004e7a:	4606      	mov	r6, r0
 8004e7c:	460f      	mov	r7, r1
 8004e7e:	dc10      	bgt.n	8004ea2 <__kernel_cos+0xfa>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4650      	mov	r0, sl
 8004e86:	4659      	mov	r1, fp
 8004e88:	f7fb f9aa 	bl	80001e0 <__aeabi_dsub>
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4926      	ldr	r1, [pc, #152]	; (8004f28 <__kernel_cos+0x180>)
 8004e90:	4602      	mov	r2, r0
 8004e92:	2000      	movs	r0, #0
 8004e94:	f7fb f9a4 	bl	80001e0 <__aeabi_dsub>
 8004e98:	ec41 0b10 	vmov	d0, r0, r1
 8004e9c:	b003      	add	sp, #12
 8004e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea2:	4b22      	ldr	r3, [pc, #136]	; (8004f2c <__kernel_cos+0x184>)
 8004ea4:	4920      	ldr	r1, [pc, #128]	; (8004f28 <__kernel_cos+0x180>)
 8004ea6:	4598      	cmp	r8, r3
 8004ea8:	bfcc      	ite	gt
 8004eaa:	4d21      	ldrgt	r5, [pc, #132]	; (8004f30 <__kernel_cos+0x188>)
 8004eac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004eb0:	2400      	movs	r4, #0
 8004eb2:	4622      	mov	r2, r4
 8004eb4:	462b      	mov	r3, r5
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	f7fb f992 	bl	80001e0 <__aeabi_dsub>
 8004ebc:	4622      	mov	r2, r4
 8004ebe:	4680      	mov	r8, r0
 8004ec0:	4689      	mov	r9, r1
 8004ec2:	462b      	mov	r3, r5
 8004ec4:	4650      	mov	r0, sl
 8004ec6:	4659      	mov	r1, fp
 8004ec8:	f7fb f98a 	bl	80001e0 <__aeabi_dsub>
 8004ecc:	4632      	mov	r2, r6
 8004ece:	463b      	mov	r3, r7
 8004ed0:	f7fb f986 	bl	80001e0 <__aeabi_dsub>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4640      	mov	r0, r8
 8004eda:	4649      	mov	r1, r9
 8004edc:	e7da      	b.n	8004e94 <__kernel_cos+0xec>
 8004ede:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004f18 <__kernel_cos+0x170>
 8004ee2:	e7db      	b.n	8004e9c <__kernel_cos+0xf4>
 8004ee4:	f3af 8000 	nop.w
 8004ee8:	be8838d4 	.word	0xbe8838d4
 8004eec:	bda8fae9 	.word	0xbda8fae9
 8004ef0:	bdb4b1c4 	.word	0xbdb4b1c4
 8004ef4:	3e21ee9e 	.word	0x3e21ee9e
 8004ef8:	809c52ad 	.word	0x809c52ad
 8004efc:	3e927e4f 	.word	0x3e927e4f
 8004f00:	19cb1590 	.word	0x19cb1590
 8004f04:	3efa01a0 	.word	0x3efa01a0
 8004f08:	16c15177 	.word	0x16c15177
 8004f0c:	3f56c16c 	.word	0x3f56c16c
 8004f10:	5555554c 	.word	0x5555554c
 8004f14:	3fa55555 	.word	0x3fa55555
 8004f18:	00000000 	.word	0x00000000
 8004f1c:	3ff00000 	.word	0x3ff00000
 8004f20:	3fe00000 	.word	0x3fe00000
 8004f24:	3fd33332 	.word	0x3fd33332
 8004f28:	3ff00000 	.word	0x3ff00000
 8004f2c:	3fe90000 	.word	0x3fe90000
 8004f30:	3fd20000 	.word	0x3fd20000
 8004f34:	00000000 	.word	0x00000000

08004f38 <__kernel_rem_pio2>:
 8004f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f3c:	ed2d 8b02 	vpush	{d8}
 8004f40:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004f44:	f112 0f14 	cmn.w	r2, #20
 8004f48:	9308      	str	r3, [sp, #32]
 8004f4a:	9101      	str	r1, [sp, #4]
 8004f4c:	4bc4      	ldr	r3, [pc, #784]	; (8005260 <__kernel_rem_pio2+0x328>)
 8004f4e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004f50:	900b      	str	r0, [sp, #44]	; 0x2c
 8004f52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004f56:	9302      	str	r3, [sp, #8]
 8004f58:	9b08      	ldr	r3, [sp, #32]
 8004f5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f5e:	bfa8      	it	ge
 8004f60:	1ed4      	subge	r4, r2, #3
 8004f62:	9306      	str	r3, [sp, #24]
 8004f64:	bfb2      	itee	lt
 8004f66:	2400      	movlt	r4, #0
 8004f68:	2318      	movge	r3, #24
 8004f6a:	fb94 f4f3 	sdivge	r4, r4, r3
 8004f6e:	f06f 0317 	mvn.w	r3, #23
 8004f72:	fb04 3303 	mla	r3, r4, r3, r3
 8004f76:	eb03 0a02 	add.w	sl, r3, r2
 8004f7a:	9b02      	ldr	r3, [sp, #8]
 8004f7c:	9a06      	ldr	r2, [sp, #24]
 8004f7e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005250 <__kernel_rem_pio2+0x318>
 8004f82:	eb03 0802 	add.w	r8, r3, r2
 8004f86:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004f88:	1aa7      	subs	r7, r4, r2
 8004f8a:	ae22      	add	r6, sp, #136	; 0x88
 8004f8c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004f90:	2500      	movs	r5, #0
 8004f92:	4545      	cmp	r5, r8
 8004f94:	dd13      	ble.n	8004fbe <__kernel_rem_pio2+0x86>
 8004f96:	9b08      	ldr	r3, [sp, #32]
 8004f98:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8005250 <__kernel_rem_pio2+0x318>
 8004f9c:	aa22      	add	r2, sp, #136	; 0x88
 8004f9e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004fa2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8004fa6:	f04f 0800 	mov.w	r8, #0
 8004faa:	9b02      	ldr	r3, [sp, #8]
 8004fac:	4598      	cmp	r8, r3
 8004fae:	dc2f      	bgt.n	8005010 <__kernel_rem_pio2+0xd8>
 8004fb0:	ed8d 8b04 	vstr	d8, [sp, #16]
 8004fb4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004fb8:	462f      	mov	r7, r5
 8004fba:	2600      	movs	r6, #0
 8004fbc:	e01b      	b.n	8004ff6 <__kernel_rem_pio2+0xbe>
 8004fbe:	42ef      	cmn	r7, r5
 8004fc0:	d407      	bmi.n	8004fd2 <__kernel_rem_pio2+0x9a>
 8004fc2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004fc6:	f7fb fa59 	bl	800047c <__aeabi_i2d>
 8004fca:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004fce:	3501      	adds	r5, #1
 8004fd0:	e7df      	b.n	8004f92 <__kernel_rem_pio2+0x5a>
 8004fd2:	ec51 0b18 	vmov	r0, r1, d8
 8004fd6:	e7f8      	b.n	8004fca <__kernel_rem_pio2+0x92>
 8004fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fdc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004fe0:	f7fb fab6 	bl	8000550 <__aeabi_dmul>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fec:	f7fb f8fa 	bl	80001e4 <__adddf3>
 8004ff0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ff4:	3601      	adds	r6, #1
 8004ff6:	9b06      	ldr	r3, [sp, #24]
 8004ff8:	429e      	cmp	r6, r3
 8004ffa:	f1a7 0708 	sub.w	r7, r7, #8
 8004ffe:	ddeb      	ble.n	8004fd8 <__kernel_rem_pio2+0xa0>
 8005000:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005004:	f108 0801 	add.w	r8, r8, #1
 8005008:	ecab 7b02 	vstmia	fp!, {d7}
 800500c:	3508      	adds	r5, #8
 800500e:	e7cc      	b.n	8004faa <__kernel_rem_pio2+0x72>
 8005010:	9b02      	ldr	r3, [sp, #8]
 8005012:	aa0e      	add	r2, sp, #56	; 0x38
 8005014:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005018:	930d      	str	r3, [sp, #52]	; 0x34
 800501a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800501c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005020:	9c02      	ldr	r4, [sp, #8]
 8005022:	930c      	str	r3, [sp, #48]	; 0x30
 8005024:	00e3      	lsls	r3, r4, #3
 8005026:	930a      	str	r3, [sp, #40]	; 0x28
 8005028:	ab9a      	add	r3, sp, #616	; 0x268
 800502a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800502e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005032:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8005036:	ab72      	add	r3, sp, #456	; 0x1c8
 8005038:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800503c:	46c3      	mov	fp, r8
 800503e:	46a1      	mov	r9, r4
 8005040:	f1b9 0f00 	cmp.w	r9, #0
 8005044:	f1a5 0508 	sub.w	r5, r5, #8
 8005048:	dc77      	bgt.n	800513a <__kernel_rem_pio2+0x202>
 800504a:	ec47 6b10 	vmov	d0, r6, r7
 800504e:	4650      	mov	r0, sl
 8005050:	f000 fc0a 	bl	8005868 <scalbn>
 8005054:	ec57 6b10 	vmov	r6, r7, d0
 8005058:	2200      	movs	r2, #0
 800505a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800505e:	ee10 0a10 	vmov	r0, s0
 8005062:	4639      	mov	r1, r7
 8005064:	f7fb fa74 	bl	8000550 <__aeabi_dmul>
 8005068:	ec41 0b10 	vmov	d0, r0, r1
 800506c:	f000 fb7c 	bl	8005768 <floor>
 8005070:	4b7c      	ldr	r3, [pc, #496]	; (8005264 <__kernel_rem_pio2+0x32c>)
 8005072:	ec51 0b10 	vmov	r0, r1, d0
 8005076:	2200      	movs	r2, #0
 8005078:	f7fb fa6a 	bl	8000550 <__aeabi_dmul>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4630      	mov	r0, r6
 8005082:	4639      	mov	r1, r7
 8005084:	f7fb f8ac 	bl	80001e0 <__aeabi_dsub>
 8005088:	460f      	mov	r7, r1
 800508a:	4606      	mov	r6, r0
 800508c:	f7fb fd10 	bl	8000ab0 <__aeabi_d2iz>
 8005090:	9004      	str	r0, [sp, #16]
 8005092:	f7fb f9f3 	bl	800047c <__aeabi_i2d>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	4630      	mov	r0, r6
 800509c:	4639      	mov	r1, r7
 800509e:	f7fb f89f 	bl	80001e0 <__aeabi_dsub>
 80050a2:	f1ba 0f00 	cmp.w	sl, #0
 80050a6:	4606      	mov	r6, r0
 80050a8:	460f      	mov	r7, r1
 80050aa:	dd6d      	ble.n	8005188 <__kernel_rem_pio2+0x250>
 80050ac:	1e62      	subs	r2, r4, #1
 80050ae:	ab0e      	add	r3, sp, #56	; 0x38
 80050b0:	9d04      	ldr	r5, [sp, #16]
 80050b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80050b6:	f1ca 0118 	rsb	r1, sl, #24
 80050ba:	fa40 f301 	asr.w	r3, r0, r1
 80050be:	441d      	add	r5, r3
 80050c0:	408b      	lsls	r3, r1
 80050c2:	1ac0      	subs	r0, r0, r3
 80050c4:	ab0e      	add	r3, sp, #56	; 0x38
 80050c6:	9504      	str	r5, [sp, #16]
 80050c8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80050cc:	f1ca 0317 	rsb	r3, sl, #23
 80050d0:	fa40 fb03 	asr.w	fp, r0, r3
 80050d4:	f1bb 0f00 	cmp.w	fp, #0
 80050d8:	dd65      	ble.n	80051a6 <__kernel_rem_pio2+0x26e>
 80050da:	9b04      	ldr	r3, [sp, #16]
 80050dc:	2200      	movs	r2, #0
 80050de:	3301      	adds	r3, #1
 80050e0:	9304      	str	r3, [sp, #16]
 80050e2:	4615      	mov	r5, r2
 80050e4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80050e8:	4294      	cmp	r4, r2
 80050ea:	f300 809c 	bgt.w	8005226 <__kernel_rem_pio2+0x2ee>
 80050ee:	f1ba 0f00 	cmp.w	sl, #0
 80050f2:	dd07      	ble.n	8005104 <__kernel_rem_pio2+0x1cc>
 80050f4:	f1ba 0f01 	cmp.w	sl, #1
 80050f8:	f000 80c0 	beq.w	800527c <__kernel_rem_pio2+0x344>
 80050fc:	f1ba 0f02 	cmp.w	sl, #2
 8005100:	f000 80c6 	beq.w	8005290 <__kernel_rem_pio2+0x358>
 8005104:	f1bb 0f02 	cmp.w	fp, #2
 8005108:	d14d      	bne.n	80051a6 <__kernel_rem_pio2+0x26e>
 800510a:	4632      	mov	r2, r6
 800510c:	463b      	mov	r3, r7
 800510e:	4956      	ldr	r1, [pc, #344]	; (8005268 <__kernel_rem_pio2+0x330>)
 8005110:	2000      	movs	r0, #0
 8005112:	f7fb f865 	bl	80001e0 <__aeabi_dsub>
 8005116:	4606      	mov	r6, r0
 8005118:	460f      	mov	r7, r1
 800511a:	2d00      	cmp	r5, #0
 800511c:	d043      	beq.n	80051a6 <__kernel_rem_pio2+0x26e>
 800511e:	4650      	mov	r0, sl
 8005120:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8005258 <__kernel_rem_pio2+0x320>
 8005124:	f000 fba0 	bl	8005868 <scalbn>
 8005128:	4630      	mov	r0, r6
 800512a:	4639      	mov	r1, r7
 800512c:	ec53 2b10 	vmov	r2, r3, d0
 8005130:	f7fb f856 	bl	80001e0 <__aeabi_dsub>
 8005134:	4606      	mov	r6, r0
 8005136:	460f      	mov	r7, r1
 8005138:	e035      	b.n	80051a6 <__kernel_rem_pio2+0x26e>
 800513a:	4b4c      	ldr	r3, [pc, #304]	; (800526c <__kernel_rem_pio2+0x334>)
 800513c:	2200      	movs	r2, #0
 800513e:	4630      	mov	r0, r6
 8005140:	4639      	mov	r1, r7
 8005142:	f7fb fa05 	bl	8000550 <__aeabi_dmul>
 8005146:	f7fb fcb3 	bl	8000ab0 <__aeabi_d2iz>
 800514a:	f7fb f997 	bl	800047c <__aeabi_i2d>
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	ec43 2b18 	vmov	d8, r2, r3
 8005156:	4b46      	ldr	r3, [pc, #280]	; (8005270 <__kernel_rem_pio2+0x338>)
 8005158:	2200      	movs	r2, #0
 800515a:	f7fb f9f9 	bl	8000550 <__aeabi_dmul>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4630      	mov	r0, r6
 8005164:	4639      	mov	r1, r7
 8005166:	f7fb f83b 	bl	80001e0 <__aeabi_dsub>
 800516a:	f7fb fca1 	bl	8000ab0 <__aeabi_d2iz>
 800516e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005172:	f84b 0b04 	str.w	r0, [fp], #4
 8005176:	ec51 0b18 	vmov	r0, r1, d8
 800517a:	f7fb f833 	bl	80001e4 <__adddf3>
 800517e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005182:	4606      	mov	r6, r0
 8005184:	460f      	mov	r7, r1
 8005186:	e75b      	b.n	8005040 <__kernel_rem_pio2+0x108>
 8005188:	d106      	bne.n	8005198 <__kernel_rem_pio2+0x260>
 800518a:	1e63      	subs	r3, r4, #1
 800518c:	aa0e      	add	r2, sp, #56	; 0x38
 800518e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005192:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8005196:	e79d      	b.n	80050d4 <__kernel_rem_pio2+0x19c>
 8005198:	4b36      	ldr	r3, [pc, #216]	; (8005274 <__kernel_rem_pio2+0x33c>)
 800519a:	2200      	movs	r2, #0
 800519c:	f7fb fc5e 	bl	8000a5c <__aeabi_dcmpge>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	d13d      	bne.n	8005220 <__kernel_rem_pio2+0x2e8>
 80051a4:	4683      	mov	fp, r0
 80051a6:	2200      	movs	r2, #0
 80051a8:	2300      	movs	r3, #0
 80051aa:	4630      	mov	r0, r6
 80051ac:	4639      	mov	r1, r7
 80051ae:	f7fb fc37 	bl	8000a20 <__aeabi_dcmpeq>
 80051b2:	2800      	cmp	r0, #0
 80051b4:	f000 80c0 	beq.w	8005338 <__kernel_rem_pio2+0x400>
 80051b8:	1e65      	subs	r5, r4, #1
 80051ba:	462b      	mov	r3, r5
 80051bc:	2200      	movs	r2, #0
 80051be:	9902      	ldr	r1, [sp, #8]
 80051c0:	428b      	cmp	r3, r1
 80051c2:	da6c      	bge.n	800529e <__kernel_rem_pio2+0x366>
 80051c4:	2a00      	cmp	r2, #0
 80051c6:	f000 8089 	beq.w	80052dc <__kernel_rem_pio2+0x3a4>
 80051ca:	ab0e      	add	r3, sp, #56	; 0x38
 80051cc:	f1aa 0a18 	sub.w	sl, sl, #24
 80051d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 80ad 	beq.w	8005334 <__kernel_rem_pio2+0x3fc>
 80051da:	4650      	mov	r0, sl
 80051dc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8005258 <__kernel_rem_pio2+0x320>
 80051e0:	f000 fb42 	bl	8005868 <scalbn>
 80051e4:	ab9a      	add	r3, sp, #616	; 0x268
 80051e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80051ea:	ec57 6b10 	vmov	r6, r7, d0
 80051ee:	00ec      	lsls	r4, r5, #3
 80051f0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80051f4:	46aa      	mov	sl, r5
 80051f6:	f1ba 0f00 	cmp.w	sl, #0
 80051fa:	f280 80d6 	bge.w	80053aa <__kernel_rem_pio2+0x472>
 80051fe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8005250 <__kernel_rem_pio2+0x318>
 8005202:	462e      	mov	r6, r5
 8005204:	2e00      	cmp	r6, #0
 8005206:	f2c0 8104 	blt.w	8005412 <__kernel_rem_pio2+0x4da>
 800520a:	ab72      	add	r3, sp, #456	; 0x1c8
 800520c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8005210:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005278 <__kernel_rem_pio2+0x340>
 8005214:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005218:	f04f 0800 	mov.w	r8, #0
 800521c:	1baf      	subs	r7, r5, r6
 800521e:	e0ea      	b.n	80053f6 <__kernel_rem_pio2+0x4be>
 8005220:	f04f 0b02 	mov.w	fp, #2
 8005224:	e759      	b.n	80050da <__kernel_rem_pio2+0x1a2>
 8005226:	f8d8 3000 	ldr.w	r3, [r8]
 800522a:	b955      	cbnz	r5, 8005242 <__kernel_rem_pio2+0x30a>
 800522c:	b123      	cbz	r3, 8005238 <__kernel_rem_pio2+0x300>
 800522e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005232:	f8c8 3000 	str.w	r3, [r8]
 8005236:	2301      	movs	r3, #1
 8005238:	3201      	adds	r2, #1
 800523a:	f108 0804 	add.w	r8, r8, #4
 800523e:	461d      	mov	r5, r3
 8005240:	e752      	b.n	80050e8 <__kernel_rem_pio2+0x1b0>
 8005242:	1acb      	subs	r3, r1, r3
 8005244:	f8c8 3000 	str.w	r3, [r8]
 8005248:	462b      	mov	r3, r5
 800524a:	e7f5      	b.n	8005238 <__kernel_rem_pio2+0x300>
 800524c:	f3af 8000 	nop.w
	...
 800525c:	3ff00000 	.word	0x3ff00000
 8005260:	08005b70 	.word	0x08005b70
 8005264:	40200000 	.word	0x40200000
 8005268:	3ff00000 	.word	0x3ff00000
 800526c:	3e700000 	.word	0x3e700000
 8005270:	41700000 	.word	0x41700000
 8005274:	3fe00000 	.word	0x3fe00000
 8005278:	08005b30 	.word	0x08005b30
 800527c:	1e62      	subs	r2, r4, #1
 800527e:	ab0e      	add	r3, sp, #56	; 0x38
 8005280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005284:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005288:	a90e      	add	r1, sp, #56	; 0x38
 800528a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800528e:	e739      	b.n	8005104 <__kernel_rem_pio2+0x1cc>
 8005290:	1e62      	subs	r2, r4, #1
 8005292:	ab0e      	add	r3, sp, #56	; 0x38
 8005294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005298:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800529c:	e7f4      	b.n	8005288 <__kernel_rem_pio2+0x350>
 800529e:	a90e      	add	r1, sp, #56	; 0x38
 80052a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	430a      	orrs	r2, r1
 80052a8:	e789      	b.n	80051be <__kernel_rem_pio2+0x286>
 80052aa:	3301      	adds	r3, #1
 80052ac:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80052b0:	2900      	cmp	r1, #0
 80052b2:	d0fa      	beq.n	80052aa <__kernel_rem_pio2+0x372>
 80052b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052b6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80052ba:	446a      	add	r2, sp
 80052bc:	3a98      	subs	r2, #152	; 0x98
 80052be:	920a      	str	r2, [sp, #40]	; 0x28
 80052c0:	9a08      	ldr	r2, [sp, #32]
 80052c2:	18e3      	adds	r3, r4, r3
 80052c4:	18a5      	adds	r5, r4, r2
 80052c6:	aa22      	add	r2, sp, #136	; 0x88
 80052c8:	f104 0801 	add.w	r8, r4, #1
 80052cc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80052d0:	9304      	str	r3, [sp, #16]
 80052d2:	9b04      	ldr	r3, [sp, #16]
 80052d4:	4543      	cmp	r3, r8
 80052d6:	da04      	bge.n	80052e2 <__kernel_rem_pio2+0x3aa>
 80052d8:	461c      	mov	r4, r3
 80052da:	e6a3      	b.n	8005024 <__kernel_rem_pio2+0xec>
 80052dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80052de:	2301      	movs	r3, #1
 80052e0:	e7e4      	b.n	80052ac <__kernel_rem_pio2+0x374>
 80052e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052e4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80052e8:	f7fb f8c8 	bl	800047c <__aeabi_i2d>
 80052ec:	e8e5 0102 	strd	r0, r1, [r5], #8
 80052f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052f2:	46ab      	mov	fp, r5
 80052f4:	461c      	mov	r4, r3
 80052f6:	f04f 0900 	mov.w	r9, #0
 80052fa:	2600      	movs	r6, #0
 80052fc:	2700      	movs	r7, #0
 80052fe:	9b06      	ldr	r3, [sp, #24]
 8005300:	4599      	cmp	r9, r3
 8005302:	dd06      	ble.n	8005312 <__kernel_rem_pio2+0x3da>
 8005304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005306:	e8e3 6702 	strd	r6, r7, [r3], #8
 800530a:	f108 0801 	add.w	r8, r8, #1
 800530e:	930a      	str	r3, [sp, #40]	; 0x28
 8005310:	e7df      	b.n	80052d2 <__kernel_rem_pio2+0x39a>
 8005312:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005316:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800531a:	f7fb f919 	bl	8000550 <__aeabi_dmul>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4630      	mov	r0, r6
 8005324:	4639      	mov	r1, r7
 8005326:	f7fa ff5d 	bl	80001e4 <__adddf3>
 800532a:	f109 0901 	add.w	r9, r9, #1
 800532e:	4606      	mov	r6, r0
 8005330:	460f      	mov	r7, r1
 8005332:	e7e4      	b.n	80052fe <__kernel_rem_pio2+0x3c6>
 8005334:	3d01      	subs	r5, #1
 8005336:	e748      	b.n	80051ca <__kernel_rem_pio2+0x292>
 8005338:	ec47 6b10 	vmov	d0, r6, r7
 800533c:	f1ca 0000 	rsb	r0, sl, #0
 8005340:	f000 fa92 	bl	8005868 <scalbn>
 8005344:	ec57 6b10 	vmov	r6, r7, d0
 8005348:	4ba0      	ldr	r3, [pc, #640]	; (80055cc <__kernel_rem_pio2+0x694>)
 800534a:	ee10 0a10 	vmov	r0, s0
 800534e:	2200      	movs	r2, #0
 8005350:	4639      	mov	r1, r7
 8005352:	f7fb fb83 	bl	8000a5c <__aeabi_dcmpge>
 8005356:	b1f8      	cbz	r0, 8005398 <__kernel_rem_pio2+0x460>
 8005358:	4b9d      	ldr	r3, [pc, #628]	; (80055d0 <__kernel_rem_pio2+0x698>)
 800535a:	2200      	movs	r2, #0
 800535c:	4630      	mov	r0, r6
 800535e:	4639      	mov	r1, r7
 8005360:	f7fb f8f6 	bl	8000550 <__aeabi_dmul>
 8005364:	f7fb fba4 	bl	8000ab0 <__aeabi_d2iz>
 8005368:	4680      	mov	r8, r0
 800536a:	f7fb f887 	bl	800047c <__aeabi_i2d>
 800536e:	4b97      	ldr	r3, [pc, #604]	; (80055cc <__kernel_rem_pio2+0x694>)
 8005370:	2200      	movs	r2, #0
 8005372:	f7fb f8ed 	bl	8000550 <__aeabi_dmul>
 8005376:	460b      	mov	r3, r1
 8005378:	4602      	mov	r2, r0
 800537a:	4639      	mov	r1, r7
 800537c:	4630      	mov	r0, r6
 800537e:	f7fa ff2f 	bl	80001e0 <__aeabi_dsub>
 8005382:	f7fb fb95 	bl	8000ab0 <__aeabi_d2iz>
 8005386:	1c65      	adds	r5, r4, #1
 8005388:	ab0e      	add	r3, sp, #56	; 0x38
 800538a:	f10a 0a18 	add.w	sl, sl, #24
 800538e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005392:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005396:	e720      	b.n	80051da <__kernel_rem_pio2+0x2a2>
 8005398:	4630      	mov	r0, r6
 800539a:	4639      	mov	r1, r7
 800539c:	f7fb fb88 	bl	8000ab0 <__aeabi_d2iz>
 80053a0:	ab0e      	add	r3, sp, #56	; 0x38
 80053a2:	4625      	mov	r5, r4
 80053a4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80053a8:	e717      	b.n	80051da <__kernel_rem_pio2+0x2a2>
 80053aa:	ab0e      	add	r3, sp, #56	; 0x38
 80053ac:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80053b0:	f7fb f864 	bl	800047c <__aeabi_i2d>
 80053b4:	4632      	mov	r2, r6
 80053b6:	463b      	mov	r3, r7
 80053b8:	f7fb f8ca 	bl	8000550 <__aeabi_dmul>
 80053bc:	4b84      	ldr	r3, [pc, #528]	; (80055d0 <__kernel_rem_pio2+0x698>)
 80053be:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80053c2:	2200      	movs	r2, #0
 80053c4:	4630      	mov	r0, r6
 80053c6:	4639      	mov	r1, r7
 80053c8:	f7fb f8c2 	bl	8000550 <__aeabi_dmul>
 80053cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053d0:	4606      	mov	r6, r0
 80053d2:	460f      	mov	r7, r1
 80053d4:	e70f      	b.n	80051f6 <__kernel_rem_pio2+0x2be>
 80053d6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80053da:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80053de:	f7fb f8b7 	bl	8000550 <__aeabi_dmul>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053ea:	f7fa fefb 	bl	80001e4 <__adddf3>
 80053ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80053f2:	f108 0801 	add.w	r8, r8, #1
 80053f6:	9b02      	ldr	r3, [sp, #8]
 80053f8:	4598      	cmp	r8, r3
 80053fa:	dc01      	bgt.n	8005400 <__kernel_rem_pio2+0x4c8>
 80053fc:	45b8      	cmp	r8, r7
 80053fe:	ddea      	ble.n	80053d6 <__kernel_rem_pio2+0x49e>
 8005400:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005404:	ab4a      	add	r3, sp, #296	; 0x128
 8005406:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800540a:	ed87 7b00 	vstr	d7, [r7]
 800540e:	3e01      	subs	r6, #1
 8005410:	e6f8      	b.n	8005204 <__kernel_rem_pio2+0x2cc>
 8005412:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005414:	2b02      	cmp	r3, #2
 8005416:	dc0b      	bgt.n	8005430 <__kernel_rem_pio2+0x4f8>
 8005418:	2b00      	cmp	r3, #0
 800541a:	dc35      	bgt.n	8005488 <__kernel_rem_pio2+0x550>
 800541c:	d059      	beq.n	80054d2 <__kernel_rem_pio2+0x59a>
 800541e:	9b04      	ldr	r3, [sp, #16]
 8005420:	f003 0007 	and.w	r0, r3, #7
 8005424:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005428:	ecbd 8b02 	vpop	{d8}
 800542c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005430:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005432:	2b03      	cmp	r3, #3
 8005434:	d1f3      	bne.n	800541e <__kernel_rem_pio2+0x4e6>
 8005436:	ab4a      	add	r3, sp, #296	; 0x128
 8005438:	4423      	add	r3, r4
 800543a:	9306      	str	r3, [sp, #24]
 800543c:	461c      	mov	r4, r3
 800543e:	469a      	mov	sl, r3
 8005440:	9502      	str	r5, [sp, #8]
 8005442:	9b02      	ldr	r3, [sp, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	f1aa 0a08 	sub.w	sl, sl, #8
 800544a:	dc6b      	bgt.n	8005524 <__kernel_rem_pio2+0x5ec>
 800544c:	46aa      	mov	sl, r5
 800544e:	f1ba 0f01 	cmp.w	sl, #1
 8005452:	f1a4 0408 	sub.w	r4, r4, #8
 8005456:	f300 8085 	bgt.w	8005564 <__kernel_rem_pio2+0x62c>
 800545a:	9c06      	ldr	r4, [sp, #24]
 800545c:	2000      	movs	r0, #0
 800545e:	3408      	adds	r4, #8
 8005460:	2100      	movs	r1, #0
 8005462:	2d01      	cmp	r5, #1
 8005464:	f300 809d 	bgt.w	80055a2 <__kernel_rem_pio2+0x66a>
 8005468:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800546c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005470:	f1bb 0f00 	cmp.w	fp, #0
 8005474:	f040 809b 	bne.w	80055ae <__kernel_rem_pio2+0x676>
 8005478:	9b01      	ldr	r3, [sp, #4]
 800547a:	e9c3 5600 	strd	r5, r6, [r3]
 800547e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005482:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005486:	e7ca      	b.n	800541e <__kernel_rem_pio2+0x4e6>
 8005488:	3408      	adds	r4, #8
 800548a:	ab4a      	add	r3, sp, #296	; 0x128
 800548c:	441c      	add	r4, r3
 800548e:	462e      	mov	r6, r5
 8005490:	2000      	movs	r0, #0
 8005492:	2100      	movs	r1, #0
 8005494:	2e00      	cmp	r6, #0
 8005496:	da36      	bge.n	8005506 <__kernel_rem_pio2+0x5ce>
 8005498:	f1bb 0f00 	cmp.w	fp, #0
 800549c:	d039      	beq.n	8005512 <__kernel_rem_pio2+0x5da>
 800549e:	4602      	mov	r2, r0
 80054a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054a4:	9c01      	ldr	r4, [sp, #4]
 80054a6:	e9c4 2300 	strd	r2, r3, [r4]
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80054b2:	f7fa fe95 	bl	80001e0 <__aeabi_dsub>
 80054b6:	ae4c      	add	r6, sp, #304	; 0x130
 80054b8:	2401      	movs	r4, #1
 80054ba:	42a5      	cmp	r5, r4
 80054bc:	da2c      	bge.n	8005518 <__kernel_rem_pio2+0x5e0>
 80054be:	f1bb 0f00 	cmp.w	fp, #0
 80054c2:	d002      	beq.n	80054ca <__kernel_rem_pio2+0x592>
 80054c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054c8:	4619      	mov	r1, r3
 80054ca:	9b01      	ldr	r3, [sp, #4]
 80054cc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80054d0:	e7a5      	b.n	800541e <__kernel_rem_pio2+0x4e6>
 80054d2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80054d6:	eb0d 0403 	add.w	r4, sp, r3
 80054da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80054de:	2000      	movs	r0, #0
 80054e0:	2100      	movs	r1, #0
 80054e2:	2d00      	cmp	r5, #0
 80054e4:	da09      	bge.n	80054fa <__kernel_rem_pio2+0x5c2>
 80054e6:	f1bb 0f00 	cmp.w	fp, #0
 80054ea:	d002      	beq.n	80054f2 <__kernel_rem_pio2+0x5ba>
 80054ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054f0:	4619      	mov	r1, r3
 80054f2:	9b01      	ldr	r3, [sp, #4]
 80054f4:	e9c3 0100 	strd	r0, r1, [r3]
 80054f8:	e791      	b.n	800541e <__kernel_rem_pio2+0x4e6>
 80054fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80054fe:	f7fa fe71 	bl	80001e4 <__adddf3>
 8005502:	3d01      	subs	r5, #1
 8005504:	e7ed      	b.n	80054e2 <__kernel_rem_pio2+0x5aa>
 8005506:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800550a:	f7fa fe6b 	bl	80001e4 <__adddf3>
 800550e:	3e01      	subs	r6, #1
 8005510:	e7c0      	b.n	8005494 <__kernel_rem_pio2+0x55c>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	e7c5      	b.n	80054a4 <__kernel_rem_pio2+0x56c>
 8005518:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800551c:	f7fa fe62 	bl	80001e4 <__adddf3>
 8005520:	3401      	adds	r4, #1
 8005522:	e7ca      	b.n	80054ba <__kernel_rem_pio2+0x582>
 8005524:	e9da 8900 	ldrd	r8, r9, [sl]
 8005528:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800552c:	9b02      	ldr	r3, [sp, #8]
 800552e:	3b01      	subs	r3, #1
 8005530:	9302      	str	r3, [sp, #8]
 8005532:	4632      	mov	r2, r6
 8005534:	463b      	mov	r3, r7
 8005536:	4640      	mov	r0, r8
 8005538:	4649      	mov	r1, r9
 800553a:	f7fa fe53 	bl	80001e4 <__adddf3>
 800553e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	4640      	mov	r0, r8
 8005548:	4649      	mov	r1, r9
 800554a:	f7fa fe49 	bl	80001e0 <__aeabi_dsub>
 800554e:	4632      	mov	r2, r6
 8005550:	463b      	mov	r3, r7
 8005552:	f7fa fe47 	bl	80001e4 <__adddf3>
 8005556:	ed9d 7b08 	vldr	d7, [sp, #32]
 800555a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800555e:	ed8a 7b00 	vstr	d7, [sl]
 8005562:	e76e      	b.n	8005442 <__kernel_rem_pio2+0x50a>
 8005564:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005568:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800556c:	4640      	mov	r0, r8
 800556e:	4632      	mov	r2, r6
 8005570:	463b      	mov	r3, r7
 8005572:	4649      	mov	r1, r9
 8005574:	f7fa fe36 	bl	80001e4 <__adddf3>
 8005578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4640      	mov	r0, r8
 8005582:	4649      	mov	r1, r9
 8005584:	f7fa fe2c 	bl	80001e0 <__aeabi_dsub>
 8005588:	4632      	mov	r2, r6
 800558a:	463b      	mov	r3, r7
 800558c:	f7fa fe2a 	bl	80001e4 <__adddf3>
 8005590:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005594:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005598:	ed84 7b00 	vstr	d7, [r4]
 800559c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055a0:	e755      	b.n	800544e <__kernel_rem_pio2+0x516>
 80055a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80055a6:	f7fa fe1d 	bl	80001e4 <__adddf3>
 80055aa:	3d01      	subs	r5, #1
 80055ac:	e759      	b.n	8005462 <__kernel_rem_pio2+0x52a>
 80055ae:	9b01      	ldr	r3, [sp, #4]
 80055b0:	9a01      	ldr	r2, [sp, #4]
 80055b2:	601d      	str	r5, [r3, #0]
 80055b4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80055b8:	605c      	str	r4, [r3, #4]
 80055ba:	609f      	str	r7, [r3, #8]
 80055bc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80055c0:	60d3      	str	r3, [r2, #12]
 80055c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055c6:	6110      	str	r0, [r2, #16]
 80055c8:	6153      	str	r3, [r2, #20]
 80055ca:	e728      	b.n	800541e <__kernel_rem_pio2+0x4e6>
 80055cc:	41700000 	.word	0x41700000
 80055d0:	3e700000 	.word	0x3e700000
 80055d4:	00000000 	.word	0x00000000

080055d8 <__kernel_sin>:
 80055d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055dc:	ed2d 8b04 	vpush	{d8-d9}
 80055e0:	eeb0 8a41 	vmov.f32	s16, s2
 80055e4:	eef0 8a61 	vmov.f32	s17, s3
 80055e8:	ec55 4b10 	vmov	r4, r5, d0
 80055ec:	b083      	sub	sp, #12
 80055ee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80055f2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80055f6:	9001      	str	r0, [sp, #4]
 80055f8:	da06      	bge.n	8005608 <__kernel_sin+0x30>
 80055fa:	ee10 0a10 	vmov	r0, s0
 80055fe:	4629      	mov	r1, r5
 8005600:	f7fb fa56 	bl	8000ab0 <__aeabi_d2iz>
 8005604:	2800      	cmp	r0, #0
 8005606:	d051      	beq.n	80056ac <__kernel_sin+0xd4>
 8005608:	4622      	mov	r2, r4
 800560a:	462b      	mov	r3, r5
 800560c:	4620      	mov	r0, r4
 800560e:	4629      	mov	r1, r5
 8005610:	f7fa ff9e 	bl	8000550 <__aeabi_dmul>
 8005614:	4682      	mov	sl, r0
 8005616:	468b      	mov	fp, r1
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4620      	mov	r0, r4
 800561e:	4629      	mov	r1, r5
 8005620:	f7fa ff96 	bl	8000550 <__aeabi_dmul>
 8005624:	a341      	add	r3, pc, #260	; (adr r3, 800572c <__kernel_sin+0x154>)
 8005626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562a:	4680      	mov	r8, r0
 800562c:	4689      	mov	r9, r1
 800562e:	4650      	mov	r0, sl
 8005630:	4659      	mov	r1, fp
 8005632:	f7fa ff8d 	bl	8000550 <__aeabi_dmul>
 8005636:	a33f      	add	r3, pc, #252	; (adr r3, 8005734 <__kernel_sin+0x15c>)
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f7fa fdd0 	bl	80001e0 <__aeabi_dsub>
 8005640:	4652      	mov	r2, sl
 8005642:	465b      	mov	r3, fp
 8005644:	f7fa ff84 	bl	8000550 <__aeabi_dmul>
 8005648:	a33c      	add	r3, pc, #240	; (adr r3, 800573c <__kernel_sin+0x164>)
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	f7fa fdc9 	bl	80001e4 <__adddf3>
 8005652:	4652      	mov	r2, sl
 8005654:	465b      	mov	r3, fp
 8005656:	f7fa ff7b 	bl	8000550 <__aeabi_dmul>
 800565a:	a33a      	add	r3, pc, #232	; (adr r3, 8005744 <__kernel_sin+0x16c>)
 800565c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005660:	f7fa fdbe 	bl	80001e0 <__aeabi_dsub>
 8005664:	4652      	mov	r2, sl
 8005666:	465b      	mov	r3, fp
 8005668:	f7fa ff72 	bl	8000550 <__aeabi_dmul>
 800566c:	a337      	add	r3, pc, #220	; (adr r3, 800574c <__kernel_sin+0x174>)
 800566e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005672:	f7fa fdb7 	bl	80001e4 <__adddf3>
 8005676:	9b01      	ldr	r3, [sp, #4]
 8005678:	4606      	mov	r6, r0
 800567a:	460f      	mov	r7, r1
 800567c:	b9eb      	cbnz	r3, 80056ba <__kernel_sin+0xe2>
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	4650      	mov	r0, sl
 8005684:	4659      	mov	r1, fp
 8005686:	f7fa ff63 	bl	8000550 <__aeabi_dmul>
 800568a:	a325      	add	r3, pc, #148	; (adr r3, 8005720 <__kernel_sin+0x148>)
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	f7fa fda6 	bl	80001e0 <__aeabi_dsub>
 8005694:	4642      	mov	r2, r8
 8005696:	464b      	mov	r3, r9
 8005698:	f7fa ff5a 	bl	8000550 <__aeabi_dmul>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4620      	mov	r0, r4
 80056a2:	4629      	mov	r1, r5
 80056a4:	f7fa fd9e 	bl	80001e4 <__adddf3>
 80056a8:	4604      	mov	r4, r0
 80056aa:	460d      	mov	r5, r1
 80056ac:	ec45 4b10 	vmov	d0, r4, r5
 80056b0:	b003      	add	sp, #12
 80056b2:	ecbd 8b04 	vpop	{d8-d9}
 80056b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ba:	4b1b      	ldr	r3, [pc, #108]	; (8005728 <__kernel_sin+0x150>)
 80056bc:	ec51 0b18 	vmov	r0, r1, d8
 80056c0:	2200      	movs	r2, #0
 80056c2:	f7fa ff45 	bl	8000550 <__aeabi_dmul>
 80056c6:	4632      	mov	r2, r6
 80056c8:	ec41 0b19 	vmov	d9, r0, r1
 80056cc:	463b      	mov	r3, r7
 80056ce:	4640      	mov	r0, r8
 80056d0:	4649      	mov	r1, r9
 80056d2:	f7fa ff3d 	bl	8000550 <__aeabi_dmul>
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	ec51 0b19 	vmov	r0, r1, d9
 80056de:	f7fa fd7f 	bl	80001e0 <__aeabi_dsub>
 80056e2:	4652      	mov	r2, sl
 80056e4:	465b      	mov	r3, fp
 80056e6:	f7fa ff33 	bl	8000550 <__aeabi_dmul>
 80056ea:	ec53 2b18 	vmov	r2, r3, d8
 80056ee:	f7fa fd77 	bl	80001e0 <__aeabi_dsub>
 80056f2:	a30b      	add	r3, pc, #44	; (adr r3, 8005720 <__kernel_sin+0x148>)
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	4606      	mov	r6, r0
 80056fa:	460f      	mov	r7, r1
 80056fc:	4640      	mov	r0, r8
 80056fe:	4649      	mov	r1, r9
 8005700:	f7fa ff26 	bl	8000550 <__aeabi_dmul>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4630      	mov	r0, r6
 800570a:	4639      	mov	r1, r7
 800570c:	f7fa fd6a 	bl	80001e4 <__adddf3>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4620      	mov	r0, r4
 8005716:	4629      	mov	r1, r5
 8005718:	f7fa fd62 	bl	80001e0 <__aeabi_dsub>
 800571c:	e7c4      	b.n	80056a8 <__kernel_sin+0xd0>
 800571e:	bf00      	nop
 8005720:	55555549 	.word	0x55555549
 8005724:	3fc55555 	.word	0x3fc55555
 8005728:	3fe00000 	.word	0x3fe00000
 800572c:	5acfd57c 	.word	0x5acfd57c
 8005730:	3de5d93a 	.word	0x3de5d93a
 8005734:	8a2b9ceb 	.word	0x8a2b9ceb
 8005738:	3e5ae5e6 	.word	0x3e5ae5e6
 800573c:	57b1fe7d 	.word	0x57b1fe7d
 8005740:	3ec71de3 	.word	0x3ec71de3
 8005744:	19c161d5 	.word	0x19c161d5
 8005748:	3f2a01a0 	.word	0x3f2a01a0
 800574c:	1110f8a6 	.word	0x1110f8a6
 8005750:	3f811111 	.word	0x3f811111

08005754 <fabs>:
 8005754:	ec51 0b10 	vmov	r0, r1, d0
 8005758:	ee10 2a10 	vmov	r2, s0
 800575c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005760:	ec43 2b10 	vmov	d0, r2, r3
 8005764:	4770      	bx	lr
	...

08005768 <floor>:
 8005768:	ec51 0b10 	vmov	r0, r1, d0
 800576c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005770:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005774:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005778:	2e13      	cmp	r6, #19
 800577a:	ee10 5a10 	vmov	r5, s0
 800577e:	ee10 8a10 	vmov	r8, s0
 8005782:	460c      	mov	r4, r1
 8005784:	dc32      	bgt.n	80057ec <floor+0x84>
 8005786:	2e00      	cmp	r6, #0
 8005788:	da14      	bge.n	80057b4 <floor+0x4c>
 800578a:	a333      	add	r3, pc, #204	; (adr r3, 8005858 <floor+0xf0>)
 800578c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005790:	f7fa fd28 	bl	80001e4 <__adddf3>
 8005794:	2200      	movs	r2, #0
 8005796:	2300      	movs	r3, #0
 8005798:	f7fb f96a 	bl	8000a70 <__aeabi_dcmpgt>
 800579c:	b138      	cbz	r0, 80057ae <floor+0x46>
 800579e:	2c00      	cmp	r4, #0
 80057a0:	da57      	bge.n	8005852 <floor+0xea>
 80057a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80057a6:	431d      	orrs	r5, r3
 80057a8:	d001      	beq.n	80057ae <floor+0x46>
 80057aa:	4c2d      	ldr	r4, [pc, #180]	; (8005860 <floor+0xf8>)
 80057ac:	2500      	movs	r5, #0
 80057ae:	4621      	mov	r1, r4
 80057b0:	4628      	mov	r0, r5
 80057b2:	e025      	b.n	8005800 <floor+0x98>
 80057b4:	4f2b      	ldr	r7, [pc, #172]	; (8005864 <floor+0xfc>)
 80057b6:	4137      	asrs	r7, r6
 80057b8:	ea01 0307 	and.w	r3, r1, r7
 80057bc:	4303      	orrs	r3, r0
 80057be:	d01f      	beq.n	8005800 <floor+0x98>
 80057c0:	a325      	add	r3, pc, #148	; (adr r3, 8005858 <floor+0xf0>)
 80057c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c6:	f7fa fd0d 	bl	80001e4 <__adddf3>
 80057ca:	2200      	movs	r2, #0
 80057cc:	2300      	movs	r3, #0
 80057ce:	f7fb f94f 	bl	8000a70 <__aeabi_dcmpgt>
 80057d2:	2800      	cmp	r0, #0
 80057d4:	d0eb      	beq.n	80057ae <floor+0x46>
 80057d6:	2c00      	cmp	r4, #0
 80057d8:	bfbe      	ittt	lt
 80057da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80057de:	fa43 f606 	asrlt.w	r6, r3, r6
 80057e2:	19a4      	addlt	r4, r4, r6
 80057e4:	ea24 0407 	bic.w	r4, r4, r7
 80057e8:	2500      	movs	r5, #0
 80057ea:	e7e0      	b.n	80057ae <floor+0x46>
 80057ec:	2e33      	cmp	r6, #51	; 0x33
 80057ee:	dd0b      	ble.n	8005808 <floor+0xa0>
 80057f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80057f4:	d104      	bne.n	8005800 <floor+0x98>
 80057f6:	ee10 2a10 	vmov	r2, s0
 80057fa:	460b      	mov	r3, r1
 80057fc:	f7fa fcf2 	bl	80001e4 <__adddf3>
 8005800:	ec41 0b10 	vmov	d0, r0, r1
 8005804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005808:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800580c:	f04f 33ff 	mov.w	r3, #4294967295
 8005810:	fa23 f707 	lsr.w	r7, r3, r7
 8005814:	4207      	tst	r7, r0
 8005816:	d0f3      	beq.n	8005800 <floor+0x98>
 8005818:	a30f      	add	r3, pc, #60	; (adr r3, 8005858 <floor+0xf0>)
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	f7fa fce1 	bl	80001e4 <__adddf3>
 8005822:	2200      	movs	r2, #0
 8005824:	2300      	movs	r3, #0
 8005826:	f7fb f923 	bl	8000a70 <__aeabi_dcmpgt>
 800582a:	2800      	cmp	r0, #0
 800582c:	d0bf      	beq.n	80057ae <floor+0x46>
 800582e:	2c00      	cmp	r4, #0
 8005830:	da02      	bge.n	8005838 <floor+0xd0>
 8005832:	2e14      	cmp	r6, #20
 8005834:	d103      	bne.n	800583e <floor+0xd6>
 8005836:	3401      	adds	r4, #1
 8005838:	ea25 0507 	bic.w	r5, r5, r7
 800583c:	e7b7      	b.n	80057ae <floor+0x46>
 800583e:	2301      	movs	r3, #1
 8005840:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005844:	fa03 f606 	lsl.w	r6, r3, r6
 8005848:	4435      	add	r5, r6
 800584a:	4545      	cmp	r5, r8
 800584c:	bf38      	it	cc
 800584e:	18e4      	addcc	r4, r4, r3
 8005850:	e7f2      	b.n	8005838 <floor+0xd0>
 8005852:	2500      	movs	r5, #0
 8005854:	462c      	mov	r4, r5
 8005856:	e7aa      	b.n	80057ae <floor+0x46>
 8005858:	8800759c 	.word	0x8800759c
 800585c:	7e37e43c 	.word	0x7e37e43c
 8005860:	bff00000 	.word	0xbff00000
 8005864:	000fffff 	.word	0x000fffff

08005868 <scalbn>:
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	ec55 4b10 	vmov	r4, r5, d0
 800586e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005872:	4606      	mov	r6, r0
 8005874:	462b      	mov	r3, r5
 8005876:	b99a      	cbnz	r2, 80058a0 <scalbn+0x38>
 8005878:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800587c:	4323      	orrs	r3, r4
 800587e:	d036      	beq.n	80058ee <scalbn+0x86>
 8005880:	4b39      	ldr	r3, [pc, #228]	; (8005968 <scalbn+0x100>)
 8005882:	4629      	mov	r1, r5
 8005884:	ee10 0a10 	vmov	r0, s0
 8005888:	2200      	movs	r2, #0
 800588a:	f7fa fe61 	bl	8000550 <__aeabi_dmul>
 800588e:	4b37      	ldr	r3, [pc, #220]	; (800596c <scalbn+0x104>)
 8005890:	429e      	cmp	r6, r3
 8005892:	4604      	mov	r4, r0
 8005894:	460d      	mov	r5, r1
 8005896:	da10      	bge.n	80058ba <scalbn+0x52>
 8005898:	a32b      	add	r3, pc, #172	; (adr r3, 8005948 <scalbn+0xe0>)
 800589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589e:	e03a      	b.n	8005916 <scalbn+0xae>
 80058a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80058a4:	428a      	cmp	r2, r1
 80058a6:	d10c      	bne.n	80058c2 <scalbn+0x5a>
 80058a8:	ee10 2a10 	vmov	r2, s0
 80058ac:	4620      	mov	r0, r4
 80058ae:	4629      	mov	r1, r5
 80058b0:	f7fa fc98 	bl	80001e4 <__adddf3>
 80058b4:	4604      	mov	r4, r0
 80058b6:	460d      	mov	r5, r1
 80058b8:	e019      	b.n	80058ee <scalbn+0x86>
 80058ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80058be:	460b      	mov	r3, r1
 80058c0:	3a36      	subs	r2, #54	; 0x36
 80058c2:	4432      	add	r2, r6
 80058c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80058c8:	428a      	cmp	r2, r1
 80058ca:	dd08      	ble.n	80058de <scalbn+0x76>
 80058cc:	2d00      	cmp	r5, #0
 80058ce:	a120      	add	r1, pc, #128	; (adr r1, 8005950 <scalbn+0xe8>)
 80058d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058d4:	da1c      	bge.n	8005910 <scalbn+0xa8>
 80058d6:	a120      	add	r1, pc, #128	; (adr r1, 8005958 <scalbn+0xf0>)
 80058d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058dc:	e018      	b.n	8005910 <scalbn+0xa8>
 80058de:	2a00      	cmp	r2, #0
 80058e0:	dd08      	ble.n	80058f4 <scalbn+0x8c>
 80058e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80058e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80058ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80058ee:	ec45 4b10 	vmov	d0, r4, r5
 80058f2:	bd70      	pop	{r4, r5, r6, pc}
 80058f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80058f8:	da19      	bge.n	800592e <scalbn+0xc6>
 80058fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80058fe:	429e      	cmp	r6, r3
 8005900:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005904:	dd0a      	ble.n	800591c <scalbn+0xb4>
 8005906:	a112      	add	r1, pc, #72	; (adr r1, 8005950 <scalbn+0xe8>)
 8005908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e2      	bne.n	80058d6 <scalbn+0x6e>
 8005910:	a30f      	add	r3, pc, #60	; (adr r3, 8005950 <scalbn+0xe8>)
 8005912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005916:	f7fa fe1b 	bl	8000550 <__aeabi_dmul>
 800591a:	e7cb      	b.n	80058b4 <scalbn+0x4c>
 800591c:	a10a      	add	r1, pc, #40	; (adr r1, 8005948 <scalbn+0xe0>)
 800591e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0b8      	beq.n	8005898 <scalbn+0x30>
 8005926:	a10e      	add	r1, pc, #56	; (adr r1, 8005960 <scalbn+0xf8>)
 8005928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800592c:	e7b4      	b.n	8005898 <scalbn+0x30>
 800592e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005932:	3236      	adds	r2, #54	; 0x36
 8005934:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005938:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800593c:	4620      	mov	r0, r4
 800593e:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <scalbn+0x108>)
 8005940:	2200      	movs	r2, #0
 8005942:	e7e8      	b.n	8005916 <scalbn+0xae>
 8005944:	f3af 8000 	nop.w
 8005948:	c2f8f359 	.word	0xc2f8f359
 800594c:	01a56e1f 	.word	0x01a56e1f
 8005950:	8800759c 	.word	0x8800759c
 8005954:	7e37e43c 	.word	0x7e37e43c
 8005958:	8800759c 	.word	0x8800759c
 800595c:	fe37e43c 	.word	0xfe37e43c
 8005960:	c2f8f359 	.word	0xc2f8f359
 8005964:	81a56e1f 	.word	0x81a56e1f
 8005968:	43500000 	.word	0x43500000
 800596c:	ffff3cb0 	.word	0xffff3cb0
 8005970:	3c900000 	.word	0x3c900000

08005974 <_init>:
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005976:	bf00      	nop
 8005978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597a:	bc08      	pop	{r3}
 800597c:	469e      	mov	lr, r3
 800597e:	4770      	bx	lr

08005980 <_fini>:
 8005980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005982:	bf00      	nop
 8005984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005986:	bc08      	pop	{r3}
 8005988:	469e      	mov	lr, r3
 800598a:	4770      	bx	lr
