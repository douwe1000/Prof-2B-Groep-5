
Prof-2B-Groep-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005940  08005940  00015940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b30  08005b30  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b30  08005b30  00015b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b38  08005b38  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b38  08005b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b3c  08005b3c  00015b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  20000070  08005bb0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  08005bb0  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb19  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204c  00000000  00000000  0002ebb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00030c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00031a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000213e  00000000  00000000  00032810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff9c  00000000  00000000  0003494e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a674  00000000  00000000  000448ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000def5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004294  00000000  00000000  000defb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005924 	.word	0x08005924

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08005924 	.word	0x08005924

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b974 	b.w	8000ee0 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9d08      	ldr	r5, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	468e      	mov	lr, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14d      	bne.n	8000cba <__udivmoddi4+0xaa>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4694      	mov	ip, r2
 8000c22:	d969      	bls.n	8000cf8 <__udivmoddi4+0xe8>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b152      	cbz	r2, 8000c40 <__udivmoddi4+0x30>
 8000c2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2e:	f1c2 0120 	rsb	r1, r2, #32
 8000c32:	fa20 f101 	lsr.w	r1, r0, r1
 8000c36:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c3e:	4094      	lsls	r4, r2
 8000c40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c44:	0c21      	lsrs	r1, r4, #16
 8000c46:	fbbe f6f8 	udiv	r6, lr, r8
 8000c4a:	fa1f f78c 	uxth.w	r7, ip
 8000c4e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c56:	fb06 f107 	mul.w	r1, r6, r7
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x64>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c66:	f080 811f 	bcs.w	8000ea8 <__udivmoddi4+0x298>
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	f240 811c 	bls.w	8000ea8 <__udivmoddi4+0x298>
 8000c70:	3e02      	subs	r6, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1a5b      	subs	r3, r3, r1
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c84:	fb00 f707 	mul.w	r7, r0, r7
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x92>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c94:	f080 810a 	bcs.w	8000eac <__udivmoddi4+0x29c>
 8000c98:	42a7      	cmp	r7, r4
 8000c9a:	f240 8107 	bls.w	8000eac <__udivmoddi4+0x29c>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca6:	1be4      	subs	r4, r4, r7
 8000ca8:	2600      	movs	r6, #0
 8000caa:	b11d      	cbz	r5, 8000cb4 <__udivmoddi4+0xa4>
 8000cac:	40d4      	lsrs	r4, r2
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d909      	bls.n	8000cd2 <__udivmoddi4+0xc2>
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	f000 80ef 	beq.w	8000ea2 <__udivmoddi4+0x292>
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cca:	4630      	mov	r0, r6
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	fab3 f683 	clz	r6, r3
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d14a      	bne.n	8000d70 <__udivmoddi4+0x160>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xd4>
 8000cde:	4282      	cmp	r2, r0
 8000ce0:	f200 80f9 	bhi.w	8000ed6 <__udivmoddi4+0x2c6>
 8000ce4:	1a84      	subs	r4, r0, r2
 8000ce6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	469e      	mov	lr, r3
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	d0e0      	beq.n	8000cb4 <__udivmoddi4+0xa4>
 8000cf2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cf6:	e7dd      	b.n	8000cb4 <__udivmoddi4+0xa4>
 8000cf8:	b902      	cbnz	r2, 8000cfc <__udivmoddi4+0xec>
 8000cfa:	deff      	udf	#255	; 0xff
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f040 8092 	bne.w	8000e2a <__udivmoddi4+0x21a>
 8000d06:	eba1 010c 	sub.w	r1, r1, ip
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2601      	movs	r6, #1
 8000d14:	0c20      	lsrs	r0, r4, #16
 8000d16:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d1a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d1e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d22:	fb0e f003 	mul.w	r0, lr, r3
 8000d26:	4288      	cmp	r0, r1
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x12c>
 8000d2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x12a>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2c0>
 8000d3a:	4643      	mov	r3, r8
 8000d3c:	1a09      	subs	r1, r1, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d44:	fb07 1110 	mls	r1, r7, r0, r1
 8000d48:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x156>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x154>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000d64:	4608      	mov	r0, r1
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d6e:	e79c      	b.n	8000caa <__udivmoddi4+0x9a>
 8000d70:	f1c6 0720 	rsb	r7, r6, #32
 8000d74:	40b3      	lsls	r3, r6
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d82:	fa01 f306 	lsl.w	r3, r1, r6
 8000d86:	431c      	orrs	r4, r3
 8000d88:	40f9      	lsrs	r1, r7
 8000d8a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d92:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d96:	0c20      	lsrs	r0, r4, #16
 8000d98:	fa1f fe8c 	uxth.w	lr, ip
 8000d9c:	fb09 1118 	mls	r1, r9, r8, r1
 8000da0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da4:	fb08 f00e 	mul.w	r0, r8, lr
 8000da8:	4288      	cmp	r0, r1
 8000daa:	fa02 f206 	lsl.w	r2, r2, r6
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b8>
 8000db0:	eb1c 0101 	adds.w	r1, ip, r1
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2bc>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2bc>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4461      	add	r1, ip
 8000dc8:	1a09      	subs	r1, r1, r0
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ddc:	458e      	cmp	lr, r1
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1e2>
 8000de0:	eb1c 0101 	adds.w	r1, ip, r1
 8000de4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2b4>
 8000dea:	458e      	cmp	lr, r1
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2b4>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4461      	add	r1, ip
 8000df2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dfa:	eba1 010e 	sub.w	r1, r1, lr
 8000dfe:	42a1      	cmp	r1, r4
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46a6      	mov	lr, r4
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x2a4>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x2a0>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x212>
 8000e0a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e0e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e12:	fa01 f707 	lsl.w	r7, r1, r7
 8000e16:	fa22 f306 	lsr.w	r3, r2, r6
 8000e1a:	40f1      	lsrs	r1, r6
 8000e1c:	431f      	orrs	r7, r3
 8000e1e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e22:	2600      	movs	r6, #0
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	f1c2 0320 	rsb	r3, r2, #32
 8000e2e:	40d8      	lsrs	r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa21 f303 	lsr.w	r3, r1, r3
 8000e38:	4091      	lsls	r1, r2
 8000e3a:	4301      	orrs	r1, r0
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e48:	fb07 3610 	mls	r6, r7, r0, r3
 8000e4c:	0c0b      	lsrs	r3, r1, #16
 8000e4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e52:	fb00 f60e 	mul.w	r6, r0, lr
 8000e56:	429e      	cmp	r6, r3
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x260>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b8>
 8000e68:	429e      	cmp	r6, r3
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b8>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1b9b      	subs	r3, r3, r6
 8000e72:	b289      	uxth	r1, r1
 8000e74:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e78:	fb07 3316 	mls	r3, r7, r6, r3
 8000e7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e80:	fb06 f30e 	mul.w	r3, r6, lr
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x28a>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e96:	3e02      	subs	r6, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	1ac9      	subs	r1, r1, r3
 8000e9c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0x104>
 8000ea2:	462e      	mov	r6, r5
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	e705      	b.n	8000cb4 <__udivmoddi4+0xa4>
 8000ea8:	4606      	mov	r6, r0
 8000eaa:	e6e3      	b.n	8000c74 <__udivmoddi4+0x64>
 8000eac:	4618      	mov	r0, r3
 8000eae:	e6f8      	b.n	8000ca2 <__udivmoddi4+0x92>
 8000eb0:	454b      	cmp	r3, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f8>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ebc:	3801      	subs	r0, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f8>
 8000ec0:	4646      	mov	r6, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x28a>
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1e2>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x260>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b8>
 8000ed0:	3b02      	subs	r3, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x12c>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e709      	b.n	8000cee <__udivmoddi4+0xde>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x156>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	0000      	movs	r0, r0
	...

08000ee8 <dft>:
	  float ImX[buffersize/2];// imaginaire deel van x
	  float AmpX[buffersize/2];// amplitude van x


float dft(int k)
{
 8000ee8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
	for (j=0; j<(buffersize/2);j++)
 8000ef2:	4b9d      	ldr	r3, [pc, #628]	; (8001168 <dft+0x280>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	e014      	b.n	8000f24 <dft+0x3c>
	{
		ReX[j]=0;
 8000efa:	4b9b      	ldr	r3, [pc, #620]	; (8001168 <dft+0x280>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a9b      	ldr	r2, [pc, #620]	; (800116c <dft+0x284>)
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	f04f 0200 	mov.w	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
		ImX[j]=0;
 8000f0a:	4b97      	ldr	r3, [pc, #604]	; (8001168 <dft+0x280>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a98      	ldr	r2, [pc, #608]	; (8001170 <dft+0x288>)
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
	for (j=0; j<(buffersize/2);j++)
 8000f1a:	4b93      	ldr	r3, [pc, #588]	; (8001168 <dft+0x280>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a91      	ldr	r2, [pc, #580]	; (8001168 <dft+0x280>)
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4b90      	ldr	r3, [pc, #576]	; (8001168 <dft+0x280>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b3f      	cmp	r3, #63	; 0x3f
 8000f2a:	dde6      	ble.n	8000efa <dft+0x12>
	}

		  for (n=0 ; n<(buffersize-1) ; n++)
 8000f2c:	4b91      	ldr	r3, [pc, #580]	; (8001174 <dft+0x28c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	e0ae      	b.n	8001092 <dft+0x1aa>
		  {
			  ReX[k] = ReX[k] + buffer[n] * cos(n * k * M_PI * 2 / buffersize);
 8000f34:	4a8d      	ldr	r2, [pc, #564]	; (800116c <dft+0x284>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff faae 	bl	80004a0 <__aeabi_f2d>
 8000f44:	4604      	mov	r4, r0
 8000f46:	460d      	mov	r5, r1
 8000f48:	4b8a      	ldr	r3, [pc, #552]	; (8001174 <dft+0x28c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a8a      	ldr	r2, [pc, #552]	; (8001178 <dft+0x290>)
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff faa3 	bl	80004a0 <__aeabi_f2d>
 8000f5a:	4680      	mov	r8, r0
 8000f5c:	4689      	mov	r9, r1
 8000f5e:	4b85      	ldr	r3, [pc, #532]	; (8001174 <dft+0x28c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	fb02 f303 	mul.w	r3, r2, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fa87 	bl	800047c <__aeabi_i2d>
 8000f6e:	a37c      	add	r3, pc, #496	; (adr r3, 8001160 <dft+0x278>)
 8000f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f74:	f7ff faec 	bl	8000550 <__aeabi_dmul>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	f7ff f92e 	bl	80001e4 <__adddf3>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	4b79      	ldr	r3, [pc, #484]	; (800117c <dft+0x294>)
 8000f96:	f7ff fc05 	bl	80007a4 <__aeabi_ddiv>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	ec43 2b17 	vmov	d7, r2, r3
 8000fa2:	eeb0 0a47 	vmov.f32	s0, s14
 8000fa6:	eef0 0a67 	vmov.f32	s1, s15
 8000faa:	f003 faf5 	bl	8004598 <cos>
 8000fae:	ec53 2b10 	vmov	r2, r3, d0
 8000fb2:	4640      	mov	r0, r8
 8000fb4:	4649      	mov	r1, r9
 8000fb6:	f7ff facb 	bl	8000550 <__aeabi_dmul>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	4629      	mov	r1, r5
 8000fc2:	f7ff f90f 	bl	80001e4 <__adddf3>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f7ff fdb7 	bl	8000b40 <__aeabi_d2f>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	4965      	ldr	r1, [pc, #404]	; (800116c <dft+0x284>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	601a      	str	r2, [r3, #0]
			  ImX[k] = ImX[k] - buffer[n] * sin(n * k * M_PI * 2 / buffersize);
 8000fde:	4a64      	ldr	r2, [pc, #400]	; (8001170 <dft+0x288>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fa59 	bl	80004a0 <__aeabi_f2d>
 8000fee:	4604      	mov	r4, r0
 8000ff0:	460d      	mov	r5, r1
 8000ff2:	4b60      	ldr	r3, [pc, #384]	; (8001174 <dft+0x28c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a60      	ldr	r2, [pc, #384]	; (8001178 <dft+0x290>)
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fa4e 	bl	80004a0 <__aeabi_f2d>
 8001004:	4680      	mov	r8, r0
 8001006:	4689      	mov	r9, r1
 8001008:	4b5a      	ldr	r3, [pc, #360]	; (8001174 <dft+0x28c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	fb02 f303 	mul.w	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa32 	bl	800047c <__aeabi_i2d>
 8001018:	a351      	add	r3, pc, #324	; (adr r3, 8001160 <dft+0x278>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff fa97 	bl	8000550 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	f7ff f8d9 	bl	80001e4 <__adddf3>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	4b4f      	ldr	r3, [pc, #316]	; (800117c <dft+0x294>)
 8001040:	f7ff fbb0 	bl	80007a4 <__aeabi_ddiv>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	ec43 2b17 	vmov	d7, r2, r3
 800104c:	eeb0 0a47 	vmov.f32	s0, s14
 8001050:	eef0 0a67 	vmov.f32	s1, s15
 8001054:	f003 fb3c 	bl	80046d0 <sin>
 8001058:	ec53 2b10 	vmov	r2, r3, d0
 800105c:	4640      	mov	r0, r8
 800105e:	4649      	mov	r1, r9
 8001060:	f7ff fa76 	bl	8000550 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4620      	mov	r0, r4
 800106a:	4629      	mov	r1, r5
 800106c:	f7ff f8b8 	bl	80001e0 <__aeabi_dsub>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f7ff fd62 	bl	8000b40 <__aeabi_d2f>
 800107c:	4602      	mov	r2, r0
 800107e:	493c      	ldr	r1, [pc, #240]	; (8001170 <dft+0x288>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	601a      	str	r2, [r3, #0]
		  for (n=0 ; n<(buffersize-1) ; n++)
 8001088:	4b3a      	ldr	r3, [pc, #232]	; (8001174 <dft+0x28c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	4a39      	ldr	r2, [pc, #228]	; (8001174 <dft+0x28c>)
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b38      	ldr	r3, [pc, #224]	; (8001174 <dft+0x28c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b7e      	cmp	r3, #126	; 0x7e
 8001098:	f77f af4c 	ble.w	8000f34 <dft+0x4c>
		  }

		  ReX[k] /= buffersize/2;
 800109c:	4a33      	ldr	r2, [pc, #204]	; (800116c <dft+0x284>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	ed93 7a00 	vldr	s14, [r3]
 80010a8:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001180 <dft+0x298>
 80010ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b0:	4a2e      	ldr	r2, [pc, #184]	; (800116c <dft+0x284>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	edc3 7a00 	vstr	s15, [r3]
		  ImX[k] /= buffersize/2;
 80010bc:	4a2c      	ldr	r2, [pc, #176]	; (8001170 <dft+0x288>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	ed93 7a00 	vldr	s14, [r3]
 80010c8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001180 <dft+0x298>
 80010cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d0:	4a27      	ldr	r2, [pc, #156]	; (8001170 <dft+0x288>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	edc3 7a00 	vstr	s15, [r3]

		  AmpX[k] = sqrt(ReX[k]*ReX[k] + ImX[k]*ImX[k]);//sterkte van signal per frequentie van k
 80010dc:	4a23      	ldr	r2, [pc, #140]	; (800116c <dft+0x284>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	ed93 7a00 	vldr	s14, [r3]
 80010e8:	4a20      	ldr	r2, [pc, #128]	; (800116c <dft+0x284>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	edd3 7a00 	vldr	s15, [r3]
 80010f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f8:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <dft+0x288>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	edd3 6a00 	vldr	s13, [r3]
 8001104:	4a1a      	ldr	r2, [pc, #104]	; (8001170 <dft+0x288>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	edd3 7a00 	vldr	s15, [r3]
 8001110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001118:	ee17 0a90 	vmov	r0, s15
 800111c:	f7ff f9c0 	bl	80004a0 <__aeabi_f2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	ec43 2b10 	vmov	d0, r2, r3
 8001128:	f003 fb2a 	bl	8004780 <sqrt>
 800112c:	ec53 2b10 	vmov	r2, r3, d0
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fd04 	bl	8000b40 <__aeabi_d2f>
 8001138:	4602      	mov	r2, r0
 800113a:	4912      	ldr	r1, [pc, #72]	; (8001184 <dft+0x29c>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	601a      	str	r2, [r3, #0]
		  return AmpX[k];
 8001144:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <dft+0x29c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	ee07 3a90 	vmov	s15, r3
}
 8001152:	eeb0 0a67 	vmov.f32	s0, s15
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800115e:	bf00      	nop
 8001160:	54442d18 	.word	0x54442d18
 8001164:	400921fb 	.word	0x400921fb
 8001168:	20000090 	.word	0x20000090
 800116c:	20000094 	.word	0x20000094
 8001170:	20000194 	.word	0x20000194
 8001174:	2000008c 	.word	0x2000008c
 8001178:	200004c0 	.word	0x200004c0
 800117c:	40600000 	.word	0x40600000
 8001180:	42800000 	.word	0x42800000
 8001184:	20000294 	.word	0x20000294

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118e:	f000 fd41 	bl	8001c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001192:	f000 f967 	bl	8001464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001196:	f000 facd 	bl	8001734 <MX_GPIO_Init>
  MX_TIM2_Init();
 800119a:	f000 fa53 	bl	8001644 <MX_TIM2_Init>
  MX_ADC1_Init();
 800119e:	f000 f9c9 	bl	8001534 <MX_ADC1_Init>
  MX_SPI1_Init();
 80011a2:	f000 fa19 	bl	80015d8 <MX_SPI1_Init>
  MX_USART2_Init();
 80011a6:	f000 fa99 	bl	80016dc <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80011aa:	48a2      	ldr	r0, [pc, #648]	; (8001434 <main+0x2ac>)
 80011ac:	f002 fa0a 	bl	80035c4 <HAL_TIM_Base_Start_IT>
  while (1)
  {



	  if (dft_waarde == 1){
 80011b0:	4ba1      	ldr	r3, [pc, #644]	; (8001438 <main+0x2b0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	f040 80c3 	bne.w	8001340 <main+0x1b8>
		  f2031hz = dft(12);
 80011ba:	200c      	movs	r0, #12
 80011bc:	f7ff fe94 	bl	8000ee8 <dft>
 80011c0:	eef0 7a40 	vmov.f32	s15, s0
 80011c4:	4b9d      	ldr	r3, [pc, #628]	; (800143c <main+0x2b4>)
 80011c6:	edc3 7a00 	vstr	s15, [r3]
		  f1000hz = dft(6);
 80011ca:	2006      	movs	r0, #6
 80011cc:	f7ff fe8c 	bl	8000ee8 <dft>
 80011d0:	eef0 7a40 	vmov.f32	s15, s0
 80011d4:	4b9a      	ldr	r3, [pc, #616]	; (8001440 <main+0x2b8>)
 80011d6:	edc3 7a00 	vstr	s15, [r3]
		  f3000hz = dft(21);
 80011da:	2015      	movs	r0, #21
 80011dc:	f7ff fe84 	bl	8000ee8 <dft>
 80011e0:	eef0 7a40 	vmov.f32	s15, s0
 80011e4:	4b97      	ldr	r3, [pc, #604]	; (8001444 <main+0x2bc>)
 80011e6:	edc3 7a00 	vstr	s15, [r3]
		  f4000hz = dft(26);
 80011ea:	201a      	movs	r0, #26
 80011ec:	f7ff fe7c 	bl	8000ee8 <dft>
 80011f0:	eef0 7a40 	vmov.f32	s15, s0
 80011f4:	4b94      	ldr	r3, [pc, #592]	; (8001448 <main+0x2c0>)
 80011f6:	edc3 7a00 	vstr	s15, [r3]
		  //for (int g=0; g<buffersize/2;g++) dft(g);
		  dft_waarde = 0;
 80011fa:	4b8f      	ldr	r3, [pc, #572]	; (8001438 <main+0x2b0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]



		  if (f1000hz >= 200){
 8001200:	4b8f      	ldr	r3, [pc, #572]	; (8001440 <main+0x2b8>)
 8001202:	edd3 7a00 	vldr	s15, [r3]
 8001206:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800144c <main+0x2c4>
 800120a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001212:	db1a      	blt.n	800124a <main+0xc2>
			  if (last1 ==0)
 8001214:	4b8e      	ldr	r3, [pc, #568]	; (8001450 <main+0x2c8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d119      	bne.n	8001250 <main+0xc8>
			  {
				 int buf1waarde = round(f1000hz);
 800121c:	4b88      	ldr	r3, [pc, #544]	; (8001440 <main+0x2b8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f93d 	bl	80004a0 <__aeabi_f2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	ec43 2b10 	vmov	d0, r2, r3
 800122e:	f003 fa07 	bl	8004640 <round>
 8001232:	ec53 2b10 	vmov	r2, r3, d0
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fc39 	bl	8000ab0 <__aeabi_d2iz>
 800123e:	4603      	mov	r3, r0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
				 uint8_t buf1[3];
				// HAL_USART_Transmit(&husart2, (uint8_t*) buf1, sprintf(buf1, "%d", buf1waarde), HAL_MAX_DELAY);
				 last1 = 1;
 8001242:	4b83      	ldr	r3, [pc, #524]	; (8001450 <main+0x2c8>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e002      	b.n	8001250 <main+0xc8>
			  }
		  }
		  else last1 = 0;
 800124a:	4b81      	ldr	r3, [pc, #516]	; (8001450 <main+0x2c8>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]



		  if (f2031hz >= 200){
 8001250:	4b7a      	ldr	r3, [pc, #488]	; (800143c <main+0x2b4>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800144c <main+0x2c4>
 800125a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800125e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001262:	db1a      	blt.n	800129a <main+0x112>
			  if (last2 == 0)
 8001264:	4b7b      	ldr	r3, [pc, #492]	; (8001454 <main+0x2cc>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d119      	bne.n	80012a0 <main+0x118>
			  {
				  int buf2waarde = round(f2031hz);
 800126c:	4b73      	ldr	r3, [pc, #460]	; (800143c <main+0x2b4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f915 	bl	80004a0 <__aeabi_f2d>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	ec43 2b10 	vmov	d0, r2, r3
 800127e:	f003 f9df 	bl	8004640 <round>
 8001282:	ec53 2b10 	vmov	r2, r3, d0
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fc11 	bl	8000ab0 <__aeabi_d2iz>
 800128e:	4603      	mov	r3, r0
 8001290:	623b      	str	r3, [r7, #32]
				  uint8_t buf2[3];
				 // HAL_USART_Transmit(&husart2, (uint8_t*) buf2, sprintf(buf2, "%d", buf2waarde), HAL_MAX_DELAY);
				  last2 = 1;
 8001292:	4b70      	ldr	r3, [pc, #448]	; (8001454 <main+0x2cc>)
 8001294:	2201      	movs	r2, #1
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	e002      	b.n	80012a0 <main+0x118>
			  }
		  }
		  else last2 = 0;
 800129a:	4b6e      	ldr	r3, [pc, #440]	; (8001454 <main+0x2cc>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]


		  if (f3000hz >= 200){
 80012a0:	4b68      	ldr	r3, [pc, #416]	; (8001444 <main+0x2bc>)
 80012a2:	edd3 7a00 	vldr	s15, [r3]
 80012a6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800144c <main+0x2c4>
 80012aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b2:	db1a      	blt.n	80012ea <main+0x162>
			  if (last3 == 0)
 80012b4:	4b68      	ldr	r3, [pc, #416]	; (8001458 <main+0x2d0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d119      	bne.n	80012f0 <main+0x168>
			  {
				  int buf3waarde = round(f3000hz);
 80012bc:	4b61      	ldr	r3, [pc, #388]	; (8001444 <main+0x2bc>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f8ed 	bl	80004a0 <__aeabi_f2d>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	ec43 2b10 	vmov	d0, r2, r3
 80012ce:	f003 f9b7 	bl	8004640 <round>
 80012d2:	ec53 2b10 	vmov	r2, r3, d0
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fbe9 	bl	8000ab0 <__aeabi_d2iz>
 80012de:	4603      	mov	r3, r0
 80012e0:	61fb      	str	r3, [r7, #28]
				  uint8_t buf3[3];
				 // HAL_USART_Transmit(&husart2, (uint8_t*) buf3, sprintf(buf3, "%d", buf3waarde), HAL_MAX_DELAY);
			  	  last3 = 1;
 80012e2:	4b5d      	ldr	r3, [pc, #372]	; (8001458 <main+0x2d0>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	e002      	b.n	80012f0 <main+0x168>
			  }
		  }
		  else last3 = 0;
 80012ea:	4b5b      	ldr	r3, [pc, #364]	; (8001458 <main+0x2d0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]


		  if (f4000hz >= 200){
 80012f0:	4b55      	ldr	r3, [pc, #340]	; (8001448 <main+0x2c0>)
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800144c <main+0x2c4>
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	db1a      	blt.n	800133a <main+0x1b2>
			  if (last4 ==0)
 8001304:	4b55      	ldr	r3, [pc, #340]	; (800145c <main+0x2d4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d119      	bne.n	8001340 <main+0x1b8>
			  {
				  int buf4waarde = round(f4000hz);
 800130c:	4b4e      	ldr	r3, [pc, #312]	; (8001448 <main+0x2c0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f8c5 	bl	80004a0 <__aeabi_f2d>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	ec43 2b10 	vmov	d0, r2, r3
 800131e:	f003 f98f 	bl	8004640 <round>
 8001322:	ec53 2b10 	vmov	r2, r3, d0
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fbc1 	bl	8000ab0 <__aeabi_d2iz>
 800132e:	4603      	mov	r3, r0
 8001330:	61bb      	str	r3, [r7, #24]
				  uint8_t buf4[3];
				 // HAL_UART_Transmit(&huart2, (uint8_t*) buf4, sprintf(buf4, "%d", buf4waarde), HAL_MAX_DELAY);
				  last4 = 1;
 8001332:	4b4a      	ldr	r3, [pc, #296]	; (800145c <main+0x2d4>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e002      	b.n	8001340 <main+0x1b8>
			  }
		  }
		  else last4 = 0;
 800133a:	4b48      	ldr	r3, [pc, #288]	; (800145c <main+0x2d4>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]



	  }

	  uint8_t testbuf[] = {(round(f1000hz))/2,(round(f2031hz))/2, (round(f3000hz))/2, (round(f4000hz))/2 };
 8001340:	4b3f      	ldr	r3, [pc, #252]	; (8001440 <main+0x2b8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8ab 	bl	80004a0 <__aeabi_f2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	ec43 2b10 	vmov	d0, r2, r3
 8001352:	f003 f975 	bl	8004640 <round>
 8001356:	ec51 0b10 	vmov	r0, r1, d0
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001362:	f7ff fa1f 	bl	80007a4 <__aeabi_ddiv>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff fbc7 	bl	8000b00 <__aeabi_d2uiz>
 8001372:	4603      	mov	r3, r0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	753b      	strb	r3, [r7, #20]
 8001378:	4b30      	ldr	r3, [pc, #192]	; (800143c <main+0x2b4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f88f 	bl	80004a0 <__aeabi_f2d>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	ec43 2b10 	vmov	d0, r2, r3
 800138a:	f003 f959 	bl	8004640 <round>
 800138e:	ec51 0b10 	vmov	r0, r1, d0
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800139a:	f7ff fa03 	bl	80007a4 <__aeabi_ddiv>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f7ff fbab 	bl	8000b00 <__aeabi_d2uiz>
 80013aa:	4603      	mov	r3, r0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	757b      	strb	r3, [r7, #21]
 80013b0:	4b24      	ldr	r3, [pc, #144]	; (8001444 <main+0x2bc>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f873 	bl	80004a0 <__aeabi_f2d>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	ec43 2b10 	vmov	d0, r2, r3
 80013c2:	f003 f93d 	bl	8004640 <round>
 80013c6:	ec51 0b10 	vmov	r0, r1, d0
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013d2:	f7ff f9e7 	bl	80007a4 <__aeabi_ddiv>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	f7ff fb8f 	bl	8000b00 <__aeabi_d2uiz>
 80013e2:	4603      	mov	r3, r0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	75bb      	strb	r3, [r7, #22]
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <main+0x2c0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f857 	bl	80004a0 <__aeabi_f2d>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	ec43 2b10 	vmov	d0, r2, r3
 80013fa:	f003 f921 	bl	8004640 <round>
 80013fe:	ec51 0b10 	vmov	r0, r1, d0
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800140a:	f7ff f9cb 	bl	80007a4 <__aeabi_ddiv>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fb73 	bl	8000b00 <__aeabi_d2uiz>
 800141a:	4603      	mov	r3, r0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	75fb      	strb	r3, [r7, #23]

	  HAL_USART_Transmit(&husart2, testbuf, sizeof(testbuf), HAL_MAX_DELAY);
 8001420:	f107 0114 	add.w	r1, r7, #20
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
 8001428:	2204      	movs	r2, #4
 800142a:	480d      	ldr	r0, [pc, #52]	; (8001460 <main+0x2d8>)
 800142c:	f002 fd01 	bl	8003e32 <HAL_USART_Transmit>
  {
 8001430:	e6be      	b.n	80011b0 <main+0x28>
 8001432:	bf00      	nop
 8001434:	20000434 	.word	0x20000434
 8001438:	200006c4 	.word	0x200006c4
 800143c:	200006cc 	.word	0x200006cc
 8001440:	200006c8 	.word	0x200006c8
 8001444:	200006d0 	.word	0x200006d0
 8001448:	200006d4 	.word	0x200006d4
 800144c:	43480000 	.word	0x43480000
 8001450:	200006dc 	.word	0x200006dc
 8001454:	200006e0 	.word	0x200006e0
 8001458:	200006d8 	.word	0x200006d8
 800145c:	200006e4 	.word	0x200006e4
 8001460:	2000047c 	.word	0x2000047c

08001464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b094      	sub	sp, #80	; 0x50
 8001468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146a:	f107 0320 	add.w	r3, r7, #32
 800146e:	2230      	movs	r2, #48	; 0x30
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f003 f886 	bl	8004584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	4b27      	ldr	r3, [pc, #156]	; (800152c <SystemClock_Config+0xc8>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	4a26      	ldr	r2, [pc, #152]	; (800152c <SystemClock_Config+0xc8>)
 8001492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001496:	6413      	str	r3, [r2, #64]	; 0x40
 8001498:	4b24      	ldr	r3, [pc, #144]	; (800152c <SystemClock_Config+0xc8>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <SystemClock_Config+0xcc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a20      	ldr	r2, [pc, #128]	; (8001530 <SystemClock_Config+0xcc>)
 80014ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <SystemClock_Config+0xcc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c0:	2302      	movs	r3, #2
 80014c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c4:	2301      	movs	r3, #1
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c8:	2310      	movs	r3, #16
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014cc:	2302      	movs	r3, #2
 80014ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014d0:	2300      	movs	r3, #0
 80014d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014d4:	2308      	movs	r3, #8
 80014d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80014d8:	2340      	movs	r3, #64	; 0x40
 80014da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014dc:	2302      	movs	r3, #2
 80014de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014e0:	2304      	movs	r3, #4
 80014e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e4:	f107 0320 	add.w	r3, r7, #32
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 fb3b 	bl	8002b64 <HAL_RCC_OscConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014f4:	f000 f9c4 	bl	8001880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f8:	230f      	movs	r3, #15
 80014fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fc:	2302      	movs	r3, #2
 80014fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	2101      	movs	r1, #1
 8001512:	4618      	mov	r0, r3
 8001514:	f001 fd9e 	bl	8003054 <HAL_RCC_ClockConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800151e:	f000 f9af 	bl	8001880 <Error_Handler>
  }
}
 8001522:	bf00      	nop
 8001524:	3750      	adds	r7, #80	; 0x50
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	40007000 	.word	0x40007000

08001534 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800153a:	463b      	mov	r3, r7
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001546:	4b21      	ldr	r3, [pc, #132]	; (80015cc <MX_ADC1_Init+0x98>)
 8001548:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <MX_ADC1_Init+0x9c>)
 800154a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <MX_ADC1_Init+0x98>)
 800154e:	2200      	movs	r2, #0
 8001550:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <MX_ADC1_Init+0x98>)
 8001554:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001558:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800155a:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <MX_ADC1_Init+0x98>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <MX_ADC1_Init+0x98>)
 8001562:	2200      	movs	r2, #0
 8001564:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <MX_ADC1_Init+0x98>)
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <MX_ADC1_Init+0x98>)
 8001570:	2200      	movs	r2, #0
 8001572:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <MX_ADC1_Init+0x98>)
 8001576:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <MX_ADC1_Init+0xa0>)
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <MX_ADC1_Init+0x98>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_ADC1_Init+0x98>)
 8001582:	2201      	movs	r2, #1
 8001584:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_ADC1_Init+0x98>)
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_ADC1_Init+0x98>)
 8001590:	2201      	movs	r2, #1
 8001592:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <MX_ADC1_Init+0x98>)
 8001596:	f000 fbaf 	bl	8001cf8 <HAL_ADC_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015a0:	f000 f96e 	bl	8001880 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015a8:	2301      	movs	r3, #1
 80015aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b0:	463b      	mov	r3, r7
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_ADC1_Init+0x98>)
 80015b6:	f000 fdd3 	bl	8002160 <HAL_ADC_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015c0:	f000 f95e 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000394 	.word	0x20000394
 80015d0:	40012000 	.word	0x40012000
 80015d4:	0f000001 	.word	0x0f000001

080015d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <MX_SPI1_Init+0x64>)
 80015de:	4a18      	ldr	r2, [pc, #96]	; (8001640 <MX_SPI1_Init+0x68>)
 80015e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <MX_SPI1_Init+0x64>)
 80015e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_SPI1_Init+0x64>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <MX_SPI1_Init+0x64>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_SPI1_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_SPI1_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_SPI1_Init+0x64>)
 8001604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001608:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_SPI1_Init+0x64>)
 800160c:	2200      	movs	r2, #0
 800160e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <MX_SPI1_Init+0x64>)
 8001612:	2200      	movs	r2, #0
 8001614:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_SPI1_Init+0x64>)
 8001618:	2200      	movs	r2, #0
 800161a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <MX_SPI1_Init+0x64>)
 800161e:	2200      	movs	r2, #0
 8001620:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_SPI1_Init+0x64>)
 8001624:	220a      	movs	r2, #10
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <MX_SPI1_Init+0x64>)
 800162a:	f001 fef3 	bl	8003414 <HAL_SPI_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001634:	f000 f924 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200003dc 	.word	0x200003dc
 8001640:	40013000 	.word	0x40013000

08001644 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001658:	463b      	mov	r3, r7
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001660:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <MX_TIM2_Init+0x94>)
 8001662:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001666:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <MX_TIM2_Init+0x94>)
 800166a:	2220      	movs	r2, #32
 800166c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166e:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <MX_TIM2_Init+0x94>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 8001674:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <MX_TIM2_Init+0x94>)
 8001676:	2232      	movs	r2, #50	; 0x32
 8001678:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <MX_TIM2_Init+0x94>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <MX_TIM2_Init+0x94>)
 8001682:	2280      	movs	r2, #128	; 0x80
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001686:	4814      	ldr	r0, [pc, #80]	; (80016d8 <MX_TIM2_Init+0x94>)
 8001688:	f001 ff4d 	bl	8003526 <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001692:	f000 f8f5 	bl	8001880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	4619      	mov	r1, r3
 80016a2:	480d      	ldr	r0, [pc, #52]	; (80016d8 <MX_TIM2_Init+0x94>)
 80016a4:	f002 f8f8 	bl	8003898 <HAL_TIM_ConfigClockSource>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80016ae:	f000 f8e7 	bl	8001880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ba:	463b      	mov	r3, r7
 80016bc:	4619      	mov	r1, r3
 80016be:	4806      	ldr	r0, [pc, #24]	; (80016d8 <MX_TIM2_Init+0x94>)
 80016c0:	f002 faf4 	bl	8003cac <HAL_TIMEx_MasterConfigSynchronization>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80016ca:	f000 f8d9 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000434 	.word	0x20000434

080016dc <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <MX_USART2_Init+0x50>)
 80016e2:	4a13      	ldr	r2, [pc, #76]	; (8001730 <MX_USART2_Init+0x54>)
 80016e4:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_USART2_Init+0x50>)
 80016e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016ec:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <MX_USART2_Init+0x50>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80016f4:	4b0d      	ldr	r3, [pc, #52]	; (800172c <MX_USART2_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_USART2_Init+0x50>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <MX_USART2_Init+0x50>)
 8001702:	220c      	movs	r2, #12
 8001704:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_USART2_Init+0x50>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <MX_USART2_Init+0x50>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_USART2_Init+0x50>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <MX_USART2_Init+0x50>)
 800171a:	f002 fb49 	bl	8003db0 <HAL_USART_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8001724:	f000 f8ac 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000047c 	.word	0x2000047c
 8001730:	40004400 	.word	0x40004400

08001734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <MX_GPIO_Init+0xc4>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a29      	ldr	r2, [pc, #164]	; (80017f8 <MX_GPIO_Init+0xc4>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <MX_GPIO_Init+0xc4>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <MX_GPIO_Init+0xc4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a22      	ldr	r2, [pc, #136]	; (80017f8 <MX_GPIO_Init+0xc4>)
 8001770:	f043 0308 	orr.w	r3, r3, #8
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <MX_GPIO_Init+0xc4>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_GPIO_Init+0xc4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <MX_GPIO_Init+0xc4>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_GPIO_Init+0xc4>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|BLUELED_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80017a4:	4815      	ldr	r0, [pc, #84]	; (80017fc <MX_GPIO_Init+0xc8>)
 80017a6:	f001 f9a9 	bl	8002afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ldac_Pin|SS1_Pin, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2190      	movs	r1, #144	; 0x90
 80017ae:	4814      	ldr	r0, [pc, #80]	; (8001800 <MX_GPIO_Init+0xcc>)
 80017b0:	f001 f9a4 	bl	8002afc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 BLUELED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|BLUELED_Pin;
 80017b4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80017b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	4619      	mov	r1, r3
 80017cc:	480b      	ldr	r0, [pc, #44]	; (80017fc <MX_GPIO_Init+0xc8>)
 80017ce:	f001 f811 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ldac_Pin SS1_Pin */
  GPIO_InitStruct.Pin = ldac_Pin|SS1_Pin;
 80017d2:	2390      	movs	r3, #144	; 0x90
 80017d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_GPIO_Init+0xcc>)
 80017ea:	f001 f803 	bl	80027f4 <HAL_GPIO_Init>

}
 80017ee:	bf00      	nop
 80017f0:	3720      	adds	r7, #32
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020c00 	.word	0x40020c00
 8001800:	40020400 	.word	0x40020400

08001804 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
	{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
		HAL_GPIO_TogglePin(GPIOD, BLUELED_Pin);
 800180c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001810:	4815      	ldr	r0, [pc, #84]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001812:	f001 f98c 	bl	8002b2e <HAL_GPIO_TogglePin>

		if (htim == &htim2)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d120      	bne.n	8001860 <HAL_TIM_PeriodElapsedCallback+0x5c>
		{
			pos++;
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3301      	adds	r3, #1
 8001824:	4a12      	ldr	r2, [pc, #72]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001826:	6013      	str	r3, [r2, #0]
			buffer[(pos-1)] = HAL_ADC_GetValue(&hadc1);
 8001828:	4812      	ldr	r0, [pc, #72]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800182a:	f000 fc6d 	bl	8002108 <HAL_ADC_GetValue>
 800182e:	ee07 0a90 	vmov	s15, r0
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3b01      	subs	r3, #1
 8001838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800183c:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	edc3 7a00 	vstr	s15, [r3]
			HAL_ADC_Start(&hadc1);
 8001846:	480b      	ldr	r0, [pc, #44]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001848:	f000 fa9a 	bl	8001d80 <HAL_ADC_Start>
			if (pos > buffersize)
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b80      	cmp	r3, #128	; 0x80
 8001852:	d905      	bls.n	8001860 <HAL_TIM_PeriodElapsedCallback+0x5c>
				{
				dft_waarde = 1;
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]
				pos = 0;
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

				}

		}
	}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40020c00 	.word	0x40020c00
 800186c:	20000434 	.word	0x20000434
 8001870:	200006c0 	.word	0x200006c0
 8001874:	20000394 	.word	0x20000394
 8001878:	200004c0 	.word	0x200004c0
 800187c:	200006c4 	.word	0x200006c4

08001880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001884:	b672      	cpsid	i
}
 8001886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001888:	e7fe      	b.n	8001888 <Error_Handler+0x8>
	...

0800188c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_MspInit+0x4c>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <HAL_MspInit+0x4c>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	; 0x44
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <HAL_MspInit+0x4c>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_MspInit+0x4c>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <HAL_MspInit+0x4c>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_MspInit+0x4c>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800

080018dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <HAL_ADC_MspInit+0x8c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d12f      	bne.n	800195e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_ADC_MspInit+0x90>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4a19      	ldr	r2, [pc, #100]	; (800196c <HAL_ADC_MspInit+0x90>)
 8001908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190c:	6453      	str	r3, [r2, #68]	; 0x44
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_ADC_MspInit+0x90>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_ADC_MspInit+0x90>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a12      	ldr	r2, [pc, #72]	; (800196c <HAL_ADC_MspInit+0x90>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_ADC_MspInit+0x90>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001936:	2301      	movs	r3, #1
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800193a:	2303      	movs	r3, #3
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4809      	ldr	r0, [pc, #36]	; (8001970 <HAL_ADC_MspInit+0x94>)
 800194a:	f000 ff53 	bl	80027f4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	2012      	movs	r0, #18
 8001954:	f000 ff17 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001958:	2012      	movs	r0, #18
 800195a:	f000 ff30 	bl	80027be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800195e:	bf00      	nop
 8001960:	3728      	adds	r7, #40	; 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40012000 	.word	0x40012000
 800196c:	40023800 	.word	0x40023800
 8001970:	40020000 	.word	0x40020000

08001974 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a28      	ldr	r2, [pc, #160]	; (8001a34 <HAL_SPI_MspInit+0xc0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d149      	bne.n	8001a2a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <HAL_SPI_MspInit+0xc4>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <HAL_SPI_MspInit+0xc4>)
 80019a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019a4:	6453      	str	r3, [r2, #68]	; 0x44
 80019a6:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <HAL_SPI_MspInit+0xc4>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <HAL_SPI_MspInit+0xc4>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a1f      	ldr	r2, [pc, #124]	; (8001a38 <HAL_SPI_MspInit+0xc4>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_SPI_MspInit+0xc4>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_SPI_MspInit+0xc4>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a18      	ldr	r2, [pc, #96]	; (8001a38 <HAL_SPI_MspInit+0xc4>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <HAL_SPI_MspInit+0xc4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ea:	23c0      	movs	r3, #192	; 0xc0
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019fa:	2305      	movs	r3, #5
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	480d      	ldr	r0, [pc, #52]	; (8001a3c <HAL_SPI_MspInit+0xc8>)
 8001a06:	f000 fef5 	bl	80027f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a1a:	2305      	movs	r3, #5
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	4806      	ldr	r0, [pc, #24]	; (8001a40 <HAL_SPI_MspInit+0xcc>)
 8001a26:	f000 fee5 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3728      	adds	r7, #40	; 0x28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40013000 	.word	0x40013000
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	40020400 	.word	0x40020400

08001a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a54:	d115      	bne.n	8001a82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <HAL_TIM_Base_MspInit+0x48>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <HAL_TIM_Base_MspInit+0x48>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_TIM_Base_MspInit+0x48>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	201c      	movs	r0, #28
 8001a78:	f000 fe85 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a7c:	201c      	movs	r0, #28
 8001a7e:	f000 fe9e 	bl	80027be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800

08001a90 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a19      	ldr	r2, [pc, #100]	; (8001b14 <HAL_USART_MspInit+0x84>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d12b      	bne.n	8001b0a <HAL_USART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_USART_MspInit+0x88>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <HAL_USART_MspInit+0x88>)
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <HAL_USART_MspInit+0x88>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_USART_MspInit+0x88>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a10      	ldr	r2, [pc, #64]	; (8001b18 <HAL_USART_MspInit+0x88>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_USART_MspInit+0x88>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001aea:	231c      	movs	r3, #28
 8001aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af6:	2303      	movs	r3, #3
 8001af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001afa:	2307      	movs	r3, #7
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	4805      	ldr	r0, [pc, #20]	; (8001b1c <HAL_USART_MspInit+0x8c>)
 8001b06:	f000 fe75 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b0a:	bf00      	nop
 8001b0c:	3728      	adds	r7, #40	; 0x28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40004400 	.word	0x40004400
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020000 	.word	0x40020000

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <NMI_Handler+0x4>

08001b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <MemManage_Handler+0x4>

08001b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <BusFault_Handler+0x4>

08001b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <UsageFault_Handler+0x4>

08001b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6c:	f000 f8a4 	bl	8001cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <ADC_IRQHandler+0x10>)
 8001b7a:	f000 f9b5 	bl	8001ee8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000394 	.word	0x20000394

08001b88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <TIM2_IRQHandler+0x10>)
 8001b8e:	f001 fd7b 	bl	8003688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000434 	.word	0x20000434

08001b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <SystemInit+0x20>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <SystemInit+0x20>)
 8001ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bc4:	480d      	ldr	r0, [pc, #52]	; (8001bfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bc6:	490e      	ldr	r1, [pc, #56]	; (8001c00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bc8:	4a0e      	ldr	r2, [pc, #56]	; (8001c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bcc:	e002      	b.n	8001bd4 <LoopCopyDataInit>

08001bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd2:	3304      	adds	r3, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd8:	d3f9      	bcc.n	8001bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bda:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bdc:	4c0b      	ldr	r4, [pc, #44]	; (8001c0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be0:	e001      	b.n	8001be6 <LoopFillZerobss>

08001be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be4:	3204      	adds	r2, #4

08001be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be8:	d3fb      	bcc.n	8001be2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bea:	f7ff ffd7 	bl	8001b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bee:	f002 fca5 	bl	800453c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bf2:	f7ff fac9 	bl	8001188 <main>
  bx  lr    
 8001bf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c04:	08005b40 	.word	0x08005b40
  ldr r2, =_sbss
 8001c08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c0c:	200006ec 	.word	0x200006ec

08001c10 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <DMA1_Stream0_IRQHandler>
	...

08001c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c18:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <HAL_Init+0x40>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <HAL_Init+0x40>)
 8001c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <HAL_Init+0x40>)
 8001c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <HAL_Init+0x40>)
 8001c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	f000 fd97 	bl	8002770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c42:	200f      	movs	r0, #15
 8001c44:	f000 f808 	bl	8001c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c48:	f7ff fe20 	bl	800188c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023c00 	.word	0x40023c00

08001c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_InitTick+0x54>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_InitTick+0x58>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fdaf 	bl	80027da <HAL_SYSTICK_Config>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00e      	b.n	8001ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b0f      	cmp	r3, #15
 8001c8a:	d80a      	bhi.n	8001ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f000 fd77 	bl	8002786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c98:	4a06      	ldr	r2, [pc, #24]	; (8001cb4 <HAL_InitTick+0x5c>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e000      	b.n	8001ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000008 	.word	0x20000008
 8001cb4:	20000004 	.word	0x20000004

08001cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_IncTick+0x20>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_IncTick+0x24>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <HAL_IncTick+0x24>)
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000008 	.word	0x20000008
 8001cdc:	200006e8 	.word	0x200006e8

08001ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <HAL_GetTick+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	200006e8 	.word	0x200006e8

08001cf8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e033      	b.n	8001d76 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff fde0 	bl	80018dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d118      	bne.n	8001d68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d3e:	f023 0302 	bic.w	r3, r3, #2
 8001d42:	f043 0202 	orr.w	r2, r3, #2
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fb3a 	bl	80023c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f023 0303 	bic.w	r3, r3, #3
 8001d5e:	f043 0201 	orr.w	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	641a      	str	r2, [r3, #64]	; 0x40
 8001d66:	e001      	b.n	8001d6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_Start+0x1a>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e097      	b.n	8001eca <HAL_ADC_Start+0x14a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d018      	beq.n	8001de2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dc0:	4b45      	ldr	r3, [pc, #276]	; (8001ed8 <HAL_ADC_Start+0x158>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a45      	ldr	r2, [pc, #276]	; (8001edc <HAL_ADC_Start+0x15c>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	0c9a      	lsrs	r2, r3, #18
 8001dcc:	4613      	mov	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001dd4:	e002      	b.n	8001ddc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f9      	bne.n	8001dd6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d15f      	bne.n	8001eb0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001df8:	f023 0301 	bic.w	r3, r3, #1
 8001dfc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d007      	beq.n	8001e22 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e2e:	d106      	bne.n	8001e3e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e34:	f023 0206 	bic.w	r2, r3, #6
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	645a      	str	r2, [r3, #68]	; 0x44
 8001e3c:	e002      	b.n	8001e44 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e4c:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <HAL_ADC_Start+0x160>)
 8001e4e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e58:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10f      	bne.n	8001e86 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d129      	bne.n	8001ec8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	e020      	b.n	8001ec8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <HAL_ADC_Start+0x164>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d11b      	bne.n	8001ec8 <HAL_ADC_Start+0x148>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d114      	bne.n	8001ec8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	e00b      	b.n	8001ec8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	f043 0210 	orr.w	r2, r3, #16
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec0:	f043 0201 	orr.w	r2, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	431bde83 	.word	0x431bde83
 8001ee0:	40012300 	.word	0x40012300
 8001ee4:	40012000 	.word	0x40012000

08001ee8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f003 0320 	and.w	r3, r3, #32
 8001f16:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d049      	beq.n	8001fb2 <HAL_ADC_IRQHandler+0xca>
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d046      	beq.n	8001fb2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d105      	bne.n	8001f3c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d12b      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d127      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d006      	beq.n	8001f6e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d119      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0220 	bic.w	r2, r2, #32
 8001f7c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d105      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8bd 	bl	8002122 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0212 	mvn.w	r2, #18
 8001fb0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d057      	beq.n	8002078 <HAL_ADC_IRQHandler+0x190>
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d054      	beq.n	8002078 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d105      	bne.n	8001fe6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d139      	bne.n	8002068 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d006      	beq.n	8002010 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800200c:	2b00      	cmp	r3, #0
 800200e:	d12b      	bne.n	8002068 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800201a:	2b00      	cmp	r3, #0
 800201c:	d124      	bne.n	8002068 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002028:	2b00      	cmp	r3, #0
 800202a:	d11d      	bne.n	8002068 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002030:	2b00      	cmp	r3, #0
 8002032:	d119      	bne.n	8002068 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002042:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002058:	2b00      	cmp	r3, #0
 800205a:	d105      	bne.n	8002068 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	f043 0201 	orr.w	r2, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 faa7 	bl	80025bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f06f 020c 	mvn.w	r2, #12
 8002076:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002086:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d017      	beq.n	80020be <HAL_ADC_IRQHandler+0x1d6>
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d014      	beq.n	80020be <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d10d      	bne.n	80020be <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f841 	bl	8002136 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0201 	mvn.w	r2, #1
 80020bc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020cc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d015      	beq.n	8002100 <HAL_ADC_IRQHandler+0x218>
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d012      	beq.n	8002100 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f043 0202 	orr.w	r2, r3, #2
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f06f 0220 	mvn.w	r2, #32
 80020ee:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f82a 	bl	800214a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f06f 0220 	mvn.w	r2, #32
 80020fe:	601a      	str	r2, [r3, #0]
  }
}
 8002100:	bf00      	nop
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_ADC_ConfigChannel+0x1c>
 8002178:	2302      	movs	r3, #2
 800217a:	e113      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x244>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b09      	cmp	r3, #9
 800218a:	d925      	bls.n	80021d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68d9      	ldr	r1, [r3, #12]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	3b1e      	subs	r3, #30
 80021a2:	2207      	movs	r2, #7
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43da      	mvns	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	400a      	ands	r2, r1
 80021b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68d9      	ldr	r1, [r3, #12]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	4618      	mov	r0, r3
 80021c4:	4603      	mov	r3, r0
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4403      	add	r3, r0
 80021ca:	3b1e      	subs	r3, #30
 80021cc:	409a      	lsls	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	e022      	b.n	800221e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6919      	ldr	r1, [r3, #16]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	4613      	mov	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	2207      	movs	r2, #7
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	400a      	ands	r2, r1
 80021fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6919      	ldr	r1, [r3, #16]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	4618      	mov	r0, r3
 800220e:	4603      	mov	r3, r0
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4403      	add	r3, r0
 8002214:	409a      	lsls	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b06      	cmp	r3, #6
 8002224:	d824      	bhi.n	8002270 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	3b05      	subs	r3, #5
 8002238:	221f      	movs	r2, #31
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	400a      	ands	r2, r1
 8002246:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	4618      	mov	r0, r3
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	3b05      	subs	r3, #5
 8002262:	fa00 f203 	lsl.w	r2, r0, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	635a      	str	r2, [r3, #52]	; 0x34
 800226e:	e04c      	b.n	800230a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b0c      	cmp	r3, #12
 8002276:	d824      	bhi.n	80022c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	3b23      	subs	r3, #35	; 0x23
 800228a:	221f      	movs	r2, #31
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43da      	mvns	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	400a      	ands	r2, r1
 8002298:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	3b23      	subs	r3, #35	; 0x23
 80022b4:	fa00 f203 	lsl.w	r2, r0, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
 80022c0:	e023      	b.n	800230a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	3b41      	subs	r3, #65	; 0x41
 80022d4:	221f      	movs	r2, #31
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43da      	mvns	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	400a      	ands	r2, r1
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	4618      	mov	r0, r3
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	3b41      	subs	r3, #65	; 0x41
 80022fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800230a:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <HAL_ADC_ConfigChannel+0x250>)
 800230c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a28      	ldr	r2, [pc, #160]	; (80023b4 <HAL_ADC_ConfigChannel+0x254>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d10f      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x1d8>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b12      	cmp	r3, #18
 800231e:	d10b      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <HAL_ADC_ConfigChannel+0x254>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d12b      	bne.n	800239a <HAL_ADC_ConfigChannel+0x23a>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <HAL_ADC_ConfigChannel+0x258>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d003      	beq.n	8002354 <HAL_ADC_ConfigChannel+0x1f4>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b11      	cmp	r3, #17
 8002352:	d122      	bne.n	800239a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a11      	ldr	r2, [pc, #68]	; (80023b8 <HAL_ADC_ConfigChannel+0x258>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d111      	bne.n	800239a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002376:	4b11      	ldr	r3, [pc, #68]	; (80023bc <HAL_ADC_ConfigChannel+0x25c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a11      	ldr	r2, [pc, #68]	; (80023c0 <HAL_ADC_ConfigChannel+0x260>)
 800237c:	fba2 2303 	umull	r2, r3, r2, r3
 8002380:	0c9a      	lsrs	r2, r3, #18
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800238c:	e002      	b.n	8002394 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	3b01      	subs	r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f9      	bne.n	800238e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40012300 	.word	0x40012300
 80023b4:	40012000 	.word	0x40012000
 80023b8:	10000012 	.word	0x10000012
 80023bc:	20000000 	.word	0x20000000
 80023c0:	431bde83 	.word	0x431bde83

080023c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023cc:	4b79      	ldr	r3, [pc, #484]	; (80025b4 <ADC_Init+0x1f0>)
 80023ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	431a      	orrs	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6859      	ldr	r1, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	021a      	lsls	r2, r3, #8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800241c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800243e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6899      	ldr	r1, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	4a58      	ldr	r2, [pc, #352]	; (80025b8 <ADC_Init+0x1f4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d022      	beq.n	80024a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800246a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6899      	ldr	r1, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800248c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6899      	ldr	r1, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	e00f      	b.n	80024c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0202 	bic.w	r2, r2, #2
 80024d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6899      	ldr	r1, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7e1b      	ldrb	r3, [r3, #24]
 80024dc:	005a      	lsls	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01b      	beq.n	8002528 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800250e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6859      	ldr	r1, [r3, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	3b01      	subs	r3, #1
 800251c:	035a      	lsls	r2, r3, #13
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	e007      	b.n	8002538 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002536:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002546:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	3b01      	subs	r3, #1
 8002554:	051a      	lsls	r2, r3, #20
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800256c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6899      	ldr	r1, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800257a:	025a      	lsls	r2, r3, #9
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002592:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6899      	ldr	r1, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	029a      	lsls	r2, r3, #10
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	609a      	str	r2, [r3, #8]
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	40012300 	.word	0x40012300
 80025b8:	0f000001 	.word	0x0f000001

080025bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025ec:	4013      	ands	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002602:	4a04      	ldr	r2, [pc, #16]	; (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	60d3      	str	r3, [r2, #12]
}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800261c:	4b04      	ldr	r3, [pc, #16]	; (8002630 <__NVIC_GetPriorityGrouping+0x18>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 0307 	and.w	r3, r3, #7
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	2b00      	cmp	r3, #0
 8002644:	db0b      	blt.n	800265e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	4907      	ldr	r1, [pc, #28]	; (800266c <__NVIC_EnableIRQ+0x38>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2001      	movs	r0, #1
 8002656:	fa00 f202 	lsl.w	r2, r0, r2
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000e100 	.word	0xe000e100

08002670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	2b00      	cmp	r3, #0
 8002682:	db0a      	blt.n	800269a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	490c      	ldr	r1, [pc, #48]	; (80026bc <__NVIC_SetPriority+0x4c>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	440b      	add	r3, r1
 8002694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002698:	e00a      	b.n	80026b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4908      	ldr	r1, [pc, #32]	; (80026c0 <__NVIC_SetPriority+0x50>)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	3b04      	subs	r3, #4
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	440b      	add	r3, r1
 80026ae:	761a      	strb	r2, [r3, #24]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	; 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f1c3 0307 	rsb	r3, r3, #7
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf28      	it	cs
 80026e2:	2304      	movcs	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d902      	bls.n	80026f4 <NVIC_EncodePriority+0x30>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3b03      	subs	r3, #3
 80026f2:	e000      	b.n	80026f6 <NVIC_EncodePriority+0x32>
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43d9      	mvns	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	4313      	orrs	r3, r2
         );
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	; 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800273c:	d301      	bcc.n	8002742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273e:	2301      	movs	r3, #1
 8002740:	e00f      	b.n	8002762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002742:	4a0a      	ldr	r2, [pc, #40]	; (800276c <SysTick_Config+0x40>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274a:	210f      	movs	r1, #15
 800274c:	f04f 30ff 	mov.w	r0, #4294967295
 8002750:	f7ff ff8e 	bl	8002670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <SysTick_Config+0x40>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275a:	4b04      	ldr	r3, [pc, #16]	; (800276c <SysTick_Config+0x40>)
 800275c:	2207      	movs	r2, #7
 800275e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	e000e010 	.word	0xe000e010

08002770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff29 	bl	80025d0 <__NVIC_SetPriorityGrouping>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002798:	f7ff ff3e 	bl	8002618 <__NVIC_GetPriorityGrouping>
 800279c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f7ff ff8e 	bl	80026c4 <NVIC_EncodePriority>
 80027a8:	4602      	mov	r2, r0
 80027aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff5d 	bl	8002670 <__NVIC_SetPriority>
}
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff31 	bl	8002634 <__NVIC_EnableIRQ>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ffa2 	bl	800272c <SysTick_Config>
 80027e8:	4603      	mov	r3, r0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	e159      	b.n	8002ac4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002810:	2201      	movs	r2, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	429a      	cmp	r2, r3
 800282a:	f040 8148 	bne.w	8002abe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d005      	beq.n	8002846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002842:	2b02      	cmp	r3, #2
 8002844:	d130      	bne.n	80028a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	2203      	movs	r2, #3
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 0201 	and.w	r2, r3, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d017      	beq.n	80028e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	2203      	movs	r2, #3
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d123      	bne.n	8002938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	08da      	lsrs	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3208      	adds	r2, #8
 80028f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	220f      	movs	r2, #15
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	08da      	lsrs	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3208      	adds	r2, #8
 8002932:	69b9      	ldr	r1, [r7, #24]
 8002934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0203 	and.w	r2, r3, #3
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80a2 	beq.w	8002abe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4b57      	ldr	r3, [pc, #348]	; (8002adc <HAL_GPIO_Init+0x2e8>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	4a56      	ldr	r2, [pc, #344]	; (8002adc <HAL_GPIO_Init+0x2e8>)
 8002984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002988:	6453      	str	r3, [r2, #68]	; 0x44
 800298a:	4b54      	ldr	r3, [pc, #336]	; (8002adc <HAL_GPIO_Init+0x2e8>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002996:	4a52      	ldr	r2, [pc, #328]	; (8002ae0 <HAL_GPIO_Init+0x2ec>)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	3302      	adds	r3, #2
 800299e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	220f      	movs	r2, #15
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a49      	ldr	r2, [pc, #292]	; (8002ae4 <HAL_GPIO_Init+0x2f0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d019      	beq.n	80029f6 <HAL_GPIO_Init+0x202>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a48      	ldr	r2, [pc, #288]	; (8002ae8 <HAL_GPIO_Init+0x2f4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_GPIO_Init+0x1fe>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a47      	ldr	r2, [pc, #284]	; (8002aec <HAL_GPIO_Init+0x2f8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00d      	beq.n	80029ee <HAL_GPIO_Init+0x1fa>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a46      	ldr	r2, [pc, #280]	; (8002af0 <HAL_GPIO_Init+0x2fc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d007      	beq.n	80029ea <HAL_GPIO_Init+0x1f6>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a45      	ldr	r2, [pc, #276]	; (8002af4 <HAL_GPIO_Init+0x300>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d101      	bne.n	80029e6 <HAL_GPIO_Init+0x1f2>
 80029e2:	2304      	movs	r3, #4
 80029e4:	e008      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029e6:	2307      	movs	r3, #7
 80029e8:	e006      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029ea:	2303      	movs	r3, #3
 80029ec:	e004      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e002      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029f6:	2300      	movs	r3, #0
 80029f8:	69fa      	ldr	r2, [r7, #28]
 80029fa:	f002 0203 	and.w	r2, r2, #3
 80029fe:	0092      	lsls	r2, r2, #2
 8002a00:	4093      	lsls	r3, r2
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a08:	4935      	ldr	r1, [pc, #212]	; (8002ae0 <HAL_GPIO_Init+0x2ec>)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	3302      	adds	r3, #2
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a16:	4b38      	ldr	r3, [pc, #224]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a3a:	4a2f      	ldr	r2, [pc, #188]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a64:	4a24      	ldr	r2, [pc, #144]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a6a:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a8e:	4a1a      	ldr	r2, [pc, #104]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a94:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ab8:	4a0f      	ldr	r2, [pc, #60]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	61fb      	str	r3, [r7, #28]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	2b0f      	cmp	r3, #15
 8002ac8:	f67f aea2 	bls.w	8002810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40013800 	.word	0x40013800
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	40020400 	.word	0x40020400
 8002aec:	40020800 	.word	0x40020800
 8002af0:	40020c00 	.word	0x40020c00
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40013c00 	.word	0x40013c00

08002afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	807b      	strh	r3, [r7, #2]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b0c:	787b      	ldrb	r3, [r7, #1]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b12:	887a      	ldrh	r2, [r7, #2]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b18:	e003      	b.n	8002b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b1a:	887b      	ldrh	r3, [r7, #2]
 8002b1c:	041a      	lsls	r2, r3, #16
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	619a      	str	r2, [r3, #24]
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	460b      	mov	r3, r1
 8002b38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b40:	887a      	ldrh	r2, [r7, #2]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4013      	ands	r3, r2
 8002b46:	041a      	lsls	r2, r3, #16
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	43d9      	mvns	r1, r3
 8002b4c:	887b      	ldrh	r3, [r7, #2]
 8002b4e:	400b      	ands	r3, r1
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	619a      	str	r2, [r3, #24]
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e267      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d075      	beq.n	8002c6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b82:	4b88      	ldr	r3, [pc, #544]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d00c      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8e:	4b85      	ldr	r3, [pc, #532]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d112      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9a:	4b82      	ldr	r3, [pc, #520]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	4b7e      	ldr	r3, [pc, #504]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d05b      	beq.n	8002c6c <HAL_RCC_OscConfig+0x108>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d157      	bne.n	8002c6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e242      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d106      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x74>
 8002bca:	4b76      	ldr	r3, [pc, #472]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a75      	ldr	r2, [pc, #468]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e01d      	b.n	8002c14 <HAL_RCC_OscConfig+0xb0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x98>
 8002be2:	4b70      	ldr	r3, [pc, #448]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6f      	ldr	r2, [pc, #444]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b6d      	ldr	r3, [pc, #436]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a6c      	ldr	r2, [pc, #432]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0xb0>
 8002bfc:	4b69      	ldr	r3, [pc, #420]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a68      	ldr	r2, [pc, #416]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b66      	ldr	r3, [pc, #408]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a65      	ldr	r2, [pc, #404]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7ff f860 	bl	8001ce0 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c24:	f7ff f85c 	bl	8001ce0 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e207      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b5b      	ldr	r3, [pc, #364]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0xc0>
 8002c42:	e014      	b.n	8002c6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7ff f84c 	bl	8001ce0 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7ff f848 	bl	8001ce0 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e1f3      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	4b51      	ldr	r3, [pc, #324]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0xe8>
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d063      	beq.n	8002d42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c7a:	4b4a      	ldr	r3, [pc, #296]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00b      	beq.n	8002c9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c86:	4b47      	ldr	r3, [pc, #284]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d11c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c92:	4b44      	ldr	r3, [pc, #272]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d116      	bne.n	8002ccc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9e:	4b41      	ldr	r3, [pc, #260]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x152>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e1c7      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4937      	ldr	r1, [pc, #220]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cca:	e03a      	b.n	8002d42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d020      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd4:	4b34      	ldr	r3, [pc, #208]	; (8002da8 <HAL_RCC_OscConfig+0x244>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cda:	f7ff f801 	bl	8001ce0 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce2:	f7fe fffd 	bl	8001ce0 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e1a8      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d00:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4925      	ldr	r1, [pc, #148]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	600b      	str	r3, [r1, #0]
 8002d14:	e015      	b.n	8002d42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d16:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <HAL_RCC_OscConfig+0x244>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fe ffe0 	bl	8001ce0 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d24:	f7fe ffdc 	bl	8001ce0 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e187      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d36:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d036      	beq.n	8002dbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d016      	beq.n	8002d84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <HAL_RCC_OscConfig+0x248>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5c:	f7fe ffc0 	bl	8001ce0 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d64:	f7fe ffbc 	bl	8001ce0 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e167      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d76:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x200>
 8002d82:	e01b      	b.n	8002dbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d84:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_RCC_OscConfig+0x248>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8a:	f7fe ffa9 	bl	8001ce0 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d90:	e00e      	b.n	8002db0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d92:	f7fe ffa5 	bl	8001ce0 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d907      	bls.n	8002db0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e150      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
 8002da4:	40023800 	.word	0x40023800
 8002da8:	42470000 	.word	0x42470000
 8002dac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db0:	4b88      	ldr	r3, [pc, #544]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ea      	bne.n	8002d92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8097 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dce:	4b81      	ldr	r3, [pc, #516]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10f      	bne.n	8002dfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	4b7d      	ldr	r3, [pc, #500]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	4a7c      	ldr	r2, [pc, #496]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dea:	4b7a      	ldr	r3, [pc, #488]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfa:	4b77      	ldr	r3, [pc, #476]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d118      	bne.n	8002e38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e06:	4b74      	ldr	r3, [pc, #464]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a73      	ldr	r2, [pc, #460]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e12:	f7fe ff65 	bl	8001ce0 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1a:	f7fe ff61 	bl	8001ce0 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e10c      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	4b6a      	ldr	r3, [pc, #424]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCC_OscConfig+0x2ea>
 8002e40:	4b64      	ldr	r3, [pc, #400]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	4a63      	ldr	r2, [pc, #396]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4c:	e01c      	b.n	8002e88 <HAL_RCC_OscConfig+0x324>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b05      	cmp	r3, #5
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x30c>
 8002e56:	4b5f      	ldr	r3, [pc, #380]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	4a5e      	ldr	r2, [pc, #376]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	f043 0304 	orr.w	r3, r3, #4
 8002e60:	6713      	str	r3, [r2, #112]	; 0x70
 8002e62:	4b5c      	ldr	r3, [pc, #368]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	4a5b      	ldr	r2, [pc, #364]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCC_OscConfig+0x324>
 8002e70:	4b58      	ldr	r3, [pc, #352]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	4a57      	ldr	r2, [pc, #348]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7c:	4b55      	ldr	r3, [pc, #340]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	4a54      	ldr	r2, [pc, #336]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e82:	f023 0304 	bic.w	r3, r3, #4
 8002e86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d015      	beq.n	8002ebc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e90:	f7fe ff26 	bl	8001ce0 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e98:	f7fe ff22 	bl	8001ce0 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e0cb      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eae:	4b49      	ldr	r3, [pc, #292]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0ee      	beq.n	8002e98 <HAL_RCC_OscConfig+0x334>
 8002eba:	e014      	b.n	8002ee6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebc:	f7fe ff10 	bl	8001ce0 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec4:	f7fe ff0c 	bl	8001ce0 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e0b5      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eda:	4b3e      	ldr	r3, [pc, #248]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1ee      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d105      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eec:	4b39      	ldr	r3, [pc, #228]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	4a38      	ldr	r2, [pc, #224]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80a1 	beq.w	8003044 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f02:	4b34      	ldr	r3, [pc, #208]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d05c      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d141      	bne.n	8002f9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f16:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7fe fee0 	bl	8001ce0 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fe fedc 	bl	8001ce0 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e087      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f36:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	019b      	lsls	r3, r3, #6
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	041b      	lsls	r3, r3, #16
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	061b      	lsls	r3, r3, #24
 8002f66:	491b      	ldr	r1, [pc, #108]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f72:	f7fe feb5 	bl	8001ce0 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7fe feb1 	bl	8001ce0 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e05c      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x416>
 8002f98:	e054      	b.n	8003044 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fe9e 	bl	8001ce0 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fe fe9a 	bl	8001ce0 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e045      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x444>
 8002fc6:	e03d      	b.n	8003044 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e038      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40007000 	.word	0x40007000
 8002fdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <HAL_RCC_OscConfig+0x4ec>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d028      	beq.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d121      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d11a      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003010:	4013      	ands	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003016:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003018:	4293      	cmp	r3, r2
 800301a:	d111      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	3b01      	subs	r3, #1
 800302a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d107      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800

08003054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0cc      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003068:	4b68      	ldr	r3, [pc, #416]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d90c      	bls.n	8003090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b65      	ldr	r3, [pc, #404]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b63      	ldr	r3, [pc, #396]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0b8      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d020      	beq.n	80030de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a8:	4b59      	ldr	r3, [pc, #356]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a58      	ldr	r2, [pc, #352]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c0:	4b53      	ldr	r3, [pc, #332]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4a52      	ldr	r2, [pc, #328]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030cc:	4b50      	ldr	r3, [pc, #320]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	494d      	ldr	r1, [pc, #308]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d044      	beq.n	8003174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	4b47      	ldr	r3, [pc, #284]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d119      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e07f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d003      	beq.n	8003112 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800310e:	2b03      	cmp	r3, #3
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003112:	4b3f      	ldr	r3, [pc, #252]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e06f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003122:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e067      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003132:	4b37      	ldr	r3, [pc, #220]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4934      	ldr	r1, [pc, #208]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	4313      	orrs	r3, r2
 8003142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003144:	f7fe fdcc 	bl	8001ce0 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	e00a      	b.n	8003162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314c:	f7fe fdc8 	bl	8001ce0 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e04f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	4b2b      	ldr	r3, [pc, #172]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 020c 	and.w	r2, r3, #12
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	429a      	cmp	r2, r3
 8003172:	d1eb      	bne.n	800314c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003174:	4b25      	ldr	r3, [pc, #148]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d20c      	bcs.n	800319c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b20      	ldr	r3, [pc, #128]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e032      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a8:	4b19      	ldr	r3, [pc, #100]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4916      	ldr	r1, [pc, #88]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031c6:	4b12      	ldr	r3, [pc, #72]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	490e      	ldr	r1, [pc, #56]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031da:	f000 f821 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 80031de:	4602      	mov	r2, r0
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	490a      	ldr	r1, [pc, #40]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	5ccb      	ldrb	r3, [r1, r3]
 80031ee:	fa22 f303 	lsr.w	r3, r2, r3
 80031f2:	4a09      	ldr	r2, [pc, #36]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe fd2c 	bl	8001c58 <HAL_InitTick>

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40023c00 	.word	0x40023c00
 8003210:	40023800 	.word	0x40023800
 8003214:	08005940 	.word	0x08005940
 8003218:	20000000 	.word	0x20000000
 800321c:	20000004 	.word	0x20000004

08003220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003224:	b090      	sub	sp, #64	; 0x40
 8003226:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	637b      	str	r3, [r7, #52]	; 0x34
 800322c:	2300      	movs	r3, #0
 800322e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003230:	2300      	movs	r3, #0
 8003232:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003238:	4b59      	ldr	r3, [pc, #356]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 030c 	and.w	r3, r3, #12
 8003240:	2b08      	cmp	r3, #8
 8003242:	d00d      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0x40>
 8003244:	2b08      	cmp	r3, #8
 8003246:	f200 80a1 	bhi.w	800338c <HAL_RCC_GetSysClockFreq+0x16c>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0x34>
 800324e:	2b04      	cmp	r3, #4
 8003250:	d003      	beq.n	800325a <HAL_RCC_GetSysClockFreq+0x3a>
 8003252:	e09b      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003254:	4b53      	ldr	r3, [pc, #332]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003256:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003258:	e09b      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800325a:	4b53      	ldr	r3, [pc, #332]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800325c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800325e:	e098      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003260:	4b4f      	ldr	r3, [pc, #316]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003268:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800326a:	4b4d      	ldr	r3, [pc, #308]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d028      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003276:	4b4a      	ldr	r3, [pc, #296]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	099b      	lsrs	r3, r3, #6
 800327c:	2200      	movs	r2, #0
 800327e:	623b      	str	r3, [r7, #32]
 8003280:	627a      	str	r2, [r7, #36]	; 0x24
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003288:	2100      	movs	r1, #0
 800328a:	4b47      	ldr	r3, [pc, #284]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800328c:	fb03 f201 	mul.w	r2, r3, r1
 8003290:	2300      	movs	r3, #0
 8003292:	fb00 f303 	mul.w	r3, r0, r3
 8003296:	4413      	add	r3, r2
 8003298:	4a43      	ldr	r2, [pc, #268]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800329a:	fba0 1202 	umull	r1, r2, r0, r2
 800329e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032a0:	460a      	mov	r2, r1
 80032a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80032a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a6:	4413      	add	r3, r2
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ac:	2200      	movs	r2, #0
 80032ae:	61bb      	str	r3, [r7, #24]
 80032b0:	61fa      	str	r2, [r7, #28]
 80032b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032ba:	f7fd fc91 	bl	8000be0 <__aeabi_uldivmod>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4613      	mov	r3, r2
 80032c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c6:	e053      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c8:	4b35      	ldr	r3, [pc, #212]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	099b      	lsrs	r3, r3, #6
 80032ce:	2200      	movs	r2, #0
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	617a      	str	r2, [r7, #20]
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032da:	f04f 0b00 	mov.w	fp, #0
 80032de:	4652      	mov	r2, sl
 80032e0:	465b      	mov	r3, fp
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	f04f 0100 	mov.w	r1, #0
 80032ea:	0159      	lsls	r1, r3, #5
 80032ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f0:	0150      	lsls	r0, r2, #5
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	ebb2 080a 	subs.w	r8, r2, sl
 80032fa:	eb63 090b 	sbc.w	r9, r3, fp
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800330a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800330e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003312:	ebb2 0408 	subs.w	r4, r2, r8
 8003316:	eb63 0509 	sbc.w	r5, r3, r9
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	00eb      	lsls	r3, r5, #3
 8003324:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003328:	00e2      	lsls	r2, r4, #3
 800332a:	4614      	mov	r4, r2
 800332c:	461d      	mov	r5, r3
 800332e:	eb14 030a 	adds.w	r3, r4, sl
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	eb45 030b 	adc.w	r3, r5, fp
 8003338:	607b      	str	r3, [r7, #4]
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003346:	4629      	mov	r1, r5
 8003348:	028b      	lsls	r3, r1, #10
 800334a:	4621      	mov	r1, r4
 800334c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003350:	4621      	mov	r1, r4
 8003352:	028a      	lsls	r2, r1, #10
 8003354:	4610      	mov	r0, r2
 8003356:	4619      	mov	r1, r3
 8003358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335a:	2200      	movs	r2, #0
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	60fa      	str	r2, [r7, #12]
 8003360:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003364:	f7fd fc3c 	bl	8000be0 <__aeabi_uldivmod>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4613      	mov	r3, r2
 800336e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	0c1b      	lsrs	r3, r3, #16
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	3301      	adds	r3, #1
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003380:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	fbb2 f3f3 	udiv	r3, r2, r3
 8003388:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800338a:	e002      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800338e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003394:	4618      	mov	r0, r3
 8003396:	3740      	adds	r7, #64	; 0x40
 8003398:	46bd      	mov	sp, r7
 800339a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	00f42400 	.word	0x00f42400
 80033a8:	017d7840 	.word	0x017d7840

080033ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b0:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033b2:	681b      	ldr	r3, [r3, #0]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20000000 	.word	0x20000000

080033c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033c8:	f7ff fff0 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	0a9b      	lsrs	r3, r3, #10
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	4903      	ldr	r1, [pc, #12]	; (80033e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40023800 	.word	0x40023800
 80033e8:	08005950 	.word	0x08005950

080033ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033f0:	f7ff ffdc 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	0b5b      	lsrs	r3, r3, #13
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	4903      	ldr	r1, [pc, #12]	; (8003410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003402:	5ccb      	ldrb	r3, [r1, r3]
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003408:	4618      	mov	r0, r3
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40023800 	.word	0x40023800
 8003410:	08005950 	.word	0x08005950

08003414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e07b      	b.n	800351e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	2b00      	cmp	r3, #0
 800342c:	d108      	bne.n	8003440 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003436:	d009      	beq.n	800344c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	61da      	str	r2, [r3, #28]
 800343e:	e005      	b.n	800344c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fe fa84 	bl	8001974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003482:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	ea42 0103 	orr.w	r1, r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	0c1b      	lsrs	r3, r3, #16
 80034ea:	f003 0104 	and.w	r1, r3, #4
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	f003 0210 	and.w	r2, r3, #16
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800350c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e041      	b.n	80035bc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d106      	bne.n	8003552 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7fe fa79 	bl	8001a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2202      	movs	r2, #2
 8003556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	4619      	mov	r1, r3
 8003564:	4610      	mov	r0, r2
 8003566:	f000 fa87 	bl	8003a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d001      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e044      	b.n	8003666 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1e      	ldr	r2, [pc, #120]	; (8003674 <HAL_TIM_Base_Start_IT+0xb0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d018      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x6c>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003606:	d013      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x6c>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1a      	ldr	r2, [pc, #104]	; (8003678 <HAL_TIM_Base_Start_IT+0xb4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00e      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x6c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a19      	ldr	r2, [pc, #100]	; (800367c <HAL_TIM_Base_Start_IT+0xb8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d009      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x6c>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a17      	ldr	r2, [pc, #92]	; (8003680 <HAL_TIM_Base_Start_IT+0xbc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d004      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x6c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a16      	ldr	r2, [pc, #88]	; (8003684 <HAL_TIM_Base_Start_IT+0xc0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d111      	bne.n	8003654 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b06      	cmp	r3, #6
 8003640:	d010      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0201 	orr.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003652:	e007      	b.n	8003664 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40010000 	.word	0x40010000
 8003678:	40000400 	.word	0x40000400
 800367c:	40000800 	.word	0x40000800
 8003680:	40000c00 	.word	0x40000c00
 8003684:	40014000 	.word	0x40014000

08003688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b02      	cmp	r3, #2
 800369c:	d122      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d11b      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0202 	mvn.w	r2, #2
 80036b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f9b5 	bl	8003a3a <HAL_TIM_IC_CaptureCallback>
 80036d0:	e005      	b.n	80036de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f9a7 	bl	8003a26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f9b8 	bl	8003a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d122      	bne.n	8003738 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d11b      	bne.n	8003738 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0204 	mvn.w	r2, #4
 8003708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2202      	movs	r2, #2
 800370e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f98b 	bl	8003a3a <HAL_TIM_IC_CaptureCallback>
 8003724:	e005      	b.n	8003732 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f97d 	bl	8003a26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f98e 	bl	8003a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b08      	cmp	r3, #8
 8003744:	d122      	bne.n	800378c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b08      	cmp	r3, #8
 8003752:	d11b      	bne.n	800378c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0208 	mvn.w	r2, #8
 800375c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2204      	movs	r2, #4
 8003762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f961 	bl	8003a3a <HAL_TIM_IC_CaptureCallback>
 8003778:	e005      	b.n	8003786 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f953 	bl	8003a26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f964 	bl	8003a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	2b10      	cmp	r3, #16
 8003798:	d122      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	2b10      	cmp	r3, #16
 80037a6:	d11b      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0210 	mvn.w	r2, #16
 80037b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2208      	movs	r2, #8
 80037b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f937 	bl	8003a3a <HAL_TIM_IC_CaptureCallback>
 80037cc:	e005      	b.n	80037da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f929 	bl	8003a26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f93a 	bl	8003a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d10e      	bne.n	800380c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d107      	bne.n	800380c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0201 	mvn.w	r2, #1
 8003804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fd fffc 	bl	8001804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003816:	2b80      	cmp	r3, #128	; 0x80
 8003818:	d10e      	bne.n	8003838 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003824:	2b80      	cmp	r3, #128	; 0x80
 8003826:	d107      	bne.n	8003838 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fab2 	bl	8003d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003842:	2b40      	cmp	r3, #64	; 0x40
 8003844:	d10e      	bne.n	8003864 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003850:	2b40      	cmp	r3, #64	; 0x40
 8003852:	d107      	bne.n	8003864 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800385c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f8ff 	bl	8003a62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b20      	cmp	r3, #32
 8003870:	d10e      	bne.n	8003890 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b20      	cmp	r3, #32
 800387e:	d107      	bne.n	8003890 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0220 	mvn.w	r2, #32
 8003888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fa7c 	bl	8003d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_TIM_ConfigClockSource+0x1c>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e0b4      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x186>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ec:	d03e      	beq.n	800396c <HAL_TIM_ConfigClockSource+0xd4>
 80038ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f2:	f200 8087 	bhi.w	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fa:	f000 8086 	beq.w	8003a0a <HAL_TIM_ConfigClockSource+0x172>
 80038fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003902:	d87f      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 8003904:	2b70      	cmp	r3, #112	; 0x70
 8003906:	d01a      	beq.n	800393e <HAL_TIM_ConfigClockSource+0xa6>
 8003908:	2b70      	cmp	r3, #112	; 0x70
 800390a:	d87b      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 800390c:	2b60      	cmp	r3, #96	; 0x60
 800390e:	d050      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0x11a>
 8003910:	2b60      	cmp	r3, #96	; 0x60
 8003912:	d877      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 8003914:	2b50      	cmp	r3, #80	; 0x50
 8003916:	d03c      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0xfa>
 8003918:	2b50      	cmp	r3, #80	; 0x50
 800391a:	d873      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d058      	beq.n	80039d2 <HAL_TIM_ConfigClockSource+0x13a>
 8003920:	2b40      	cmp	r3, #64	; 0x40
 8003922:	d86f      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 8003924:	2b30      	cmp	r3, #48	; 0x30
 8003926:	d064      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003928:	2b30      	cmp	r3, #48	; 0x30
 800392a:	d86b      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 800392c:	2b20      	cmp	r3, #32
 800392e:	d060      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003930:	2b20      	cmp	r3, #32
 8003932:	d867      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d05c      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003938:	2b10      	cmp	r3, #16
 800393a:	d05a      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0x15a>
 800393c:	e062      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	6899      	ldr	r1, [r3, #8]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f000 f98d 	bl	8003c6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003960:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	609a      	str	r2, [r3, #8]
      break;
 800396a:	e04f      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	6899      	ldr	r1, [r3, #8]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f000 f976 	bl	8003c6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800398e:	609a      	str	r2, [r3, #8]
      break;
 8003990:	e03c      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6859      	ldr	r1, [r3, #4]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	461a      	mov	r2, r3
 80039a0:	f000 f8ea 	bl	8003b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2150      	movs	r1, #80	; 0x50
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 f943 	bl	8003c36 <TIM_ITRx_SetConfig>
      break;
 80039b0:	e02c      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6859      	ldr	r1, [r3, #4]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	461a      	mov	r2, r3
 80039c0:	f000 f909 	bl	8003bd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2160      	movs	r1, #96	; 0x60
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 f933 	bl	8003c36 <TIM_ITRx_SetConfig>
      break;
 80039d0:	e01c      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6859      	ldr	r1, [r3, #4]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	461a      	mov	r2, r3
 80039e0:	f000 f8ca 	bl	8003b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2140      	movs	r1, #64	; 0x40
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 f923 	bl	8003c36 <TIM_ITRx_SetConfig>
      break;
 80039f0:	e00c      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4619      	mov	r1, r3
 80039fc:	4610      	mov	r0, r2
 80039fe:	f000 f91a 	bl	8003c36 <TIM_ITRx_SetConfig>
      break;
 8003a02:	e003      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
      break;
 8003a08:	e000      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a34      	ldr	r2, [pc, #208]	; (8003b5c <TIM_Base_SetConfig+0xe4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00f      	beq.n	8003ab0 <TIM_Base_SetConfig+0x38>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a96:	d00b      	beq.n	8003ab0 <TIM_Base_SetConfig+0x38>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a31      	ldr	r2, [pc, #196]	; (8003b60 <TIM_Base_SetConfig+0xe8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d007      	beq.n	8003ab0 <TIM_Base_SetConfig+0x38>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a30      	ldr	r2, [pc, #192]	; (8003b64 <TIM_Base_SetConfig+0xec>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d003      	beq.n	8003ab0 <TIM_Base_SetConfig+0x38>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a2f      	ldr	r2, [pc, #188]	; (8003b68 <TIM_Base_SetConfig+0xf0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d108      	bne.n	8003ac2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a25      	ldr	r2, [pc, #148]	; (8003b5c <TIM_Base_SetConfig+0xe4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d01b      	beq.n	8003b02 <TIM_Base_SetConfig+0x8a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad0:	d017      	beq.n	8003b02 <TIM_Base_SetConfig+0x8a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a22      	ldr	r2, [pc, #136]	; (8003b60 <TIM_Base_SetConfig+0xe8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d013      	beq.n	8003b02 <TIM_Base_SetConfig+0x8a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <TIM_Base_SetConfig+0xec>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00f      	beq.n	8003b02 <TIM_Base_SetConfig+0x8a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a20      	ldr	r2, [pc, #128]	; (8003b68 <TIM_Base_SetConfig+0xf0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00b      	beq.n	8003b02 <TIM_Base_SetConfig+0x8a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a1f      	ldr	r2, [pc, #124]	; (8003b6c <TIM_Base_SetConfig+0xf4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d007      	beq.n	8003b02 <TIM_Base_SetConfig+0x8a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a1e      	ldr	r2, [pc, #120]	; (8003b70 <TIM_Base_SetConfig+0xf8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d003      	beq.n	8003b02 <TIM_Base_SetConfig+0x8a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a1d      	ldr	r2, [pc, #116]	; (8003b74 <TIM_Base_SetConfig+0xfc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d108      	bne.n	8003b14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a08      	ldr	r2, [pc, #32]	; (8003b5c <TIM_Base_SetConfig+0xe4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d103      	bne.n	8003b48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	615a      	str	r2, [r3, #20]
}
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40010000 	.word	0x40010000
 8003b60:	40000400 	.word	0x40000400
 8003b64:	40000800 	.word	0x40000800
 8003b68:	40000c00 	.word	0x40000c00
 8003b6c:	40014000 	.word	0x40014000
 8003b70:	40014400 	.word	0x40014400
 8003b74:	40014800 	.word	0x40014800

08003b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	f023 0201 	bic.w	r2, r3, #1
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f023 030a 	bic.w	r3, r3, #10
 8003bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	621a      	str	r2, [r3, #32]
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b087      	sub	sp, #28
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	f023 0210 	bic.w	r2, r3, #16
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	031b      	lsls	r3, r3, #12
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	621a      	str	r2, [r3, #32]
}
 8003c2a:	bf00      	nop
 8003c2c:	371c      	adds	r7, #28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b085      	sub	sp, #20
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f043 0307 	orr.w	r3, r3, #7
 8003c58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	609a      	str	r2, [r3, #8]
}
 8003c60:	bf00      	nop
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	021a      	lsls	r2, r3, #8
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	609a      	str	r2, [r3, #8]
}
 8003ca0:	bf00      	nop
 8003ca2:	371c      	adds	r7, #28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e050      	b.n	8003d66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1c      	ldr	r2, [pc, #112]	; (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d018      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d10:	d013      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a18      	ldr	r2, [pc, #96]	; (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00e      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a16      	ldr	r2, [pc, #88]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d009      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a15      	ldr	r2, [pc, #84]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d004      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a13      	ldr	r2, [pc, #76]	; (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d10c      	bne.n	8003d54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40010000 	.word	0x40010000
 8003d78:	40000400 	.word	0x40000400
 8003d7c:	40000800 	.word	0x40000800
 8003d80:	40000c00 	.word	0x40000c00
 8003d84:	40014000 	.word	0x40014000

08003d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e033      	b.n	8003e2a <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fd fe5a 	bl	8001a90 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f90b 	bl	8004000 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695a      	ldr	r2, [r3, #20]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e08:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e18:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b08a      	sub	sp, #40	; 0x28
 8003e36:	af02      	add	r7, sp, #8
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	603b      	str	r3, [r7, #0]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d17c      	bne.n	8003f48 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_USART_Transmit+0x28>
 8003e54:	88fb      	ldrh	r3, [r7, #6]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e075      	b.n	8003f4a <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_USART_Transmit+0x3a>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e06e      	b.n	8003f4a <HAL_USART_Transmit+0x118>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2212      	movs	r2, #18
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e82:	f7fd ff2d 	bl	8001ce0 <HAL_GetTick>
 8003e86:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	88fa      	ldrh	r2, [r7, #6]
 8003e8c:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	88fa      	ldrh	r2, [r7, #6]
 8003e92:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9c:	d108      	bne.n	8003eb0 <HAL_USART_Transmit+0x7e>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d104      	bne.n	8003eb0 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	61bb      	str	r3, [r7, #24]
 8003eae:	e003      	b.n	8003eb8 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8003eb8:	e02a      	b.n	8003f10 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2180      	movs	r1, #128	; 0x80
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 f844 	bl	8003f52 <USART_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e03a      	b.n	8003f4a <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ee8:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	3302      	adds	r3, #2
 8003eee:	61bb      	str	r3, [r7, #24]
 8003ef0:	e007      	b.n	8003f02 <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	781a      	ldrb	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	3301      	adds	r3, #1
 8003f00:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1cf      	bne.n	8003eba <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2200      	movs	r2, #0
 8003f22:	2140      	movs	r1, #64	; 0x40
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 f814 	bl	8003f52 <USART_WaitOnFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e00a      	b.n	8003f4a <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e000      	b.n	8003f4a <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8003f48:	2302      	movs	r3, #2
  }
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003f62:	e038      	b.n	8003fd6 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6a:	d034      	beq.n	8003fd6 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <USART_WaitOnFlagUntilTimeout+0x30>
 8003f72:	f7fd feb5 	bl	8001ce0 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d229      	bcs.n	8003fd6 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f90:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0220 	bic.w	r2, r2, #32
 8003fa0:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fb0:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695a      	ldr	r2, [r3, #20]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e00f      	b.n	8003ff6 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	bf0c      	ite	eq
 8003fe6:	2301      	moveq	r3, #1
 8003fe8:	2300      	movne	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d0b7      	beq.n	8003f64 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004004:	b0c6      	sub	sp, #280	; 0x118
 8004006:	af00      	add	r7, sp, #0
 8004008:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 800400c:	2300      	movs	r3, #0
 800400e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68d9      	ldr	r1, [r3, #12]
 800401a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	f021 030c 	bic.w	r3, r1, #12
 8004024:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8004026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8004032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004036:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800403a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800403e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004042:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004048:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800404a:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 800404c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	431a      	orrs	r2, r3
 8004054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004058:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800405a:	431a      	orrs	r2, r3
 800405c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004060:	4313      	orrs	r3, r2
 8004062:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004066:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800406a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004074:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8004076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004086:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800408a:	f023 030c 	bic.w	r3, r3, #12
 800408e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	431a      	orrs	r2, r3
 80040a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80040b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040c0:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80040c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6959      	ldr	r1, [r3, #20]
 80040ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 80040d4:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 80040d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4b8b      	ldr	r3, [pc, #556]	; (800430c <USART_SetConfig+0x30c>)
 80040de:	429a      	cmp	r2, r3
 80040e0:	d006      	beq.n	80040f0 <USART_SetConfig+0xf0>
 80040e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	4b89      	ldr	r3, [pc, #548]	; (8004310 <USART_SetConfig+0x310>)
 80040ea:	429a      	cmp	r2, r3
 80040ec:	f040 8114 	bne.w	8004318 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040f0:	f7ff f97c 	bl	80033ec <HAL_RCC_GetPCLK2Freq>
 80040f4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80040f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040fc:	2200      	movs	r2, #0
 80040fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004102:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004106:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800410a:	4622      	mov	r2, r4
 800410c:	462b      	mov	r3, r5
 800410e:	1891      	adds	r1, r2, r2
 8004110:	6739      	str	r1, [r7, #112]	; 0x70
 8004112:	415b      	adcs	r3, r3
 8004114:	677b      	str	r3, [r7, #116]	; 0x74
 8004116:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800411a:	4621      	mov	r1, r4
 800411c:	eb12 0801 	adds.w	r8, r2, r1
 8004120:	4629      	mov	r1, r5
 8004122:	eb43 0901 	adc.w	r9, r3, r1
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800413a:	4690      	mov	r8, r2
 800413c:	4699      	mov	r9, r3
 800413e:	4623      	mov	r3, r4
 8004140:	eb18 0303 	adds.w	r3, r8, r3
 8004144:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004148:	462b      	mov	r3, r5
 800414a:	eb49 0303 	adc.w	r3, r9, r3
 800414e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800415e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004162:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004166:	460b      	mov	r3, r1
 8004168:	18db      	adds	r3, r3, r3
 800416a:	66bb      	str	r3, [r7, #104]	; 0x68
 800416c:	4613      	mov	r3, r2
 800416e:	eb42 0303 	adc.w	r3, r2, r3
 8004172:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004174:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004178:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800417c:	f7fc fd30 	bl	8000be0 <__aeabi_uldivmod>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4b63      	ldr	r3, [pc, #396]	; (8004314 <USART_SetConfig+0x314>)
 8004186:	fba3 2302 	umull	r2, r3, r3, r2
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	011c      	lsls	r4, r3, #4
 800418e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004192:	2200      	movs	r2, #0
 8004194:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004198:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800419c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80041a0:	4642      	mov	r2, r8
 80041a2:	464b      	mov	r3, r9
 80041a4:	1891      	adds	r1, r2, r2
 80041a6:	6639      	str	r1, [r7, #96]	; 0x60
 80041a8:	415b      	adcs	r3, r3
 80041aa:	667b      	str	r3, [r7, #100]	; 0x64
 80041ac:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80041b0:	4641      	mov	r1, r8
 80041b2:	1851      	adds	r1, r2, r1
 80041b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80041b6:	4649      	mov	r1, r9
 80041b8:	414b      	adcs	r3, r1
 80041ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80041c8:	4659      	mov	r1, fp
 80041ca:	00cb      	lsls	r3, r1, #3
 80041cc:	4651      	mov	r1, sl
 80041ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041d2:	4651      	mov	r1, sl
 80041d4:	00ca      	lsls	r2, r1, #3
 80041d6:	4610      	mov	r0, r2
 80041d8:	4619      	mov	r1, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	4642      	mov	r2, r8
 80041de:	189b      	adds	r3, r3, r2
 80041e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041e4:	464b      	mov	r3, r9
 80041e6:	460a      	mov	r2, r1
 80041e8:	eb42 0303 	adc.w	r3, r2, r3
 80041ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041fc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004200:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004204:	460b      	mov	r3, r1
 8004206:	18db      	adds	r3, r3, r3
 8004208:	653b      	str	r3, [r7, #80]	; 0x50
 800420a:	4613      	mov	r3, r2
 800420c:	eb42 0303 	adc.w	r3, r2, r3
 8004210:	657b      	str	r3, [r7, #84]	; 0x54
 8004212:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004216:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800421a:	f7fc fce1 	bl	8000be0 <__aeabi_uldivmod>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4611      	mov	r1, r2
 8004224:	4b3b      	ldr	r3, [pc, #236]	; (8004314 <USART_SetConfig+0x314>)
 8004226:	fba3 2301 	umull	r2, r3, r3, r1
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	2264      	movs	r2, #100	; 0x64
 800422e:	fb02 f303 	mul.w	r3, r2, r3
 8004232:	1acb      	subs	r3, r1, r3
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800423a:	4b36      	ldr	r3, [pc, #216]	; (8004314 <USART_SetConfig+0x314>)
 800423c:	fba3 2302 	umull	r2, r3, r3, r2
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004248:	441c      	add	r4, r3
 800424a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800424e:	2200      	movs	r2, #0
 8004250:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004254:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004258:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800425c:	4642      	mov	r2, r8
 800425e:	464b      	mov	r3, r9
 8004260:	1891      	adds	r1, r2, r2
 8004262:	64b9      	str	r1, [r7, #72]	; 0x48
 8004264:	415b      	adcs	r3, r3
 8004266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004268:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800426c:	4641      	mov	r1, r8
 800426e:	1851      	adds	r1, r2, r1
 8004270:	6439      	str	r1, [r7, #64]	; 0x40
 8004272:	4649      	mov	r1, r9
 8004274:	414b      	adcs	r3, r1
 8004276:	647b      	str	r3, [r7, #68]	; 0x44
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8004284:	4659      	mov	r1, fp
 8004286:	00cb      	lsls	r3, r1, #3
 8004288:	4651      	mov	r1, sl
 800428a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800428e:	4651      	mov	r1, sl
 8004290:	00ca      	lsls	r2, r1, #3
 8004292:	4610      	mov	r0, r2
 8004294:	4619      	mov	r1, r3
 8004296:	4603      	mov	r3, r0
 8004298:	4642      	mov	r2, r8
 800429a:	189b      	adds	r3, r3, r2
 800429c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042a0:	464b      	mov	r3, r9
 80042a2:	460a      	mov	r2, r1
 80042a4:	eb42 0303 	adc.w	r3, r2, r3
 80042a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042c0:	460b      	mov	r3, r1
 80042c2:	18db      	adds	r3, r3, r3
 80042c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80042c6:	4613      	mov	r3, r2
 80042c8:	eb42 0303 	adc.w	r3, r2, r3
 80042cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042d6:	f7fc fc83 	bl	8000be0 <__aeabi_uldivmod>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <USART_SetConfig+0x314>)
 80042e0:	fba3 1302 	umull	r1, r3, r3, r2
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	2164      	movs	r1, #100	; 0x64
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	3332      	adds	r3, #50	; 0x32
 80042f2:	4a08      	ldr	r2, [pc, #32]	; (8004314 <USART_SetConfig+0x314>)
 80042f4:	fba2 2303 	umull	r2, r3, r2, r3
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	f003 0207 	and.w	r2, r3, #7
 80042fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4422      	add	r2, r4
 8004306:	609a      	str	r2, [r3, #8]
 8004308:	e109      	b.n	800451e <USART_SetConfig+0x51e>
 800430a:	bf00      	nop
 800430c:	40011000 	.word	0x40011000
 8004310:	40011400 	.word	0x40011400
 8004314:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004318:	f7ff f854 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 800431c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004320:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004324:	2200      	movs	r2, #0
 8004326:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800432a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800432e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004332:	4642      	mov	r2, r8
 8004334:	464b      	mov	r3, r9
 8004336:	1891      	adds	r1, r2, r2
 8004338:	6339      	str	r1, [r7, #48]	; 0x30
 800433a:	415b      	adcs	r3, r3
 800433c:	637b      	str	r3, [r7, #52]	; 0x34
 800433e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004342:	4641      	mov	r1, r8
 8004344:	1854      	adds	r4, r2, r1
 8004346:	4649      	mov	r1, r9
 8004348:	eb43 0501 	adc.w	r5, r3, r1
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	00eb      	lsls	r3, r5, #3
 8004356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800435a:	00e2      	lsls	r2, r4, #3
 800435c:	4614      	mov	r4, r2
 800435e:	461d      	mov	r5, r3
 8004360:	4643      	mov	r3, r8
 8004362:	18e3      	adds	r3, r4, r3
 8004364:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004368:	464b      	mov	r3, r9
 800436a:	eb45 0303 	adc.w	r3, r5, r3
 800436e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800437e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004382:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004386:	460b      	mov	r3, r1
 8004388:	18db      	adds	r3, r3, r3
 800438a:	62bb      	str	r3, [r7, #40]	; 0x28
 800438c:	4613      	mov	r3, r2
 800438e:	eb42 0303 	adc.w	r3, r2, r3
 8004392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004394:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004398:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800439c:	f7fc fc20 	bl	8000be0 <__aeabi_uldivmod>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4b61      	ldr	r3, [pc, #388]	; (800452c <USART_SetConfig+0x52c>)
 80043a6:	fba3 2302 	umull	r2, r3, r3, r2
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	011c      	lsls	r4, r3, #4
 80043ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043b8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043bc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043c0:	4642      	mov	r2, r8
 80043c2:	464b      	mov	r3, r9
 80043c4:	1891      	adds	r1, r2, r2
 80043c6:	6239      	str	r1, [r7, #32]
 80043c8:	415b      	adcs	r3, r3
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
 80043cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043d0:	4641      	mov	r1, r8
 80043d2:	eb12 0a01 	adds.w	sl, r2, r1
 80043d6:	4649      	mov	r1, r9
 80043d8:	eb43 0b01 	adc.w	fp, r3, r1
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043f0:	4692      	mov	sl, r2
 80043f2:	469b      	mov	fp, r3
 80043f4:	4643      	mov	r3, r8
 80043f6:	eb1a 0303 	adds.w	r3, sl, r3
 80043fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043fe:	464b      	mov	r3, r9
 8004400:	eb4b 0303 	adc.w	r3, fp, r3
 8004404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004414:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004418:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800441c:	460b      	mov	r3, r1
 800441e:	18db      	adds	r3, r3, r3
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	4613      	mov	r3, r2
 8004424:	eb42 0303 	adc.w	r3, r2, r3
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800442e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004432:	f7fc fbd5 	bl	8000be0 <__aeabi_uldivmod>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4611      	mov	r1, r2
 800443c:	4b3b      	ldr	r3, [pc, #236]	; (800452c <USART_SetConfig+0x52c>)
 800443e:	fba3 2301 	umull	r2, r3, r3, r1
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	2264      	movs	r2, #100	; 0x64
 8004446:	fb02 f303 	mul.w	r3, r2, r3
 800444a:	1acb      	subs	r3, r1, r3
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004452:	4b36      	ldr	r3, [pc, #216]	; (800452c <USART_SetConfig+0x52c>)
 8004454:	fba3 2302 	umull	r2, r3, r3, r2
 8004458:	095b      	lsrs	r3, r3, #5
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004460:	441c      	add	r4, r3
 8004462:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004466:	2200      	movs	r2, #0
 8004468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800446c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004470:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004474:	4642      	mov	r2, r8
 8004476:	464b      	mov	r3, r9
 8004478:	1891      	adds	r1, r2, r2
 800447a:	6139      	str	r1, [r7, #16]
 800447c:	415b      	adcs	r3, r3
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004484:	4641      	mov	r1, r8
 8004486:	1851      	adds	r1, r2, r1
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	4649      	mov	r1, r9
 800448c:	414b      	adcs	r3, r1
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800449c:	4659      	mov	r1, fp
 800449e:	00cb      	lsls	r3, r1, #3
 80044a0:	4651      	mov	r1, sl
 80044a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044a6:	4651      	mov	r1, sl
 80044a8:	00ca      	lsls	r2, r1, #3
 80044aa:	4610      	mov	r0, r2
 80044ac:	4619      	mov	r1, r3
 80044ae:	4603      	mov	r3, r0
 80044b0:	4642      	mov	r2, r8
 80044b2:	189b      	adds	r3, r3, r2
 80044b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044b8:	464b      	mov	r3, r9
 80044ba:	460a      	mov	r2, r1
 80044bc:	eb42 0303 	adc.w	r3, r2, r3
 80044c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80044ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80044d4:	460b      	mov	r3, r1
 80044d6:	18db      	adds	r3, r3, r3
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	4613      	mov	r3, r2
 80044dc:	eb42 0303 	adc.w	r3, r2, r3
 80044e0:	607b      	str	r3, [r7, #4]
 80044e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044ea:	f7fc fb79 	bl	8000be0 <__aeabi_uldivmod>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4b0e      	ldr	r3, [pc, #56]	; (800452c <USART_SetConfig+0x52c>)
 80044f4:	fba3 1302 	umull	r1, r3, r3, r2
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	2164      	movs	r1, #100	; 0x64
 80044fc:	fb01 f303 	mul.w	r3, r1, r3
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	3332      	adds	r3, #50	; 0x32
 8004506:	4a09      	ldr	r2, [pc, #36]	; (800452c <USART_SetConfig+0x52c>)
 8004508:	fba2 2303 	umull	r2, r3, r2, r3
 800450c:	095b      	lsrs	r3, r3, #5
 800450e:	f003 0207 	and.w	r2, r3, #7
 8004512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4422      	add	r2, r4
 800451a:	609a      	str	r2, [r3, #8]
  }
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004524:	46bd      	mov	sp, r7
 8004526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800452a:	bf00      	nop
 800452c:	51eb851f 	.word	0x51eb851f

08004530 <__errno>:
 8004530:	4b01      	ldr	r3, [pc, #4]	; (8004538 <__errno+0x8>)
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	2000000c 	.word	0x2000000c

0800453c <__libc_init_array>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	4d0d      	ldr	r5, [pc, #52]	; (8004574 <__libc_init_array+0x38>)
 8004540:	4c0d      	ldr	r4, [pc, #52]	; (8004578 <__libc_init_array+0x3c>)
 8004542:	1b64      	subs	r4, r4, r5
 8004544:	10a4      	asrs	r4, r4, #2
 8004546:	2600      	movs	r6, #0
 8004548:	42a6      	cmp	r6, r4
 800454a:	d109      	bne.n	8004560 <__libc_init_array+0x24>
 800454c:	4d0b      	ldr	r5, [pc, #44]	; (800457c <__libc_init_array+0x40>)
 800454e:	4c0c      	ldr	r4, [pc, #48]	; (8004580 <__libc_init_array+0x44>)
 8004550:	f001 f9e8 	bl	8005924 <_init>
 8004554:	1b64      	subs	r4, r4, r5
 8004556:	10a4      	asrs	r4, r4, #2
 8004558:	2600      	movs	r6, #0
 800455a:	42a6      	cmp	r6, r4
 800455c:	d105      	bne.n	800456a <__libc_init_array+0x2e>
 800455e:	bd70      	pop	{r4, r5, r6, pc}
 8004560:	f855 3b04 	ldr.w	r3, [r5], #4
 8004564:	4798      	blx	r3
 8004566:	3601      	adds	r6, #1
 8004568:	e7ee      	b.n	8004548 <__libc_init_array+0xc>
 800456a:	f855 3b04 	ldr.w	r3, [r5], #4
 800456e:	4798      	blx	r3
 8004570:	3601      	adds	r6, #1
 8004572:	e7f2      	b.n	800455a <__libc_init_array+0x1e>
 8004574:	08005b38 	.word	0x08005b38
 8004578:	08005b38 	.word	0x08005b38
 800457c:	08005b38 	.word	0x08005b38
 8004580:	08005b3c 	.word	0x08005b3c

08004584 <memset>:
 8004584:	4402      	add	r2, r0
 8004586:	4603      	mov	r3, r0
 8004588:	4293      	cmp	r3, r2
 800458a:	d100      	bne.n	800458e <memset+0xa>
 800458c:	4770      	bx	lr
 800458e:	f803 1b01 	strb.w	r1, [r3], #1
 8004592:	e7f9      	b.n	8004588 <memset+0x4>
 8004594:	0000      	movs	r0, r0
	...

08004598 <cos>:
 8004598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800459a:	ec53 2b10 	vmov	r2, r3, d0
 800459e:	4826      	ldr	r0, [pc, #152]	; (8004638 <cos+0xa0>)
 80045a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80045a4:	4281      	cmp	r1, r0
 80045a6:	dc06      	bgt.n	80045b6 <cos+0x1e>
 80045a8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8004630 <cos+0x98>
 80045ac:	b005      	add	sp, #20
 80045ae:	f85d eb04 	ldr.w	lr, [sp], #4
 80045b2:	f000 bbd1 	b.w	8004d58 <__kernel_cos>
 80045b6:	4821      	ldr	r0, [pc, #132]	; (800463c <cos+0xa4>)
 80045b8:	4281      	cmp	r1, r0
 80045ba:	dd09      	ble.n	80045d0 <cos+0x38>
 80045bc:	ee10 0a10 	vmov	r0, s0
 80045c0:	4619      	mov	r1, r3
 80045c2:	f7fb fe0d 	bl	80001e0 <__aeabi_dsub>
 80045c6:	ec41 0b10 	vmov	d0, r0, r1
 80045ca:	b005      	add	sp, #20
 80045cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80045d0:	4668      	mov	r0, sp
 80045d2:	f000 f901 	bl	80047d8 <__ieee754_rem_pio2>
 80045d6:	f000 0003 	and.w	r0, r0, #3
 80045da:	2801      	cmp	r0, #1
 80045dc:	d00b      	beq.n	80045f6 <cos+0x5e>
 80045de:	2802      	cmp	r0, #2
 80045e0:	d016      	beq.n	8004610 <cos+0x78>
 80045e2:	b9e0      	cbnz	r0, 800461e <cos+0x86>
 80045e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80045e8:	ed9d 0b00 	vldr	d0, [sp]
 80045ec:	f000 fbb4 	bl	8004d58 <__kernel_cos>
 80045f0:	ec51 0b10 	vmov	r0, r1, d0
 80045f4:	e7e7      	b.n	80045c6 <cos+0x2e>
 80045f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80045fa:	ed9d 0b00 	vldr	d0, [sp]
 80045fe:	f000 ffc3 	bl	8005588 <__kernel_sin>
 8004602:	ec53 2b10 	vmov	r2, r3, d0
 8004606:	ee10 0a10 	vmov	r0, s0
 800460a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800460e:	e7da      	b.n	80045c6 <cos+0x2e>
 8004610:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004614:	ed9d 0b00 	vldr	d0, [sp]
 8004618:	f000 fb9e 	bl	8004d58 <__kernel_cos>
 800461c:	e7f1      	b.n	8004602 <cos+0x6a>
 800461e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004622:	ed9d 0b00 	vldr	d0, [sp]
 8004626:	2001      	movs	r0, #1
 8004628:	f000 ffae 	bl	8005588 <__kernel_sin>
 800462c:	e7e0      	b.n	80045f0 <cos+0x58>
 800462e:	bf00      	nop
	...
 8004638:	3fe921fb 	.word	0x3fe921fb
 800463c:	7fefffff 	.word	0x7fefffff

08004640 <round>:
 8004640:	ec51 0b10 	vmov	r0, r1, d0
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800464a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800464e:	2c13      	cmp	r4, #19
 8004650:	ee10 2a10 	vmov	r2, s0
 8004654:	460b      	mov	r3, r1
 8004656:	dc19      	bgt.n	800468c <round+0x4c>
 8004658:	2c00      	cmp	r4, #0
 800465a:	da09      	bge.n	8004670 <round+0x30>
 800465c:	3401      	adds	r4, #1
 800465e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8004662:	d103      	bne.n	800466c <round+0x2c>
 8004664:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004668:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800466c:	2200      	movs	r2, #0
 800466e:	e028      	b.n	80046c2 <round+0x82>
 8004670:	4d15      	ldr	r5, [pc, #84]	; (80046c8 <round+0x88>)
 8004672:	4125      	asrs	r5, r4
 8004674:	ea01 0605 	and.w	r6, r1, r5
 8004678:	4332      	orrs	r2, r6
 800467a:	d00e      	beq.n	800469a <round+0x5a>
 800467c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004680:	fa42 f404 	asr.w	r4, r2, r4
 8004684:	4423      	add	r3, r4
 8004686:	ea23 0305 	bic.w	r3, r3, r5
 800468a:	e7ef      	b.n	800466c <round+0x2c>
 800468c:	2c33      	cmp	r4, #51	; 0x33
 800468e:	dd07      	ble.n	80046a0 <round+0x60>
 8004690:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8004694:	d101      	bne.n	800469a <round+0x5a>
 8004696:	f7fb fda5 	bl	80001e4 <__adddf3>
 800469a:	ec41 0b10 	vmov	d0, r0, r1
 800469e:	bd70      	pop	{r4, r5, r6, pc}
 80046a0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80046a4:	f04f 35ff 	mov.w	r5, #4294967295
 80046a8:	40f5      	lsrs	r5, r6
 80046aa:	4228      	tst	r0, r5
 80046ac:	d0f5      	beq.n	800469a <round+0x5a>
 80046ae:	2101      	movs	r1, #1
 80046b0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80046b4:	fa01 f404 	lsl.w	r4, r1, r4
 80046b8:	1912      	adds	r2, r2, r4
 80046ba:	bf28      	it	cs
 80046bc:	185b      	addcs	r3, r3, r1
 80046be:	ea22 0205 	bic.w	r2, r2, r5
 80046c2:	4619      	mov	r1, r3
 80046c4:	4610      	mov	r0, r2
 80046c6:	e7e8      	b.n	800469a <round+0x5a>
 80046c8:	000fffff 	.word	0x000fffff
 80046cc:	00000000 	.word	0x00000000

080046d0 <sin>:
 80046d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80046d2:	ec53 2b10 	vmov	r2, r3, d0
 80046d6:	4828      	ldr	r0, [pc, #160]	; (8004778 <sin+0xa8>)
 80046d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80046dc:	4281      	cmp	r1, r0
 80046de:	dc07      	bgt.n	80046f0 <sin+0x20>
 80046e0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8004770 <sin+0xa0>
 80046e4:	2000      	movs	r0, #0
 80046e6:	b005      	add	sp, #20
 80046e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046ec:	f000 bf4c 	b.w	8005588 <__kernel_sin>
 80046f0:	4822      	ldr	r0, [pc, #136]	; (800477c <sin+0xac>)
 80046f2:	4281      	cmp	r1, r0
 80046f4:	dd09      	ble.n	800470a <sin+0x3a>
 80046f6:	ee10 0a10 	vmov	r0, s0
 80046fa:	4619      	mov	r1, r3
 80046fc:	f7fb fd70 	bl	80001e0 <__aeabi_dsub>
 8004700:	ec41 0b10 	vmov	d0, r0, r1
 8004704:	b005      	add	sp, #20
 8004706:	f85d fb04 	ldr.w	pc, [sp], #4
 800470a:	4668      	mov	r0, sp
 800470c:	f000 f864 	bl	80047d8 <__ieee754_rem_pio2>
 8004710:	f000 0003 	and.w	r0, r0, #3
 8004714:	2801      	cmp	r0, #1
 8004716:	d00c      	beq.n	8004732 <sin+0x62>
 8004718:	2802      	cmp	r0, #2
 800471a:	d011      	beq.n	8004740 <sin+0x70>
 800471c:	b9f0      	cbnz	r0, 800475c <sin+0x8c>
 800471e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004722:	ed9d 0b00 	vldr	d0, [sp]
 8004726:	2001      	movs	r0, #1
 8004728:	f000 ff2e 	bl	8005588 <__kernel_sin>
 800472c:	ec51 0b10 	vmov	r0, r1, d0
 8004730:	e7e6      	b.n	8004700 <sin+0x30>
 8004732:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004736:	ed9d 0b00 	vldr	d0, [sp]
 800473a:	f000 fb0d 	bl	8004d58 <__kernel_cos>
 800473e:	e7f5      	b.n	800472c <sin+0x5c>
 8004740:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004744:	ed9d 0b00 	vldr	d0, [sp]
 8004748:	2001      	movs	r0, #1
 800474a:	f000 ff1d 	bl	8005588 <__kernel_sin>
 800474e:	ec53 2b10 	vmov	r2, r3, d0
 8004752:	ee10 0a10 	vmov	r0, s0
 8004756:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800475a:	e7d1      	b.n	8004700 <sin+0x30>
 800475c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004760:	ed9d 0b00 	vldr	d0, [sp]
 8004764:	f000 faf8 	bl	8004d58 <__kernel_cos>
 8004768:	e7f1      	b.n	800474e <sin+0x7e>
 800476a:	bf00      	nop
 800476c:	f3af 8000 	nop.w
	...
 8004778:	3fe921fb 	.word	0x3fe921fb
 800477c:	7fefffff 	.word	0x7fefffff

08004780 <sqrt>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	ed2d 8b02 	vpush	{d8}
 8004786:	ec55 4b10 	vmov	r4, r5, d0
 800478a:	f000 fa31 	bl	8004bf0 <__ieee754_sqrt>
 800478e:	4622      	mov	r2, r4
 8004790:	462b      	mov	r3, r5
 8004792:	4620      	mov	r0, r4
 8004794:	4629      	mov	r1, r5
 8004796:	eeb0 8a40 	vmov.f32	s16, s0
 800479a:	eef0 8a60 	vmov.f32	s17, s1
 800479e:	f7fc f971 	bl	8000a84 <__aeabi_dcmpun>
 80047a2:	b990      	cbnz	r0, 80047ca <sqrt+0x4a>
 80047a4:	2200      	movs	r2, #0
 80047a6:	2300      	movs	r3, #0
 80047a8:	4620      	mov	r0, r4
 80047aa:	4629      	mov	r1, r5
 80047ac:	f7fc f942 	bl	8000a34 <__aeabi_dcmplt>
 80047b0:	b158      	cbz	r0, 80047ca <sqrt+0x4a>
 80047b2:	f7ff febd 	bl	8004530 <__errno>
 80047b6:	2321      	movs	r3, #33	; 0x21
 80047b8:	6003      	str	r3, [r0, #0]
 80047ba:	2200      	movs	r2, #0
 80047bc:	2300      	movs	r3, #0
 80047be:	4610      	mov	r0, r2
 80047c0:	4619      	mov	r1, r3
 80047c2:	f7fb ffef 	bl	80007a4 <__aeabi_ddiv>
 80047c6:	ec41 0b18 	vmov	d8, r0, r1
 80047ca:	eeb0 0a48 	vmov.f32	s0, s16
 80047ce:	eef0 0a68 	vmov.f32	s1, s17
 80047d2:	ecbd 8b02 	vpop	{d8}
 80047d6:	bd38      	pop	{r3, r4, r5, pc}

080047d8 <__ieee754_rem_pio2>:
 80047d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047dc:	ed2d 8b02 	vpush	{d8}
 80047e0:	ec55 4b10 	vmov	r4, r5, d0
 80047e4:	4bca      	ldr	r3, [pc, #808]	; (8004b10 <__ieee754_rem_pio2+0x338>)
 80047e6:	b08b      	sub	sp, #44	; 0x2c
 80047e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80047ec:	4598      	cmp	r8, r3
 80047ee:	4682      	mov	sl, r0
 80047f0:	9502      	str	r5, [sp, #8]
 80047f2:	dc08      	bgt.n	8004806 <__ieee754_rem_pio2+0x2e>
 80047f4:	2200      	movs	r2, #0
 80047f6:	2300      	movs	r3, #0
 80047f8:	ed80 0b00 	vstr	d0, [r0]
 80047fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004800:	f04f 0b00 	mov.w	fp, #0
 8004804:	e028      	b.n	8004858 <__ieee754_rem_pio2+0x80>
 8004806:	4bc3      	ldr	r3, [pc, #780]	; (8004b14 <__ieee754_rem_pio2+0x33c>)
 8004808:	4598      	cmp	r8, r3
 800480a:	dc78      	bgt.n	80048fe <__ieee754_rem_pio2+0x126>
 800480c:	9b02      	ldr	r3, [sp, #8]
 800480e:	4ec2      	ldr	r6, [pc, #776]	; (8004b18 <__ieee754_rem_pio2+0x340>)
 8004810:	2b00      	cmp	r3, #0
 8004812:	ee10 0a10 	vmov	r0, s0
 8004816:	a3b0      	add	r3, pc, #704	; (adr r3, 8004ad8 <__ieee754_rem_pio2+0x300>)
 8004818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481c:	4629      	mov	r1, r5
 800481e:	dd39      	ble.n	8004894 <__ieee754_rem_pio2+0xbc>
 8004820:	f7fb fcde 	bl	80001e0 <__aeabi_dsub>
 8004824:	45b0      	cmp	r8, r6
 8004826:	4604      	mov	r4, r0
 8004828:	460d      	mov	r5, r1
 800482a:	d01b      	beq.n	8004864 <__ieee754_rem_pio2+0x8c>
 800482c:	a3ac      	add	r3, pc, #688	; (adr r3, 8004ae0 <__ieee754_rem_pio2+0x308>)
 800482e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004832:	f7fb fcd5 	bl	80001e0 <__aeabi_dsub>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	e9ca 2300 	strd	r2, r3, [sl]
 800483e:	4620      	mov	r0, r4
 8004840:	4629      	mov	r1, r5
 8004842:	f7fb fccd 	bl	80001e0 <__aeabi_dsub>
 8004846:	a3a6      	add	r3, pc, #664	; (adr r3, 8004ae0 <__ieee754_rem_pio2+0x308>)
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f7fb fcc8 	bl	80001e0 <__aeabi_dsub>
 8004850:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004854:	f04f 0b01 	mov.w	fp, #1
 8004858:	4658      	mov	r0, fp
 800485a:	b00b      	add	sp, #44	; 0x2c
 800485c:	ecbd 8b02 	vpop	{d8}
 8004860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004864:	a3a0      	add	r3, pc, #640	; (adr r3, 8004ae8 <__ieee754_rem_pio2+0x310>)
 8004866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486a:	f7fb fcb9 	bl	80001e0 <__aeabi_dsub>
 800486e:	a3a0      	add	r3, pc, #640	; (adr r3, 8004af0 <__ieee754_rem_pio2+0x318>)
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	4604      	mov	r4, r0
 8004876:	460d      	mov	r5, r1
 8004878:	f7fb fcb2 	bl	80001e0 <__aeabi_dsub>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	e9ca 2300 	strd	r2, r3, [sl]
 8004884:	4620      	mov	r0, r4
 8004886:	4629      	mov	r1, r5
 8004888:	f7fb fcaa 	bl	80001e0 <__aeabi_dsub>
 800488c:	a398      	add	r3, pc, #608	; (adr r3, 8004af0 <__ieee754_rem_pio2+0x318>)
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	e7db      	b.n	800484c <__ieee754_rem_pio2+0x74>
 8004894:	f7fb fca6 	bl	80001e4 <__adddf3>
 8004898:	45b0      	cmp	r8, r6
 800489a:	4604      	mov	r4, r0
 800489c:	460d      	mov	r5, r1
 800489e:	d016      	beq.n	80048ce <__ieee754_rem_pio2+0xf6>
 80048a0:	a38f      	add	r3, pc, #572	; (adr r3, 8004ae0 <__ieee754_rem_pio2+0x308>)
 80048a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a6:	f7fb fc9d 	bl	80001e4 <__adddf3>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	e9ca 2300 	strd	r2, r3, [sl]
 80048b2:	4620      	mov	r0, r4
 80048b4:	4629      	mov	r1, r5
 80048b6:	f7fb fc93 	bl	80001e0 <__aeabi_dsub>
 80048ba:	a389      	add	r3, pc, #548	; (adr r3, 8004ae0 <__ieee754_rem_pio2+0x308>)
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	f7fb fc90 	bl	80001e4 <__adddf3>
 80048c4:	f04f 3bff 	mov.w	fp, #4294967295
 80048c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80048cc:	e7c4      	b.n	8004858 <__ieee754_rem_pio2+0x80>
 80048ce:	a386      	add	r3, pc, #536	; (adr r3, 8004ae8 <__ieee754_rem_pio2+0x310>)
 80048d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d4:	f7fb fc86 	bl	80001e4 <__adddf3>
 80048d8:	a385      	add	r3, pc, #532	; (adr r3, 8004af0 <__ieee754_rem_pio2+0x318>)
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	4604      	mov	r4, r0
 80048e0:	460d      	mov	r5, r1
 80048e2:	f7fb fc7f 	bl	80001e4 <__adddf3>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	e9ca 2300 	strd	r2, r3, [sl]
 80048ee:	4620      	mov	r0, r4
 80048f0:	4629      	mov	r1, r5
 80048f2:	f7fb fc75 	bl	80001e0 <__aeabi_dsub>
 80048f6:	a37e      	add	r3, pc, #504	; (adr r3, 8004af0 <__ieee754_rem_pio2+0x318>)
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	e7e0      	b.n	80048c0 <__ieee754_rem_pio2+0xe8>
 80048fe:	4b87      	ldr	r3, [pc, #540]	; (8004b1c <__ieee754_rem_pio2+0x344>)
 8004900:	4598      	cmp	r8, r3
 8004902:	f300 80d9 	bgt.w	8004ab8 <__ieee754_rem_pio2+0x2e0>
 8004906:	f000 fefd 	bl	8005704 <fabs>
 800490a:	ec55 4b10 	vmov	r4, r5, d0
 800490e:	ee10 0a10 	vmov	r0, s0
 8004912:	a379      	add	r3, pc, #484	; (adr r3, 8004af8 <__ieee754_rem_pio2+0x320>)
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	4629      	mov	r1, r5
 800491a:	f7fb fe19 	bl	8000550 <__aeabi_dmul>
 800491e:	4b80      	ldr	r3, [pc, #512]	; (8004b20 <__ieee754_rem_pio2+0x348>)
 8004920:	2200      	movs	r2, #0
 8004922:	f7fb fc5f 	bl	80001e4 <__adddf3>
 8004926:	f7fc f8c3 	bl	8000ab0 <__aeabi_d2iz>
 800492a:	4683      	mov	fp, r0
 800492c:	f7fb fda6 	bl	800047c <__aeabi_i2d>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	ec43 2b18 	vmov	d8, r2, r3
 8004938:	a367      	add	r3, pc, #412	; (adr r3, 8004ad8 <__ieee754_rem_pio2+0x300>)
 800493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493e:	f7fb fe07 	bl	8000550 <__aeabi_dmul>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4620      	mov	r0, r4
 8004948:	4629      	mov	r1, r5
 800494a:	f7fb fc49 	bl	80001e0 <__aeabi_dsub>
 800494e:	a364      	add	r3, pc, #400	; (adr r3, 8004ae0 <__ieee754_rem_pio2+0x308>)
 8004950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004954:	4606      	mov	r6, r0
 8004956:	460f      	mov	r7, r1
 8004958:	ec51 0b18 	vmov	r0, r1, d8
 800495c:	f7fb fdf8 	bl	8000550 <__aeabi_dmul>
 8004960:	f1bb 0f1f 	cmp.w	fp, #31
 8004964:	4604      	mov	r4, r0
 8004966:	460d      	mov	r5, r1
 8004968:	dc0d      	bgt.n	8004986 <__ieee754_rem_pio2+0x1ae>
 800496a:	4b6e      	ldr	r3, [pc, #440]	; (8004b24 <__ieee754_rem_pio2+0x34c>)
 800496c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004974:	4543      	cmp	r3, r8
 8004976:	d006      	beq.n	8004986 <__ieee754_rem_pio2+0x1ae>
 8004978:	4622      	mov	r2, r4
 800497a:	462b      	mov	r3, r5
 800497c:	4630      	mov	r0, r6
 800497e:	4639      	mov	r1, r7
 8004980:	f7fb fc2e 	bl	80001e0 <__aeabi_dsub>
 8004984:	e00f      	b.n	80049a6 <__ieee754_rem_pio2+0x1ce>
 8004986:	462b      	mov	r3, r5
 8004988:	4622      	mov	r2, r4
 800498a:	4630      	mov	r0, r6
 800498c:	4639      	mov	r1, r7
 800498e:	f7fb fc27 	bl	80001e0 <__aeabi_dsub>
 8004992:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004996:	9303      	str	r3, [sp, #12]
 8004998:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800499c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80049a0:	f1b8 0f10 	cmp.w	r8, #16
 80049a4:	dc02      	bgt.n	80049ac <__ieee754_rem_pio2+0x1d4>
 80049a6:	e9ca 0100 	strd	r0, r1, [sl]
 80049aa:	e039      	b.n	8004a20 <__ieee754_rem_pio2+0x248>
 80049ac:	a34e      	add	r3, pc, #312	; (adr r3, 8004ae8 <__ieee754_rem_pio2+0x310>)
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	ec51 0b18 	vmov	r0, r1, d8
 80049b6:	f7fb fdcb 	bl	8000550 <__aeabi_dmul>
 80049ba:	4604      	mov	r4, r0
 80049bc:	460d      	mov	r5, r1
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4630      	mov	r0, r6
 80049c4:	4639      	mov	r1, r7
 80049c6:	f7fb fc0b 	bl	80001e0 <__aeabi_dsub>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4680      	mov	r8, r0
 80049d0:	4689      	mov	r9, r1
 80049d2:	4630      	mov	r0, r6
 80049d4:	4639      	mov	r1, r7
 80049d6:	f7fb fc03 	bl	80001e0 <__aeabi_dsub>
 80049da:	4622      	mov	r2, r4
 80049dc:	462b      	mov	r3, r5
 80049de:	f7fb fbff 	bl	80001e0 <__aeabi_dsub>
 80049e2:	a343      	add	r3, pc, #268	; (adr r3, 8004af0 <__ieee754_rem_pio2+0x318>)
 80049e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e8:	4604      	mov	r4, r0
 80049ea:	460d      	mov	r5, r1
 80049ec:	ec51 0b18 	vmov	r0, r1, d8
 80049f0:	f7fb fdae 	bl	8000550 <__aeabi_dmul>
 80049f4:	4622      	mov	r2, r4
 80049f6:	462b      	mov	r3, r5
 80049f8:	f7fb fbf2 	bl	80001e0 <__aeabi_dsub>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4604      	mov	r4, r0
 8004a02:	460d      	mov	r5, r1
 8004a04:	4640      	mov	r0, r8
 8004a06:	4649      	mov	r1, r9
 8004a08:	f7fb fbea 	bl	80001e0 <__aeabi_dsub>
 8004a0c:	9a03      	ldr	r2, [sp, #12]
 8004a0e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b31      	cmp	r3, #49	; 0x31
 8004a16:	dc24      	bgt.n	8004a62 <__ieee754_rem_pio2+0x28a>
 8004a18:	e9ca 0100 	strd	r0, r1, [sl]
 8004a1c:	4646      	mov	r6, r8
 8004a1e:	464f      	mov	r7, r9
 8004a20:	e9da 8900 	ldrd	r8, r9, [sl]
 8004a24:	4630      	mov	r0, r6
 8004a26:	4642      	mov	r2, r8
 8004a28:	464b      	mov	r3, r9
 8004a2a:	4639      	mov	r1, r7
 8004a2c:	f7fb fbd8 	bl	80001e0 <__aeabi_dsub>
 8004a30:	462b      	mov	r3, r5
 8004a32:	4622      	mov	r2, r4
 8004a34:	f7fb fbd4 	bl	80001e0 <__aeabi_dsub>
 8004a38:	9b02      	ldr	r3, [sp, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004a40:	f6bf af0a 	bge.w	8004858 <__ieee754_rem_pio2+0x80>
 8004a44:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004a48:	f8ca 3004 	str.w	r3, [sl, #4]
 8004a4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a50:	f8ca 8000 	str.w	r8, [sl]
 8004a54:	f8ca 0008 	str.w	r0, [sl, #8]
 8004a58:	f8ca 300c 	str.w	r3, [sl, #12]
 8004a5c:	f1cb 0b00 	rsb	fp, fp, #0
 8004a60:	e6fa      	b.n	8004858 <__ieee754_rem_pio2+0x80>
 8004a62:	a327      	add	r3, pc, #156	; (adr r3, 8004b00 <__ieee754_rem_pio2+0x328>)
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	ec51 0b18 	vmov	r0, r1, d8
 8004a6c:	f7fb fd70 	bl	8000550 <__aeabi_dmul>
 8004a70:	4604      	mov	r4, r0
 8004a72:	460d      	mov	r5, r1
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4640      	mov	r0, r8
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	f7fb fbb0 	bl	80001e0 <__aeabi_dsub>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4606      	mov	r6, r0
 8004a86:	460f      	mov	r7, r1
 8004a88:	4640      	mov	r0, r8
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	f7fb fba8 	bl	80001e0 <__aeabi_dsub>
 8004a90:	4622      	mov	r2, r4
 8004a92:	462b      	mov	r3, r5
 8004a94:	f7fb fba4 	bl	80001e0 <__aeabi_dsub>
 8004a98:	a31b      	add	r3, pc, #108	; (adr r3, 8004b08 <__ieee754_rem_pio2+0x330>)
 8004a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	460d      	mov	r5, r1
 8004aa2:	ec51 0b18 	vmov	r0, r1, d8
 8004aa6:	f7fb fd53 	bl	8000550 <__aeabi_dmul>
 8004aaa:	4622      	mov	r2, r4
 8004aac:	462b      	mov	r3, r5
 8004aae:	f7fb fb97 	bl	80001e0 <__aeabi_dsub>
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	460d      	mov	r5, r1
 8004ab6:	e75f      	b.n	8004978 <__ieee754_rem_pio2+0x1a0>
 8004ab8:	4b1b      	ldr	r3, [pc, #108]	; (8004b28 <__ieee754_rem_pio2+0x350>)
 8004aba:	4598      	cmp	r8, r3
 8004abc:	dd36      	ble.n	8004b2c <__ieee754_rem_pio2+0x354>
 8004abe:	ee10 2a10 	vmov	r2, s0
 8004ac2:	462b      	mov	r3, r5
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	f7fb fb8a 	bl	80001e0 <__aeabi_dsub>
 8004acc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004ad0:	e9ca 0100 	strd	r0, r1, [sl]
 8004ad4:	e694      	b.n	8004800 <__ieee754_rem_pio2+0x28>
 8004ad6:	bf00      	nop
 8004ad8:	54400000 	.word	0x54400000
 8004adc:	3ff921fb 	.word	0x3ff921fb
 8004ae0:	1a626331 	.word	0x1a626331
 8004ae4:	3dd0b461 	.word	0x3dd0b461
 8004ae8:	1a600000 	.word	0x1a600000
 8004aec:	3dd0b461 	.word	0x3dd0b461
 8004af0:	2e037073 	.word	0x2e037073
 8004af4:	3ba3198a 	.word	0x3ba3198a
 8004af8:	6dc9c883 	.word	0x6dc9c883
 8004afc:	3fe45f30 	.word	0x3fe45f30
 8004b00:	2e000000 	.word	0x2e000000
 8004b04:	3ba3198a 	.word	0x3ba3198a
 8004b08:	252049c1 	.word	0x252049c1
 8004b0c:	397b839a 	.word	0x397b839a
 8004b10:	3fe921fb 	.word	0x3fe921fb
 8004b14:	4002d97b 	.word	0x4002d97b
 8004b18:	3ff921fb 	.word	0x3ff921fb
 8004b1c:	413921fb 	.word	0x413921fb
 8004b20:	3fe00000 	.word	0x3fe00000
 8004b24:	08005958 	.word	0x08005958
 8004b28:	7fefffff 	.word	0x7fefffff
 8004b2c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004b30:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004b34:	ee10 0a10 	vmov	r0, s0
 8004b38:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8004b3c:	ee10 6a10 	vmov	r6, s0
 8004b40:	460f      	mov	r7, r1
 8004b42:	f7fb ffb5 	bl	8000ab0 <__aeabi_d2iz>
 8004b46:	f7fb fc99 	bl	800047c <__aeabi_i2d>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4630      	mov	r0, r6
 8004b50:	4639      	mov	r1, r7
 8004b52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b56:	f7fb fb43 	bl	80001e0 <__aeabi_dsub>
 8004b5a:	4b23      	ldr	r3, [pc, #140]	; (8004be8 <__ieee754_rem_pio2+0x410>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f7fb fcf7 	bl	8000550 <__aeabi_dmul>
 8004b62:	460f      	mov	r7, r1
 8004b64:	4606      	mov	r6, r0
 8004b66:	f7fb ffa3 	bl	8000ab0 <__aeabi_d2iz>
 8004b6a:	f7fb fc87 	bl	800047c <__aeabi_i2d>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4630      	mov	r0, r6
 8004b74:	4639      	mov	r1, r7
 8004b76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004b7a:	f7fb fb31 	bl	80001e0 <__aeabi_dsub>
 8004b7e:	4b1a      	ldr	r3, [pc, #104]	; (8004be8 <__ieee754_rem_pio2+0x410>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	f7fb fce5 	bl	8000550 <__aeabi_dmul>
 8004b86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004b8a:	ad04      	add	r5, sp, #16
 8004b8c:	f04f 0803 	mov.w	r8, #3
 8004b90:	46a9      	mov	r9, r5
 8004b92:	2600      	movs	r6, #0
 8004b94:	2700      	movs	r7, #0
 8004b96:	4632      	mov	r2, r6
 8004b98:	463b      	mov	r3, r7
 8004b9a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004b9e:	46c3      	mov	fp, r8
 8004ba0:	3d08      	subs	r5, #8
 8004ba2:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ba6:	f7fb ff3b 	bl	8000a20 <__aeabi_dcmpeq>
 8004baa:	2800      	cmp	r0, #0
 8004bac:	d1f3      	bne.n	8004b96 <__ieee754_rem_pio2+0x3be>
 8004bae:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <__ieee754_rem_pio2+0x414>)
 8004bb0:	9301      	str	r3, [sp, #4]
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	4622      	mov	r2, r4
 8004bb8:	465b      	mov	r3, fp
 8004bba:	4651      	mov	r1, sl
 8004bbc:	4648      	mov	r0, r9
 8004bbe:	f000 f993 	bl	8004ee8 <__kernel_rem_pio2>
 8004bc2:	9b02      	ldr	r3, [sp, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	4683      	mov	fp, r0
 8004bc8:	f6bf ae46 	bge.w	8004858 <__ieee754_rem_pio2+0x80>
 8004bcc:	e9da 2100 	ldrd	r2, r1, [sl]
 8004bd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004bd4:	e9ca 2300 	strd	r2, r3, [sl]
 8004bd8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004bdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004be0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004be4:	e73a      	b.n	8004a5c <__ieee754_rem_pio2+0x284>
 8004be6:	bf00      	nop
 8004be8:	41700000 	.word	0x41700000
 8004bec:	080059d8 	.word	0x080059d8

08004bf0 <__ieee754_sqrt>:
 8004bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf4:	ec55 4b10 	vmov	r4, r5, d0
 8004bf8:	4e55      	ldr	r6, [pc, #340]	; (8004d50 <__ieee754_sqrt+0x160>)
 8004bfa:	43ae      	bics	r6, r5
 8004bfc:	ee10 0a10 	vmov	r0, s0
 8004c00:	ee10 3a10 	vmov	r3, s0
 8004c04:	462a      	mov	r2, r5
 8004c06:	4629      	mov	r1, r5
 8004c08:	d110      	bne.n	8004c2c <__ieee754_sqrt+0x3c>
 8004c0a:	ee10 2a10 	vmov	r2, s0
 8004c0e:	462b      	mov	r3, r5
 8004c10:	f7fb fc9e 	bl	8000550 <__aeabi_dmul>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4620      	mov	r0, r4
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	f7fb fae2 	bl	80001e4 <__adddf3>
 8004c20:	4604      	mov	r4, r0
 8004c22:	460d      	mov	r5, r1
 8004c24:	ec45 4b10 	vmov	d0, r4, r5
 8004c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c2c:	2d00      	cmp	r5, #0
 8004c2e:	dc10      	bgt.n	8004c52 <__ieee754_sqrt+0x62>
 8004c30:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004c34:	4330      	orrs	r0, r6
 8004c36:	d0f5      	beq.n	8004c24 <__ieee754_sqrt+0x34>
 8004c38:	b15d      	cbz	r5, 8004c52 <__ieee754_sqrt+0x62>
 8004c3a:	ee10 2a10 	vmov	r2, s0
 8004c3e:	462b      	mov	r3, r5
 8004c40:	ee10 0a10 	vmov	r0, s0
 8004c44:	f7fb facc 	bl	80001e0 <__aeabi_dsub>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	f7fb fdaa 	bl	80007a4 <__aeabi_ddiv>
 8004c50:	e7e6      	b.n	8004c20 <__ieee754_sqrt+0x30>
 8004c52:	1512      	asrs	r2, r2, #20
 8004c54:	d074      	beq.n	8004d40 <__ieee754_sqrt+0x150>
 8004c56:	07d4      	lsls	r4, r2, #31
 8004c58:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004c5c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004c60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004c64:	bf5e      	ittt	pl
 8004c66:	0fda      	lsrpl	r2, r3, #31
 8004c68:	005b      	lslpl	r3, r3, #1
 8004c6a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004c6e:	2400      	movs	r4, #0
 8004c70:	0fda      	lsrs	r2, r3, #31
 8004c72:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004c76:	107f      	asrs	r7, r7, #1
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	2516      	movs	r5, #22
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004c82:	1886      	adds	r6, r0, r2
 8004c84:	428e      	cmp	r6, r1
 8004c86:	bfde      	ittt	le
 8004c88:	1b89      	suble	r1, r1, r6
 8004c8a:	18b0      	addle	r0, r6, r2
 8004c8c:	18a4      	addle	r4, r4, r2
 8004c8e:	0049      	lsls	r1, r1, #1
 8004c90:	3d01      	subs	r5, #1
 8004c92:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004c96:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004c9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004c9e:	d1f0      	bne.n	8004c82 <__ieee754_sqrt+0x92>
 8004ca0:	462a      	mov	r2, r5
 8004ca2:	f04f 0e20 	mov.w	lr, #32
 8004ca6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004caa:	4281      	cmp	r1, r0
 8004cac:	eb06 0c05 	add.w	ip, r6, r5
 8004cb0:	dc02      	bgt.n	8004cb8 <__ieee754_sqrt+0xc8>
 8004cb2:	d113      	bne.n	8004cdc <__ieee754_sqrt+0xec>
 8004cb4:	459c      	cmp	ip, r3
 8004cb6:	d811      	bhi.n	8004cdc <__ieee754_sqrt+0xec>
 8004cb8:	f1bc 0f00 	cmp.w	ip, #0
 8004cbc:	eb0c 0506 	add.w	r5, ip, r6
 8004cc0:	da43      	bge.n	8004d4a <__ieee754_sqrt+0x15a>
 8004cc2:	2d00      	cmp	r5, #0
 8004cc4:	db41      	blt.n	8004d4a <__ieee754_sqrt+0x15a>
 8004cc6:	f100 0801 	add.w	r8, r0, #1
 8004cca:	1a09      	subs	r1, r1, r0
 8004ccc:	459c      	cmp	ip, r3
 8004cce:	bf88      	it	hi
 8004cd0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004cd4:	eba3 030c 	sub.w	r3, r3, ip
 8004cd8:	4432      	add	r2, r6
 8004cda:	4640      	mov	r0, r8
 8004cdc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004ce0:	f1be 0e01 	subs.w	lr, lr, #1
 8004ce4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8004ce8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004cec:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004cf0:	d1db      	bne.n	8004caa <__ieee754_sqrt+0xba>
 8004cf2:	430b      	orrs	r3, r1
 8004cf4:	d006      	beq.n	8004d04 <__ieee754_sqrt+0x114>
 8004cf6:	1c50      	adds	r0, r2, #1
 8004cf8:	bf13      	iteet	ne
 8004cfa:	3201      	addne	r2, #1
 8004cfc:	3401      	addeq	r4, #1
 8004cfe:	4672      	moveq	r2, lr
 8004d00:	f022 0201 	bicne.w	r2, r2, #1
 8004d04:	1063      	asrs	r3, r4, #1
 8004d06:	0852      	lsrs	r2, r2, #1
 8004d08:	07e1      	lsls	r1, r4, #31
 8004d0a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004d0e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004d12:	bf48      	it	mi
 8004d14:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004d18:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004d1c:	4614      	mov	r4, r2
 8004d1e:	e781      	b.n	8004c24 <__ieee754_sqrt+0x34>
 8004d20:	0ad9      	lsrs	r1, r3, #11
 8004d22:	3815      	subs	r0, #21
 8004d24:	055b      	lsls	r3, r3, #21
 8004d26:	2900      	cmp	r1, #0
 8004d28:	d0fa      	beq.n	8004d20 <__ieee754_sqrt+0x130>
 8004d2a:	02cd      	lsls	r5, r1, #11
 8004d2c:	d50a      	bpl.n	8004d44 <__ieee754_sqrt+0x154>
 8004d2e:	f1c2 0420 	rsb	r4, r2, #32
 8004d32:	fa23 f404 	lsr.w	r4, r3, r4
 8004d36:	1e55      	subs	r5, r2, #1
 8004d38:	4093      	lsls	r3, r2
 8004d3a:	4321      	orrs	r1, r4
 8004d3c:	1b42      	subs	r2, r0, r5
 8004d3e:	e78a      	b.n	8004c56 <__ieee754_sqrt+0x66>
 8004d40:	4610      	mov	r0, r2
 8004d42:	e7f0      	b.n	8004d26 <__ieee754_sqrt+0x136>
 8004d44:	0049      	lsls	r1, r1, #1
 8004d46:	3201      	adds	r2, #1
 8004d48:	e7ef      	b.n	8004d2a <__ieee754_sqrt+0x13a>
 8004d4a:	4680      	mov	r8, r0
 8004d4c:	e7bd      	b.n	8004cca <__ieee754_sqrt+0xda>
 8004d4e:	bf00      	nop
 8004d50:	7ff00000 	.word	0x7ff00000
 8004d54:	00000000 	.word	0x00000000

08004d58 <__kernel_cos>:
 8004d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d5c:	ec57 6b10 	vmov	r6, r7, d0
 8004d60:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004d64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004d68:	ed8d 1b00 	vstr	d1, [sp]
 8004d6c:	da07      	bge.n	8004d7e <__kernel_cos+0x26>
 8004d6e:	ee10 0a10 	vmov	r0, s0
 8004d72:	4639      	mov	r1, r7
 8004d74:	f7fb fe9c 	bl	8000ab0 <__aeabi_d2iz>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	f000 8088 	beq.w	8004e8e <__kernel_cos+0x136>
 8004d7e:	4632      	mov	r2, r6
 8004d80:	463b      	mov	r3, r7
 8004d82:	4630      	mov	r0, r6
 8004d84:	4639      	mov	r1, r7
 8004d86:	f7fb fbe3 	bl	8000550 <__aeabi_dmul>
 8004d8a:	4b51      	ldr	r3, [pc, #324]	; (8004ed0 <__kernel_cos+0x178>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	4604      	mov	r4, r0
 8004d90:	460d      	mov	r5, r1
 8004d92:	f7fb fbdd 	bl	8000550 <__aeabi_dmul>
 8004d96:	a340      	add	r3, pc, #256	; (adr r3, 8004e98 <__kernel_cos+0x140>)
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	4682      	mov	sl, r0
 8004d9e:	468b      	mov	fp, r1
 8004da0:	4620      	mov	r0, r4
 8004da2:	4629      	mov	r1, r5
 8004da4:	f7fb fbd4 	bl	8000550 <__aeabi_dmul>
 8004da8:	a33d      	add	r3, pc, #244	; (adr r3, 8004ea0 <__kernel_cos+0x148>)
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	f7fb fa19 	bl	80001e4 <__adddf3>
 8004db2:	4622      	mov	r2, r4
 8004db4:	462b      	mov	r3, r5
 8004db6:	f7fb fbcb 	bl	8000550 <__aeabi_dmul>
 8004dba:	a33b      	add	r3, pc, #236	; (adr r3, 8004ea8 <__kernel_cos+0x150>)
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	f7fb fa0e 	bl	80001e0 <__aeabi_dsub>
 8004dc4:	4622      	mov	r2, r4
 8004dc6:	462b      	mov	r3, r5
 8004dc8:	f7fb fbc2 	bl	8000550 <__aeabi_dmul>
 8004dcc:	a338      	add	r3, pc, #224	; (adr r3, 8004eb0 <__kernel_cos+0x158>)
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	f7fb fa07 	bl	80001e4 <__adddf3>
 8004dd6:	4622      	mov	r2, r4
 8004dd8:	462b      	mov	r3, r5
 8004dda:	f7fb fbb9 	bl	8000550 <__aeabi_dmul>
 8004dde:	a336      	add	r3, pc, #216	; (adr r3, 8004eb8 <__kernel_cos+0x160>)
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	f7fb f9fc 	bl	80001e0 <__aeabi_dsub>
 8004de8:	4622      	mov	r2, r4
 8004dea:	462b      	mov	r3, r5
 8004dec:	f7fb fbb0 	bl	8000550 <__aeabi_dmul>
 8004df0:	a333      	add	r3, pc, #204	; (adr r3, 8004ec0 <__kernel_cos+0x168>)
 8004df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df6:	f7fb f9f5 	bl	80001e4 <__adddf3>
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	462b      	mov	r3, r5
 8004dfe:	f7fb fba7 	bl	8000550 <__aeabi_dmul>
 8004e02:	4622      	mov	r2, r4
 8004e04:	462b      	mov	r3, r5
 8004e06:	f7fb fba3 	bl	8000550 <__aeabi_dmul>
 8004e0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e0e:	4604      	mov	r4, r0
 8004e10:	460d      	mov	r5, r1
 8004e12:	4630      	mov	r0, r6
 8004e14:	4639      	mov	r1, r7
 8004e16:	f7fb fb9b 	bl	8000550 <__aeabi_dmul>
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	4629      	mov	r1, r5
 8004e20:	4620      	mov	r0, r4
 8004e22:	f7fb f9dd 	bl	80001e0 <__aeabi_dsub>
 8004e26:	4b2b      	ldr	r3, [pc, #172]	; (8004ed4 <__kernel_cos+0x17c>)
 8004e28:	4598      	cmp	r8, r3
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	460f      	mov	r7, r1
 8004e2e:	dc10      	bgt.n	8004e52 <__kernel_cos+0xfa>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4650      	mov	r0, sl
 8004e36:	4659      	mov	r1, fp
 8004e38:	f7fb f9d2 	bl	80001e0 <__aeabi_dsub>
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4926      	ldr	r1, [pc, #152]	; (8004ed8 <__kernel_cos+0x180>)
 8004e40:	4602      	mov	r2, r0
 8004e42:	2000      	movs	r0, #0
 8004e44:	f7fb f9cc 	bl	80001e0 <__aeabi_dsub>
 8004e48:	ec41 0b10 	vmov	d0, r0, r1
 8004e4c:	b003      	add	sp, #12
 8004e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e52:	4b22      	ldr	r3, [pc, #136]	; (8004edc <__kernel_cos+0x184>)
 8004e54:	4920      	ldr	r1, [pc, #128]	; (8004ed8 <__kernel_cos+0x180>)
 8004e56:	4598      	cmp	r8, r3
 8004e58:	bfcc      	ite	gt
 8004e5a:	4d21      	ldrgt	r5, [pc, #132]	; (8004ee0 <__kernel_cos+0x188>)
 8004e5c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004e60:	2400      	movs	r4, #0
 8004e62:	4622      	mov	r2, r4
 8004e64:	462b      	mov	r3, r5
 8004e66:	2000      	movs	r0, #0
 8004e68:	f7fb f9ba 	bl	80001e0 <__aeabi_dsub>
 8004e6c:	4622      	mov	r2, r4
 8004e6e:	4680      	mov	r8, r0
 8004e70:	4689      	mov	r9, r1
 8004e72:	462b      	mov	r3, r5
 8004e74:	4650      	mov	r0, sl
 8004e76:	4659      	mov	r1, fp
 8004e78:	f7fb f9b2 	bl	80001e0 <__aeabi_dsub>
 8004e7c:	4632      	mov	r2, r6
 8004e7e:	463b      	mov	r3, r7
 8004e80:	f7fb f9ae 	bl	80001e0 <__aeabi_dsub>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4640      	mov	r0, r8
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	e7da      	b.n	8004e44 <__kernel_cos+0xec>
 8004e8e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004ec8 <__kernel_cos+0x170>
 8004e92:	e7db      	b.n	8004e4c <__kernel_cos+0xf4>
 8004e94:	f3af 8000 	nop.w
 8004e98:	be8838d4 	.word	0xbe8838d4
 8004e9c:	bda8fae9 	.word	0xbda8fae9
 8004ea0:	bdb4b1c4 	.word	0xbdb4b1c4
 8004ea4:	3e21ee9e 	.word	0x3e21ee9e
 8004ea8:	809c52ad 	.word	0x809c52ad
 8004eac:	3e927e4f 	.word	0x3e927e4f
 8004eb0:	19cb1590 	.word	0x19cb1590
 8004eb4:	3efa01a0 	.word	0x3efa01a0
 8004eb8:	16c15177 	.word	0x16c15177
 8004ebc:	3f56c16c 	.word	0x3f56c16c
 8004ec0:	5555554c 	.word	0x5555554c
 8004ec4:	3fa55555 	.word	0x3fa55555
 8004ec8:	00000000 	.word	0x00000000
 8004ecc:	3ff00000 	.word	0x3ff00000
 8004ed0:	3fe00000 	.word	0x3fe00000
 8004ed4:	3fd33332 	.word	0x3fd33332
 8004ed8:	3ff00000 	.word	0x3ff00000
 8004edc:	3fe90000 	.word	0x3fe90000
 8004ee0:	3fd20000 	.word	0x3fd20000
 8004ee4:	00000000 	.word	0x00000000

08004ee8 <__kernel_rem_pio2>:
 8004ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eec:	ed2d 8b02 	vpush	{d8}
 8004ef0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004ef4:	f112 0f14 	cmn.w	r2, #20
 8004ef8:	9308      	str	r3, [sp, #32]
 8004efa:	9101      	str	r1, [sp, #4]
 8004efc:	4bc4      	ldr	r3, [pc, #784]	; (8005210 <__kernel_rem_pio2+0x328>)
 8004efe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004f00:	900b      	str	r0, [sp, #44]	; 0x2c
 8004f02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004f06:	9302      	str	r3, [sp, #8]
 8004f08:	9b08      	ldr	r3, [sp, #32]
 8004f0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f0e:	bfa8      	it	ge
 8004f10:	1ed4      	subge	r4, r2, #3
 8004f12:	9306      	str	r3, [sp, #24]
 8004f14:	bfb2      	itee	lt
 8004f16:	2400      	movlt	r4, #0
 8004f18:	2318      	movge	r3, #24
 8004f1a:	fb94 f4f3 	sdivge	r4, r4, r3
 8004f1e:	f06f 0317 	mvn.w	r3, #23
 8004f22:	fb04 3303 	mla	r3, r4, r3, r3
 8004f26:	eb03 0a02 	add.w	sl, r3, r2
 8004f2a:	9b02      	ldr	r3, [sp, #8]
 8004f2c:	9a06      	ldr	r2, [sp, #24]
 8004f2e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005200 <__kernel_rem_pio2+0x318>
 8004f32:	eb03 0802 	add.w	r8, r3, r2
 8004f36:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004f38:	1aa7      	subs	r7, r4, r2
 8004f3a:	ae22      	add	r6, sp, #136	; 0x88
 8004f3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004f40:	2500      	movs	r5, #0
 8004f42:	4545      	cmp	r5, r8
 8004f44:	dd13      	ble.n	8004f6e <__kernel_rem_pio2+0x86>
 8004f46:	9b08      	ldr	r3, [sp, #32]
 8004f48:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8005200 <__kernel_rem_pio2+0x318>
 8004f4c:	aa22      	add	r2, sp, #136	; 0x88
 8004f4e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004f52:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8004f56:	f04f 0800 	mov.w	r8, #0
 8004f5a:	9b02      	ldr	r3, [sp, #8]
 8004f5c:	4598      	cmp	r8, r3
 8004f5e:	dc2f      	bgt.n	8004fc0 <__kernel_rem_pio2+0xd8>
 8004f60:	ed8d 8b04 	vstr	d8, [sp, #16]
 8004f64:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004f68:	462f      	mov	r7, r5
 8004f6a:	2600      	movs	r6, #0
 8004f6c:	e01b      	b.n	8004fa6 <__kernel_rem_pio2+0xbe>
 8004f6e:	42ef      	cmn	r7, r5
 8004f70:	d407      	bmi.n	8004f82 <__kernel_rem_pio2+0x9a>
 8004f72:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004f76:	f7fb fa81 	bl	800047c <__aeabi_i2d>
 8004f7a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004f7e:	3501      	adds	r5, #1
 8004f80:	e7df      	b.n	8004f42 <__kernel_rem_pio2+0x5a>
 8004f82:	ec51 0b18 	vmov	r0, r1, d8
 8004f86:	e7f8      	b.n	8004f7a <__kernel_rem_pio2+0x92>
 8004f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f8c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004f90:	f7fb fade 	bl	8000550 <__aeabi_dmul>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f9c:	f7fb f922 	bl	80001e4 <__adddf3>
 8004fa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fa4:	3601      	adds	r6, #1
 8004fa6:	9b06      	ldr	r3, [sp, #24]
 8004fa8:	429e      	cmp	r6, r3
 8004faa:	f1a7 0708 	sub.w	r7, r7, #8
 8004fae:	ddeb      	ble.n	8004f88 <__kernel_rem_pio2+0xa0>
 8004fb0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004fb4:	f108 0801 	add.w	r8, r8, #1
 8004fb8:	ecab 7b02 	vstmia	fp!, {d7}
 8004fbc:	3508      	adds	r5, #8
 8004fbe:	e7cc      	b.n	8004f5a <__kernel_rem_pio2+0x72>
 8004fc0:	9b02      	ldr	r3, [sp, #8]
 8004fc2:	aa0e      	add	r2, sp, #56	; 0x38
 8004fc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004fc8:	930d      	str	r3, [sp, #52]	; 0x34
 8004fca:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004fcc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004fd0:	9c02      	ldr	r4, [sp, #8]
 8004fd2:	930c      	str	r3, [sp, #48]	; 0x30
 8004fd4:	00e3      	lsls	r3, r4, #3
 8004fd6:	930a      	str	r3, [sp, #40]	; 0x28
 8004fd8:	ab9a      	add	r3, sp, #616	; 0x268
 8004fda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004fde:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004fe2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8004fe6:	ab72      	add	r3, sp, #456	; 0x1c8
 8004fe8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8004fec:	46c3      	mov	fp, r8
 8004fee:	46a1      	mov	r9, r4
 8004ff0:	f1b9 0f00 	cmp.w	r9, #0
 8004ff4:	f1a5 0508 	sub.w	r5, r5, #8
 8004ff8:	dc77      	bgt.n	80050ea <__kernel_rem_pio2+0x202>
 8004ffa:	ec47 6b10 	vmov	d0, r6, r7
 8004ffe:	4650      	mov	r0, sl
 8005000:	f000 fc0a 	bl	8005818 <scalbn>
 8005004:	ec57 6b10 	vmov	r6, r7, d0
 8005008:	2200      	movs	r2, #0
 800500a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800500e:	ee10 0a10 	vmov	r0, s0
 8005012:	4639      	mov	r1, r7
 8005014:	f7fb fa9c 	bl	8000550 <__aeabi_dmul>
 8005018:	ec41 0b10 	vmov	d0, r0, r1
 800501c:	f000 fb7c 	bl	8005718 <floor>
 8005020:	4b7c      	ldr	r3, [pc, #496]	; (8005214 <__kernel_rem_pio2+0x32c>)
 8005022:	ec51 0b10 	vmov	r0, r1, d0
 8005026:	2200      	movs	r2, #0
 8005028:	f7fb fa92 	bl	8000550 <__aeabi_dmul>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4630      	mov	r0, r6
 8005032:	4639      	mov	r1, r7
 8005034:	f7fb f8d4 	bl	80001e0 <__aeabi_dsub>
 8005038:	460f      	mov	r7, r1
 800503a:	4606      	mov	r6, r0
 800503c:	f7fb fd38 	bl	8000ab0 <__aeabi_d2iz>
 8005040:	9004      	str	r0, [sp, #16]
 8005042:	f7fb fa1b 	bl	800047c <__aeabi_i2d>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4630      	mov	r0, r6
 800504c:	4639      	mov	r1, r7
 800504e:	f7fb f8c7 	bl	80001e0 <__aeabi_dsub>
 8005052:	f1ba 0f00 	cmp.w	sl, #0
 8005056:	4606      	mov	r6, r0
 8005058:	460f      	mov	r7, r1
 800505a:	dd6d      	ble.n	8005138 <__kernel_rem_pio2+0x250>
 800505c:	1e62      	subs	r2, r4, #1
 800505e:	ab0e      	add	r3, sp, #56	; 0x38
 8005060:	9d04      	ldr	r5, [sp, #16]
 8005062:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005066:	f1ca 0118 	rsb	r1, sl, #24
 800506a:	fa40 f301 	asr.w	r3, r0, r1
 800506e:	441d      	add	r5, r3
 8005070:	408b      	lsls	r3, r1
 8005072:	1ac0      	subs	r0, r0, r3
 8005074:	ab0e      	add	r3, sp, #56	; 0x38
 8005076:	9504      	str	r5, [sp, #16]
 8005078:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800507c:	f1ca 0317 	rsb	r3, sl, #23
 8005080:	fa40 fb03 	asr.w	fp, r0, r3
 8005084:	f1bb 0f00 	cmp.w	fp, #0
 8005088:	dd65      	ble.n	8005156 <__kernel_rem_pio2+0x26e>
 800508a:	9b04      	ldr	r3, [sp, #16]
 800508c:	2200      	movs	r2, #0
 800508e:	3301      	adds	r3, #1
 8005090:	9304      	str	r3, [sp, #16]
 8005092:	4615      	mov	r5, r2
 8005094:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005098:	4294      	cmp	r4, r2
 800509a:	f300 809c 	bgt.w	80051d6 <__kernel_rem_pio2+0x2ee>
 800509e:	f1ba 0f00 	cmp.w	sl, #0
 80050a2:	dd07      	ble.n	80050b4 <__kernel_rem_pio2+0x1cc>
 80050a4:	f1ba 0f01 	cmp.w	sl, #1
 80050a8:	f000 80c0 	beq.w	800522c <__kernel_rem_pio2+0x344>
 80050ac:	f1ba 0f02 	cmp.w	sl, #2
 80050b0:	f000 80c6 	beq.w	8005240 <__kernel_rem_pio2+0x358>
 80050b4:	f1bb 0f02 	cmp.w	fp, #2
 80050b8:	d14d      	bne.n	8005156 <__kernel_rem_pio2+0x26e>
 80050ba:	4632      	mov	r2, r6
 80050bc:	463b      	mov	r3, r7
 80050be:	4956      	ldr	r1, [pc, #344]	; (8005218 <__kernel_rem_pio2+0x330>)
 80050c0:	2000      	movs	r0, #0
 80050c2:	f7fb f88d 	bl	80001e0 <__aeabi_dsub>
 80050c6:	4606      	mov	r6, r0
 80050c8:	460f      	mov	r7, r1
 80050ca:	2d00      	cmp	r5, #0
 80050cc:	d043      	beq.n	8005156 <__kernel_rem_pio2+0x26e>
 80050ce:	4650      	mov	r0, sl
 80050d0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8005208 <__kernel_rem_pio2+0x320>
 80050d4:	f000 fba0 	bl	8005818 <scalbn>
 80050d8:	4630      	mov	r0, r6
 80050da:	4639      	mov	r1, r7
 80050dc:	ec53 2b10 	vmov	r2, r3, d0
 80050e0:	f7fb f87e 	bl	80001e0 <__aeabi_dsub>
 80050e4:	4606      	mov	r6, r0
 80050e6:	460f      	mov	r7, r1
 80050e8:	e035      	b.n	8005156 <__kernel_rem_pio2+0x26e>
 80050ea:	4b4c      	ldr	r3, [pc, #304]	; (800521c <__kernel_rem_pio2+0x334>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	4630      	mov	r0, r6
 80050f0:	4639      	mov	r1, r7
 80050f2:	f7fb fa2d 	bl	8000550 <__aeabi_dmul>
 80050f6:	f7fb fcdb 	bl	8000ab0 <__aeabi_d2iz>
 80050fa:	f7fb f9bf 	bl	800047c <__aeabi_i2d>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	ec43 2b18 	vmov	d8, r2, r3
 8005106:	4b46      	ldr	r3, [pc, #280]	; (8005220 <__kernel_rem_pio2+0x338>)
 8005108:	2200      	movs	r2, #0
 800510a:	f7fb fa21 	bl	8000550 <__aeabi_dmul>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	4630      	mov	r0, r6
 8005114:	4639      	mov	r1, r7
 8005116:	f7fb f863 	bl	80001e0 <__aeabi_dsub>
 800511a:	f7fb fcc9 	bl	8000ab0 <__aeabi_d2iz>
 800511e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005122:	f84b 0b04 	str.w	r0, [fp], #4
 8005126:	ec51 0b18 	vmov	r0, r1, d8
 800512a:	f7fb f85b 	bl	80001e4 <__adddf3>
 800512e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005132:	4606      	mov	r6, r0
 8005134:	460f      	mov	r7, r1
 8005136:	e75b      	b.n	8004ff0 <__kernel_rem_pio2+0x108>
 8005138:	d106      	bne.n	8005148 <__kernel_rem_pio2+0x260>
 800513a:	1e63      	subs	r3, r4, #1
 800513c:	aa0e      	add	r2, sp, #56	; 0x38
 800513e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005142:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8005146:	e79d      	b.n	8005084 <__kernel_rem_pio2+0x19c>
 8005148:	4b36      	ldr	r3, [pc, #216]	; (8005224 <__kernel_rem_pio2+0x33c>)
 800514a:	2200      	movs	r2, #0
 800514c:	f7fb fc86 	bl	8000a5c <__aeabi_dcmpge>
 8005150:	2800      	cmp	r0, #0
 8005152:	d13d      	bne.n	80051d0 <__kernel_rem_pio2+0x2e8>
 8005154:	4683      	mov	fp, r0
 8005156:	2200      	movs	r2, #0
 8005158:	2300      	movs	r3, #0
 800515a:	4630      	mov	r0, r6
 800515c:	4639      	mov	r1, r7
 800515e:	f7fb fc5f 	bl	8000a20 <__aeabi_dcmpeq>
 8005162:	2800      	cmp	r0, #0
 8005164:	f000 80c0 	beq.w	80052e8 <__kernel_rem_pio2+0x400>
 8005168:	1e65      	subs	r5, r4, #1
 800516a:	462b      	mov	r3, r5
 800516c:	2200      	movs	r2, #0
 800516e:	9902      	ldr	r1, [sp, #8]
 8005170:	428b      	cmp	r3, r1
 8005172:	da6c      	bge.n	800524e <__kernel_rem_pio2+0x366>
 8005174:	2a00      	cmp	r2, #0
 8005176:	f000 8089 	beq.w	800528c <__kernel_rem_pio2+0x3a4>
 800517a:	ab0e      	add	r3, sp, #56	; 0x38
 800517c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005180:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 80ad 	beq.w	80052e4 <__kernel_rem_pio2+0x3fc>
 800518a:	4650      	mov	r0, sl
 800518c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8005208 <__kernel_rem_pio2+0x320>
 8005190:	f000 fb42 	bl	8005818 <scalbn>
 8005194:	ab9a      	add	r3, sp, #616	; 0x268
 8005196:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800519a:	ec57 6b10 	vmov	r6, r7, d0
 800519e:	00ec      	lsls	r4, r5, #3
 80051a0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80051a4:	46aa      	mov	sl, r5
 80051a6:	f1ba 0f00 	cmp.w	sl, #0
 80051aa:	f280 80d6 	bge.w	800535a <__kernel_rem_pio2+0x472>
 80051ae:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8005200 <__kernel_rem_pio2+0x318>
 80051b2:	462e      	mov	r6, r5
 80051b4:	2e00      	cmp	r6, #0
 80051b6:	f2c0 8104 	blt.w	80053c2 <__kernel_rem_pio2+0x4da>
 80051ba:	ab72      	add	r3, sp, #456	; 0x1c8
 80051bc:	ed8d 8b06 	vstr	d8, [sp, #24]
 80051c0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005228 <__kernel_rem_pio2+0x340>
 80051c4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80051c8:	f04f 0800 	mov.w	r8, #0
 80051cc:	1baf      	subs	r7, r5, r6
 80051ce:	e0ea      	b.n	80053a6 <__kernel_rem_pio2+0x4be>
 80051d0:	f04f 0b02 	mov.w	fp, #2
 80051d4:	e759      	b.n	800508a <__kernel_rem_pio2+0x1a2>
 80051d6:	f8d8 3000 	ldr.w	r3, [r8]
 80051da:	b955      	cbnz	r5, 80051f2 <__kernel_rem_pio2+0x30a>
 80051dc:	b123      	cbz	r3, 80051e8 <__kernel_rem_pio2+0x300>
 80051de:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80051e2:	f8c8 3000 	str.w	r3, [r8]
 80051e6:	2301      	movs	r3, #1
 80051e8:	3201      	adds	r2, #1
 80051ea:	f108 0804 	add.w	r8, r8, #4
 80051ee:	461d      	mov	r5, r3
 80051f0:	e752      	b.n	8005098 <__kernel_rem_pio2+0x1b0>
 80051f2:	1acb      	subs	r3, r1, r3
 80051f4:	f8c8 3000 	str.w	r3, [r8]
 80051f8:	462b      	mov	r3, r5
 80051fa:	e7f5      	b.n	80051e8 <__kernel_rem_pio2+0x300>
 80051fc:	f3af 8000 	nop.w
	...
 800520c:	3ff00000 	.word	0x3ff00000
 8005210:	08005b20 	.word	0x08005b20
 8005214:	40200000 	.word	0x40200000
 8005218:	3ff00000 	.word	0x3ff00000
 800521c:	3e700000 	.word	0x3e700000
 8005220:	41700000 	.word	0x41700000
 8005224:	3fe00000 	.word	0x3fe00000
 8005228:	08005ae0 	.word	0x08005ae0
 800522c:	1e62      	subs	r2, r4, #1
 800522e:	ab0e      	add	r3, sp, #56	; 0x38
 8005230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005234:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005238:	a90e      	add	r1, sp, #56	; 0x38
 800523a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800523e:	e739      	b.n	80050b4 <__kernel_rem_pio2+0x1cc>
 8005240:	1e62      	subs	r2, r4, #1
 8005242:	ab0e      	add	r3, sp, #56	; 0x38
 8005244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005248:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800524c:	e7f4      	b.n	8005238 <__kernel_rem_pio2+0x350>
 800524e:	a90e      	add	r1, sp, #56	; 0x38
 8005250:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005254:	3b01      	subs	r3, #1
 8005256:	430a      	orrs	r2, r1
 8005258:	e789      	b.n	800516e <__kernel_rem_pio2+0x286>
 800525a:	3301      	adds	r3, #1
 800525c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005260:	2900      	cmp	r1, #0
 8005262:	d0fa      	beq.n	800525a <__kernel_rem_pio2+0x372>
 8005264:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005266:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800526a:	446a      	add	r2, sp
 800526c:	3a98      	subs	r2, #152	; 0x98
 800526e:	920a      	str	r2, [sp, #40]	; 0x28
 8005270:	9a08      	ldr	r2, [sp, #32]
 8005272:	18e3      	adds	r3, r4, r3
 8005274:	18a5      	adds	r5, r4, r2
 8005276:	aa22      	add	r2, sp, #136	; 0x88
 8005278:	f104 0801 	add.w	r8, r4, #1
 800527c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005280:	9304      	str	r3, [sp, #16]
 8005282:	9b04      	ldr	r3, [sp, #16]
 8005284:	4543      	cmp	r3, r8
 8005286:	da04      	bge.n	8005292 <__kernel_rem_pio2+0x3aa>
 8005288:	461c      	mov	r4, r3
 800528a:	e6a3      	b.n	8004fd4 <__kernel_rem_pio2+0xec>
 800528c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800528e:	2301      	movs	r3, #1
 8005290:	e7e4      	b.n	800525c <__kernel_rem_pio2+0x374>
 8005292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005294:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005298:	f7fb f8f0 	bl	800047c <__aeabi_i2d>
 800529c:	e8e5 0102 	strd	r0, r1, [r5], #8
 80052a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052a2:	46ab      	mov	fp, r5
 80052a4:	461c      	mov	r4, r3
 80052a6:	f04f 0900 	mov.w	r9, #0
 80052aa:	2600      	movs	r6, #0
 80052ac:	2700      	movs	r7, #0
 80052ae:	9b06      	ldr	r3, [sp, #24]
 80052b0:	4599      	cmp	r9, r3
 80052b2:	dd06      	ble.n	80052c2 <__kernel_rem_pio2+0x3da>
 80052b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052b6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80052ba:	f108 0801 	add.w	r8, r8, #1
 80052be:	930a      	str	r3, [sp, #40]	; 0x28
 80052c0:	e7df      	b.n	8005282 <__kernel_rem_pio2+0x39a>
 80052c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80052c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80052ca:	f7fb f941 	bl	8000550 <__aeabi_dmul>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4630      	mov	r0, r6
 80052d4:	4639      	mov	r1, r7
 80052d6:	f7fa ff85 	bl	80001e4 <__adddf3>
 80052da:	f109 0901 	add.w	r9, r9, #1
 80052de:	4606      	mov	r6, r0
 80052e0:	460f      	mov	r7, r1
 80052e2:	e7e4      	b.n	80052ae <__kernel_rem_pio2+0x3c6>
 80052e4:	3d01      	subs	r5, #1
 80052e6:	e748      	b.n	800517a <__kernel_rem_pio2+0x292>
 80052e8:	ec47 6b10 	vmov	d0, r6, r7
 80052ec:	f1ca 0000 	rsb	r0, sl, #0
 80052f0:	f000 fa92 	bl	8005818 <scalbn>
 80052f4:	ec57 6b10 	vmov	r6, r7, d0
 80052f8:	4ba0      	ldr	r3, [pc, #640]	; (800557c <__kernel_rem_pio2+0x694>)
 80052fa:	ee10 0a10 	vmov	r0, s0
 80052fe:	2200      	movs	r2, #0
 8005300:	4639      	mov	r1, r7
 8005302:	f7fb fbab 	bl	8000a5c <__aeabi_dcmpge>
 8005306:	b1f8      	cbz	r0, 8005348 <__kernel_rem_pio2+0x460>
 8005308:	4b9d      	ldr	r3, [pc, #628]	; (8005580 <__kernel_rem_pio2+0x698>)
 800530a:	2200      	movs	r2, #0
 800530c:	4630      	mov	r0, r6
 800530e:	4639      	mov	r1, r7
 8005310:	f7fb f91e 	bl	8000550 <__aeabi_dmul>
 8005314:	f7fb fbcc 	bl	8000ab0 <__aeabi_d2iz>
 8005318:	4680      	mov	r8, r0
 800531a:	f7fb f8af 	bl	800047c <__aeabi_i2d>
 800531e:	4b97      	ldr	r3, [pc, #604]	; (800557c <__kernel_rem_pio2+0x694>)
 8005320:	2200      	movs	r2, #0
 8005322:	f7fb f915 	bl	8000550 <__aeabi_dmul>
 8005326:	460b      	mov	r3, r1
 8005328:	4602      	mov	r2, r0
 800532a:	4639      	mov	r1, r7
 800532c:	4630      	mov	r0, r6
 800532e:	f7fa ff57 	bl	80001e0 <__aeabi_dsub>
 8005332:	f7fb fbbd 	bl	8000ab0 <__aeabi_d2iz>
 8005336:	1c65      	adds	r5, r4, #1
 8005338:	ab0e      	add	r3, sp, #56	; 0x38
 800533a:	f10a 0a18 	add.w	sl, sl, #24
 800533e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005342:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005346:	e720      	b.n	800518a <__kernel_rem_pio2+0x2a2>
 8005348:	4630      	mov	r0, r6
 800534a:	4639      	mov	r1, r7
 800534c:	f7fb fbb0 	bl	8000ab0 <__aeabi_d2iz>
 8005350:	ab0e      	add	r3, sp, #56	; 0x38
 8005352:	4625      	mov	r5, r4
 8005354:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005358:	e717      	b.n	800518a <__kernel_rem_pio2+0x2a2>
 800535a:	ab0e      	add	r3, sp, #56	; 0x38
 800535c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005360:	f7fb f88c 	bl	800047c <__aeabi_i2d>
 8005364:	4632      	mov	r2, r6
 8005366:	463b      	mov	r3, r7
 8005368:	f7fb f8f2 	bl	8000550 <__aeabi_dmul>
 800536c:	4b84      	ldr	r3, [pc, #528]	; (8005580 <__kernel_rem_pio2+0x698>)
 800536e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005372:	2200      	movs	r2, #0
 8005374:	4630      	mov	r0, r6
 8005376:	4639      	mov	r1, r7
 8005378:	f7fb f8ea 	bl	8000550 <__aeabi_dmul>
 800537c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005380:	4606      	mov	r6, r0
 8005382:	460f      	mov	r7, r1
 8005384:	e70f      	b.n	80051a6 <__kernel_rem_pio2+0x2be>
 8005386:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800538a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800538e:	f7fb f8df 	bl	8000550 <__aeabi_dmul>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800539a:	f7fa ff23 	bl	80001e4 <__adddf3>
 800539e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80053a2:	f108 0801 	add.w	r8, r8, #1
 80053a6:	9b02      	ldr	r3, [sp, #8]
 80053a8:	4598      	cmp	r8, r3
 80053aa:	dc01      	bgt.n	80053b0 <__kernel_rem_pio2+0x4c8>
 80053ac:	45b8      	cmp	r8, r7
 80053ae:	ddea      	ble.n	8005386 <__kernel_rem_pio2+0x49e>
 80053b0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80053b4:	ab4a      	add	r3, sp, #296	; 0x128
 80053b6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80053ba:	ed87 7b00 	vstr	d7, [r7]
 80053be:	3e01      	subs	r6, #1
 80053c0:	e6f8      	b.n	80051b4 <__kernel_rem_pio2+0x2cc>
 80053c2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	dc0b      	bgt.n	80053e0 <__kernel_rem_pio2+0x4f8>
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	dc35      	bgt.n	8005438 <__kernel_rem_pio2+0x550>
 80053cc:	d059      	beq.n	8005482 <__kernel_rem_pio2+0x59a>
 80053ce:	9b04      	ldr	r3, [sp, #16]
 80053d0:	f003 0007 	and.w	r0, r3, #7
 80053d4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80053d8:	ecbd 8b02 	vpop	{d8}
 80053dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d1f3      	bne.n	80053ce <__kernel_rem_pio2+0x4e6>
 80053e6:	ab4a      	add	r3, sp, #296	; 0x128
 80053e8:	4423      	add	r3, r4
 80053ea:	9306      	str	r3, [sp, #24]
 80053ec:	461c      	mov	r4, r3
 80053ee:	469a      	mov	sl, r3
 80053f0:	9502      	str	r5, [sp, #8]
 80053f2:	9b02      	ldr	r3, [sp, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f1aa 0a08 	sub.w	sl, sl, #8
 80053fa:	dc6b      	bgt.n	80054d4 <__kernel_rem_pio2+0x5ec>
 80053fc:	46aa      	mov	sl, r5
 80053fe:	f1ba 0f01 	cmp.w	sl, #1
 8005402:	f1a4 0408 	sub.w	r4, r4, #8
 8005406:	f300 8085 	bgt.w	8005514 <__kernel_rem_pio2+0x62c>
 800540a:	9c06      	ldr	r4, [sp, #24]
 800540c:	2000      	movs	r0, #0
 800540e:	3408      	adds	r4, #8
 8005410:	2100      	movs	r1, #0
 8005412:	2d01      	cmp	r5, #1
 8005414:	f300 809d 	bgt.w	8005552 <__kernel_rem_pio2+0x66a>
 8005418:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800541c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005420:	f1bb 0f00 	cmp.w	fp, #0
 8005424:	f040 809b 	bne.w	800555e <__kernel_rem_pio2+0x676>
 8005428:	9b01      	ldr	r3, [sp, #4]
 800542a:	e9c3 5600 	strd	r5, r6, [r3]
 800542e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005432:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005436:	e7ca      	b.n	80053ce <__kernel_rem_pio2+0x4e6>
 8005438:	3408      	adds	r4, #8
 800543a:	ab4a      	add	r3, sp, #296	; 0x128
 800543c:	441c      	add	r4, r3
 800543e:	462e      	mov	r6, r5
 8005440:	2000      	movs	r0, #0
 8005442:	2100      	movs	r1, #0
 8005444:	2e00      	cmp	r6, #0
 8005446:	da36      	bge.n	80054b6 <__kernel_rem_pio2+0x5ce>
 8005448:	f1bb 0f00 	cmp.w	fp, #0
 800544c:	d039      	beq.n	80054c2 <__kernel_rem_pio2+0x5da>
 800544e:	4602      	mov	r2, r0
 8005450:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005454:	9c01      	ldr	r4, [sp, #4]
 8005456:	e9c4 2300 	strd	r2, r3, [r4]
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005462:	f7fa febd 	bl	80001e0 <__aeabi_dsub>
 8005466:	ae4c      	add	r6, sp, #304	; 0x130
 8005468:	2401      	movs	r4, #1
 800546a:	42a5      	cmp	r5, r4
 800546c:	da2c      	bge.n	80054c8 <__kernel_rem_pio2+0x5e0>
 800546e:	f1bb 0f00 	cmp.w	fp, #0
 8005472:	d002      	beq.n	800547a <__kernel_rem_pio2+0x592>
 8005474:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005478:	4619      	mov	r1, r3
 800547a:	9b01      	ldr	r3, [sp, #4]
 800547c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005480:	e7a5      	b.n	80053ce <__kernel_rem_pio2+0x4e6>
 8005482:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8005486:	eb0d 0403 	add.w	r4, sp, r3
 800548a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800548e:	2000      	movs	r0, #0
 8005490:	2100      	movs	r1, #0
 8005492:	2d00      	cmp	r5, #0
 8005494:	da09      	bge.n	80054aa <__kernel_rem_pio2+0x5c2>
 8005496:	f1bb 0f00 	cmp.w	fp, #0
 800549a:	d002      	beq.n	80054a2 <__kernel_rem_pio2+0x5ba>
 800549c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054a0:	4619      	mov	r1, r3
 80054a2:	9b01      	ldr	r3, [sp, #4]
 80054a4:	e9c3 0100 	strd	r0, r1, [r3]
 80054a8:	e791      	b.n	80053ce <__kernel_rem_pio2+0x4e6>
 80054aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80054ae:	f7fa fe99 	bl	80001e4 <__adddf3>
 80054b2:	3d01      	subs	r5, #1
 80054b4:	e7ed      	b.n	8005492 <__kernel_rem_pio2+0x5aa>
 80054b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80054ba:	f7fa fe93 	bl	80001e4 <__adddf3>
 80054be:	3e01      	subs	r6, #1
 80054c0:	e7c0      	b.n	8005444 <__kernel_rem_pio2+0x55c>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	e7c5      	b.n	8005454 <__kernel_rem_pio2+0x56c>
 80054c8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80054cc:	f7fa fe8a 	bl	80001e4 <__adddf3>
 80054d0:	3401      	adds	r4, #1
 80054d2:	e7ca      	b.n	800546a <__kernel_rem_pio2+0x582>
 80054d4:	e9da 8900 	ldrd	r8, r9, [sl]
 80054d8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80054dc:	9b02      	ldr	r3, [sp, #8]
 80054de:	3b01      	subs	r3, #1
 80054e0:	9302      	str	r3, [sp, #8]
 80054e2:	4632      	mov	r2, r6
 80054e4:	463b      	mov	r3, r7
 80054e6:	4640      	mov	r0, r8
 80054e8:	4649      	mov	r1, r9
 80054ea:	f7fa fe7b 	bl	80001e4 <__adddf3>
 80054ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4640      	mov	r0, r8
 80054f8:	4649      	mov	r1, r9
 80054fa:	f7fa fe71 	bl	80001e0 <__aeabi_dsub>
 80054fe:	4632      	mov	r2, r6
 8005500:	463b      	mov	r3, r7
 8005502:	f7fa fe6f 	bl	80001e4 <__adddf3>
 8005506:	ed9d 7b08 	vldr	d7, [sp, #32]
 800550a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800550e:	ed8a 7b00 	vstr	d7, [sl]
 8005512:	e76e      	b.n	80053f2 <__kernel_rem_pio2+0x50a>
 8005514:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005518:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800551c:	4640      	mov	r0, r8
 800551e:	4632      	mov	r2, r6
 8005520:	463b      	mov	r3, r7
 8005522:	4649      	mov	r1, r9
 8005524:	f7fa fe5e 	bl	80001e4 <__adddf3>
 8005528:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4640      	mov	r0, r8
 8005532:	4649      	mov	r1, r9
 8005534:	f7fa fe54 	bl	80001e0 <__aeabi_dsub>
 8005538:	4632      	mov	r2, r6
 800553a:	463b      	mov	r3, r7
 800553c:	f7fa fe52 	bl	80001e4 <__adddf3>
 8005540:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005544:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005548:	ed84 7b00 	vstr	d7, [r4]
 800554c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005550:	e755      	b.n	80053fe <__kernel_rem_pio2+0x516>
 8005552:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005556:	f7fa fe45 	bl	80001e4 <__adddf3>
 800555a:	3d01      	subs	r5, #1
 800555c:	e759      	b.n	8005412 <__kernel_rem_pio2+0x52a>
 800555e:	9b01      	ldr	r3, [sp, #4]
 8005560:	9a01      	ldr	r2, [sp, #4]
 8005562:	601d      	str	r5, [r3, #0]
 8005564:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005568:	605c      	str	r4, [r3, #4]
 800556a:	609f      	str	r7, [r3, #8]
 800556c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005570:	60d3      	str	r3, [r2, #12]
 8005572:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005576:	6110      	str	r0, [r2, #16]
 8005578:	6153      	str	r3, [r2, #20]
 800557a:	e728      	b.n	80053ce <__kernel_rem_pio2+0x4e6>
 800557c:	41700000 	.word	0x41700000
 8005580:	3e700000 	.word	0x3e700000
 8005584:	00000000 	.word	0x00000000

08005588 <__kernel_sin>:
 8005588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558c:	ed2d 8b04 	vpush	{d8-d9}
 8005590:	eeb0 8a41 	vmov.f32	s16, s2
 8005594:	eef0 8a61 	vmov.f32	s17, s3
 8005598:	ec55 4b10 	vmov	r4, r5, d0
 800559c:	b083      	sub	sp, #12
 800559e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80055a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80055a6:	9001      	str	r0, [sp, #4]
 80055a8:	da06      	bge.n	80055b8 <__kernel_sin+0x30>
 80055aa:	ee10 0a10 	vmov	r0, s0
 80055ae:	4629      	mov	r1, r5
 80055b0:	f7fb fa7e 	bl	8000ab0 <__aeabi_d2iz>
 80055b4:	2800      	cmp	r0, #0
 80055b6:	d051      	beq.n	800565c <__kernel_sin+0xd4>
 80055b8:	4622      	mov	r2, r4
 80055ba:	462b      	mov	r3, r5
 80055bc:	4620      	mov	r0, r4
 80055be:	4629      	mov	r1, r5
 80055c0:	f7fa ffc6 	bl	8000550 <__aeabi_dmul>
 80055c4:	4682      	mov	sl, r0
 80055c6:	468b      	mov	fp, r1
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4620      	mov	r0, r4
 80055ce:	4629      	mov	r1, r5
 80055d0:	f7fa ffbe 	bl	8000550 <__aeabi_dmul>
 80055d4:	a341      	add	r3, pc, #260	; (adr r3, 80056dc <__kernel_sin+0x154>)
 80055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055da:	4680      	mov	r8, r0
 80055dc:	4689      	mov	r9, r1
 80055de:	4650      	mov	r0, sl
 80055e0:	4659      	mov	r1, fp
 80055e2:	f7fa ffb5 	bl	8000550 <__aeabi_dmul>
 80055e6:	a33f      	add	r3, pc, #252	; (adr r3, 80056e4 <__kernel_sin+0x15c>)
 80055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ec:	f7fa fdf8 	bl	80001e0 <__aeabi_dsub>
 80055f0:	4652      	mov	r2, sl
 80055f2:	465b      	mov	r3, fp
 80055f4:	f7fa ffac 	bl	8000550 <__aeabi_dmul>
 80055f8:	a33c      	add	r3, pc, #240	; (adr r3, 80056ec <__kernel_sin+0x164>)
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	f7fa fdf1 	bl	80001e4 <__adddf3>
 8005602:	4652      	mov	r2, sl
 8005604:	465b      	mov	r3, fp
 8005606:	f7fa ffa3 	bl	8000550 <__aeabi_dmul>
 800560a:	a33a      	add	r3, pc, #232	; (adr r3, 80056f4 <__kernel_sin+0x16c>)
 800560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005610:	f7fa fde6 	bl	80001e0 <__aeabi_dsub>
 8005614:	4652      	mov	r2, sl
 8005616:	465b      	mov	r3, fp
 8005618:	f7fa ff9a 	bl	8000550 <__aeabi_dmul>
 800561c:	a337      	add	r3, pc, #220	; (adr r3, 80056fc <__kernel_sin+0x174>)
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f7fa fddf 	bl	80001e4 <__adddf3>
 8005626:	9b01      	ldr	r3, [sp, #4]
 8005628:	4606      	mov	r6, r0
 800562a:	460f      	mov	r7, r1
 800562c:	b9eb      	cbnz	r3, 800566a <__kernel_sin+0xe2>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4650      	mov	r0, sl
 8005634:	4659      	mov	r1, fp
 8005636:	f7fa ff8b 	bl	8000550 <__aeabi_dmul>
 800563a:	a325      	add	r3, pc, #148	; (adr r3, 80056d0 <__kernel_sin+0x148>)
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f7fa fdce 	bl	80001e0 <__aeabi_dsub>
 8005644:	4642      	mov	r2, r8
 8005646:	464b      	mov	r3, r9
 8005648:	f7fa ff82 	bl	8000550 <__aeabi_dmul>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4620      	mov	r0, r4
 8005652:	4629      	mov	r1, r5
 8005654:	f7fa fdc6 	bl	80001e4 <__adddf3>
 8005658:	4604      	mov	r4, r0
 800565a:	460d      	mov	r5, r1
 800565c:	ec45 4b10 	vmov	d0, r4, r5
 8005660:	b003      	add	sp, #12
 8005662:	ecbd 8b04 	vpop	{d8-d9}
 8005666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566a:	4b1b      	ldr	r3, [pc, #108]	; (80056d8 <__kernel_sin+0x150>)
 800566c:	ec51 0b18 	vmov	r0, r1, d8
 8005670:	2200      	movs	r2, #0
 8005672:	f7fa ff6d 	bl	8000550 <__aeabi_dmul>
 8005676:	4632      	mov	r2, r6
 8005678:	ec41 0b19 	vmov	d9, r0, r1
 800567c:	463b      	mov	r3, r7
 800567e:	4640      	mov	r0, r8
 8005680:	4649      	mov	r1, r9
 8005682:	f7fa ff65 	bl	8000550 <__aeabi_dmul>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	ec51 0b19 	vmov	r0, r1, d9
 800568e:	f7fa fda7 	bl	80001e0 <__aeabi_dsub>
 8005692:	4652      	mov	r2, sl
 8005694:	465b      	mov	r3, fp
 8005696:	f7fa ff5b 	bl	8000550 <__aeabi_dmul>
 800569a:	ec53 2b18 	vmov	r2, r3, d8
 800569e:	f7fa fd9f 	bl	80001e0 <__aeabi_dsub>
 80056a2:	a30b      	add	r3, pc, #44	; (adr r3, 80056d0 <__kernel_sin+0x148>)
 80056a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a8:	4606      	mov	r6, r0
 80056aa:	460f      	mov	r7, r1
 80056ac:	4640      	mov	r0, r8
 80056ae:	4649      	mov	r1, r9
 80056b0:	f7fa ff4e 	bl	8000550 <__aeabi_dmul>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4630      	mov	r0, r6
 80056ba:	4639      	mov	r1, r7
 80056bc:	f7fa fd92 	bl	80001e4 <__adddf3>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4620      	mov	r0, r4
 80056c6:	4629      	mov	r1, r5
 80056c8:	f7fa fd8a 	bl	80001e0 <__aeabi_dsub>
 80056cc:	e7c4      	b.n	8005658 <__kernel_sin+0xd0>
 80056ce:	bf00      	nop
 80056d0:	55555549 	.word	0x55555549
 80056d4:	3fc55555 	.word	0x3fc55555
 80056d8:	3fe00000 	.word	0x3fe00000
 80056dc:	5acfd57c 	.word	0x5acfd57c
 80056e0:	3de5d93a 	.word	0x3de5d93a
 80056e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80056e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80056ec:	57b1fe7d 	.word	0x57b1fe7d
 80056f0:	3ec71de3 	.word	0x3ec71de3
 80056f4:	19c161d5 	.word	0x19c161d5
 80056f8:	3f2a01a0 	.word	0x3f2a01a0
 80056fc:	1110f8a6 	.word	0x1110f8a6
 8005700:	3f811111 	.word	0x3f811111

08005704 <fabs>:
 8005704:	ec51 0b10 	vmov	r0, r1, d0
 8005708:	ee10 2a10 	vmov	r2, s0
 800570c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005710:	ec43 2b10 	vmov	d0, r2, r3
 8005714:	4770      	bx	lr
	...

08005718 <floor>:
 8005718:	ec51 0b10 	vmov	r0, r1, d0
 800571c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005720:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005724:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005728:	2e13      	cmp	r6, #19
 800572a:	ee10 5a10 	vmov	r5, s0
 800572e:	ee10 8a10 	vmov	r8, s0
 8005732:	460c      	mov	r4, r1
 8005734:	dc32      	bgt.n	800579c <floor+0x84>
 8005736:	2e00      	cmp	r6, #0
 8005738:	da14      	bge.n	8005764 <floor+0x4c>
 800573a:	a333      	add	r3, pc, #204	; (adr r3, 8005808 <floor+0xf0>)
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f7fa fd50 	bl	80001e4 <__adddf3>
 8005744:	2200      	movs	r2, #0
 8005746:	2300      	movs	r3, #0
 8005748:	f7fb f992 	bl	8000a70 <__aeabi_dcmpgt>
 800574c:	b138      	cbz	r0, 800575e <floor+0x46>
 800574e:	2c00      	cmp	r4, #0
 8005750:	da57      	bge.n	8005802 <floor+0xea>
 8005752:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005756:	431d      	orrs	r5, r3
 8005758:	d001      	beq.n	800575e <floor+0x46>
 800575a:	4c2d      	ldr	r4, [pc, #180]	; (8005810 <floor+0xf8>)
 800575c:	2500      	movs	r5, #0
 800575e:	4621      	mov	r1, r4
 8005760:	4628      	mov	r0, r5
 8005762:	e025      	b.n	80057b0 <floor+0x98>
 8005764:	4f2b      	ldr	r7, [pc, #172]	; (8005814 <floor+0xfc>)
 8005766:	4137      	asrs	r7, r6
 8005768:	ea01 0307 	and.w	r3, r1, r7
 800576c:	4303      	orrs	r3, r0
 800576e:	d01f      	beq.n	80057b0 <floor+0x98>
 8005770:	a325      	add	r3, pc, #148	; (adr r3, 8005808 <floor+0xf0>)
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	f7fa fd35 	bl	80001e4 <__adddf3>
 800577a:	2200      	movs	r2, #0
 800577c:	2300      	movs	r3, #0
 800577e:	f7fb f977 	bl	8000a70 <__aeabi_dcmpgt>
 8005782:	2800      	cmp	r0, #0
 8005784:	d0eb      	beq.n	800575e <floor+0x46>
 8005786:	2c00      	cmp	r4, #0
 8005788:	bfbe      	ittt	lt
 800578a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800578e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005792:	19a4      	addlt	r4, r4, r6
 8005794:	ea24 0407 	bic.w	r4, r4, r7
 8005798:	2500      	movs	r5, #0
 800579a:	e7e0      	b.n	800575e <floor+0x46>
 800579c:	2e33      	cmp	r6, #51	; 0x33
 800579e:	dd0b      	ble.n	80057b8 <floor+0xa0>
 80057a0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80057a4:	d104      	bne.n	80057b0 <floor+0x98>
 80057a6:	ee10 2a10 	vmov	r2, s0
 80057aa:	460b      	mov	r3, r1
 80057ac:	f7fa fd1a 	bl	80001e4 <__adddf3>
 80057b0:	ec41 0b10 	vmov	d0, r0, r1
 80057b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057b8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80057bc:	f04f 33ff 	mov.w	r3, #4294967295
 80057c0:	fa23 f707 	lsr.w	r7, r3, r7
 80057c4:	4207      	tst	r7, r0
 80057c6:	d0f3      	beq.n	80057b0 <floor+0x98>
 80057c8:	a30f      	add	r3, pc, #60	; (adr r3, 8005808 <floor+0xf0>)
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	f7fa fd09 	bl	80001e4 <__adddf3>
 80057d2:	2200      	movs	r2, #0
 80057d4:	2300      	movs	r3, #0
 80057d6:	f7fb f94b 	bl	8000a70 <__aeabi_dcmpgt>
 80057da:	2800      	cmp	r0, #0
 80057dc:	d0bf      	beq.n	800575e <floor+0x46>
 80057de:	2c00      	cmp	r4, #0
 80057e0:	da02      	bge.n	80057e8 <floor+0xd0>
 80057e2:	2e14      	cmp	r6, #20
 80057e4:	d103      	bne.n	80057ee <floor+0xd6>
 80057e6:	3401      	adds	r4, #1
 80057e8:	ea25 0507 	bic.w	r5, r5, r7
 80057ec:	e7b7      	b.n	800575e <floor+0x46>
 80057ee:	2301      	movs	r3, #1
 80057f0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80057f4:	fa03 f606 	lsl.w	r6, r3, r6
 80057f8:	4435      	add	r5, r6
 80057fa:	4545      	cmp	r5, r8
 80057fc:	bf38      	it	cc
 80057fe:	18e4      	addcc	r4, r4, r3
 8005800:	e7f2      	b.n	80057e8 <floor+0xd0>
 8005802:	2500      	movs	r5, #0
 8005804:	462c      	mov	r4, r5
 8005806:	e7aa      	b.n	800575e <floor+0x46>
 8005808:	8800759c 	.word	0x8800759c
 800580c:	7e37e43c 	.word	0x7e37e43c
 8005810:	bff00000 	.word	0xbff00000
 8005814:	000fffff 	.word	0x000fffff

08005818 <scalbn>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	ec55 4b10 	vmov	r4, r5, d0
 800581e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005822:	4606      	mov	r6, r0
 8005824:	462b      	mov	r3, r5
 8005826:	b99a      	cbnz	r2, 8005850 <scalbn+0x38>
 8005828:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800582c:	4323      	orrs	r3, r4
 800582e:	d036      	beq.n	800589e <scalbn+0x86>
 8005830:	4b39      	ldr	r3, [pc, #228]	; (8005918 <scalbn+0x100>)
 8005832:	4629      	mov	r1, r5
 8005834:	ee10 0a10 	vmov	r0, s0
 8005838:	2200      	movs	r2, #0
 800583a:	f7fa fe89 	bl	8000550 <__aeabi_dmul>
 800583e:	4b37      	ldr	r3, [pc, #220]	; (800591c <scalbn+0x104>)
 8005840:	429e      	cmp	r6, r3
 8005842:	4604      	mov	r4, r0
 8005844:	460d      	mov	r5, r1
 8005846:	da10      	bge.n	800586a <scalbn+0x52>
 8005848:	a32b      	add	r3, pc, #172	; (adr r3, 80058f8 <scalbn+0xe0>)
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	e03a      	b.n	80058c6 <scalbn+0xae>
 8005850:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005854:	428a      	cmp	r2, r1
 8005856:	d10c      	bne.n	8005872 <scalbn+0x5a>
 8005858:	ee10 2a10 	vmov	r2, s0
 800585c:	4620      	mov	r0, r4
 800585e:	4629      	mov	r1, r5
 8005860:	f7fa fcc0 	bl	80001e4 <__adddf3>
 8005864:	4604      	mov	r4, r0
 8005866:	460d      	mov	r5, r1
 8005868:	e019      	b.n	800589e <scalbn+0x86>
 800586a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800586e:	460b      	mov	r3, r1
 8005870:	3a36      	subs	r2, #54	; 0x36
 8005872:	4432      	add	r2, r6
 8005874:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005878:	428a      	cmp	r2, r1
 800587a:	dd08      	ble.n	800588e <scalbn+0x76>
 800587c:	2d00      	cmp	r5, #0
 800587e:	a120      	add	r1, pc, #128	; (adr r1, 8005900 <scalbn+0xe8>)
 8005880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005884:	da1c      	bge.n	80058c0 <scalbn+0xa8>
 8005886:	a120      	add	r1, pc, #128	; (adr r1, 8005908 <scalbn+0xf0>)
 8005888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800588c:	e018      	b.n	80058c0 <scalbn+0xa8>
 800588e:	2a00      	cmp	r2, #0
 8005890:	dd08      	ble.n	80058a4 <scalbn+0x8c>
 8005892:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005896:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800589a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800589e:	ec45 4b10 	vmov	d0, r4, r5
 80058a2:	bd70      	pop	{r4, r5, r6, pc}
 80058a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80058a8:	da19      	bge.n	80058de <scalbn+0xc6>
 80058aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80058ae:	429e      	cmp	r6, r3
 80058b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80058b4:	dd0a      	ble.n	80058cc <scalbn+0xb4>
 80058b6:	a112      	add	r1, pc, #72	; (adr r1, 8005900 <scalbn+0xe8>)
 80058b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e2      	bne.n	8005886 <scalbn+0x6e>
 80058c0:	a30f      	add	r3, pc, #60	; (adr r3, 8005900 <scalbn+0xe8>)
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	f7fa fe43 	bl	8000550 <__aeabi_dmul>
 80058ca:	e7cb      	b.n	8005864 <scalbn+0x4c>
 80058cc:	a10a      	add	r1, pc, #40	; (adr r1, 80058f8 <scalbn+0xe0>)
 80058ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d0b8      	beq.n	8005848 <scalbn+0x30>
 80058d6:	a10e      	add	r1, pc, #56	; (adr r1, 8005910 <scalbn+0xf8>)
 80058d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058dc:	e7b4      	b.n	8005848 <scalbn+0x30>
 80058de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80058e2:	3236      	adds	r2, #54	; 0x36
 80058e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80058e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80058ec:	4620      	mov	r0, r4
 80058ee:	4b0c      	ldr	r3, [pc, #48]	; (8005920 <scalbn+0x108>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	e7e8      	b.n	80058c6 <scalbn+0xae>
 80058f4:	f3af 8000 	nop.w
 80058f8:	c2f8f359 	.word	0xc2f8f359
 80058fc:	01a56e1f 	.word	0x01a56e1f
 8005900:	8800759c 	.word	0x8800759c
 8005904:	7e37e43c 	.word	0x7e37e43c
 8005908:	8800759c 	.word	0x8800759c
 800590c:	fe37e43c 	.word	0xfe37e43c
 8005910:	c2f8f359 	.word	0xc2f8f359
 8005914:	81a56e1f 	.word	0x81a56e1f
 8005918:	43500000 	.word	0x43500000
 800591c:	ffff3cb0 	.word	0xffff3cb0
 8005920:	3c900000 	.word	0x3c900000

08005924 <_init>:
 8005924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005926:	bf00      	nop
 8005928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800592a:	bc08      	pop	{r3}
 800592c:	469e      	mov	lr, r3
 800592e:	4770      	bx	lr

08005930 <_fini>:
 8005930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005932:	bf00      	nop
 8005934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005936:	bc08      	pop	{r3}
 8005938:	469e      	mov	lr, r3
 800593a:	4770      	bx	lr
