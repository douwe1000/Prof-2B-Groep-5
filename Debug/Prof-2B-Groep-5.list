
Prof-2B-Groep-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005684  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005820  08005820  00015820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a10  08005a10  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005a10  08005a10  00015a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a18  08005a18  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a18  08005a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a1c  08005a1c  00015a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  20000074  08005a94  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  08005a94  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb0f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202c  00000000  00000000  0002ebb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00030be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  00031a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000213e  00000000  00000000  000327f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffff  00000000  00000000  00034936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a65c  00000000  00000000  00044935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000def91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004268  00000000  00000000  000defe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005804 	.word	0x08005804

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08005804 	.word	0x08005804

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b974 	b.w	8000ea0 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468e      	mov	lr, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4694      	mov	ip, r2
 8000be2:	d969      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b152      	cbz	r2, 8000c00 <__udivmoddi4+0x30>
 8000bea:	fa01 f302 	lsl.w	r3, r1, r2
 8000bee:	f1c2 0120 	rsb	r1, r2, #32
 8000bf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c04:	0c21      	lsrs	r1, r4, #16
 8000c06:	fbbe f6f8 	udiv	r6, lr, r8
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c16:	fb06 f107 	mul.w	r1, r6, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c26:	f080 811f 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 811c 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 f707 	mul.w	r7, r0, r7
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	f080 810a 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c58:	42a7      	cmp	r7, r4
 8000c5a:	f240 8107 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c66:	1be4      	subs	r4, r4, r7
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80ef 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c84:	2600      	movs	r6, #0
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f683 	clz	r6, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80f9 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	469e      	mov	lr, r3
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000cb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8092 	bne.w	8000dea <__udivmoddi4+0x21a>
 8000cc6:	eba1 010c 	sub.w	r1, r1, ip
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cda:	fb07 1113 	mls	r1, r7, r3, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1110 	mls	r1, r7, r0, r1
 8000d08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d24:	4608      	mov	r0, r1
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79c      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000d30:	f1c6 0720 	rsb	r7, r6, #32
 8000d34:	40b3      	lsls	r3, r6
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d42:	fa01 f306 	lsl.w	r3, r1, r6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	40f9      	lsrs	r1, r7
 8000d4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d56:	0c20      	lsrs	r0, r4, #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	fb08 f00e 	mul.w	r0, r8, lr
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d90:	fb09 1110 	mls	r1, r9, r0, r1
 8000d94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	458e      	cmp	lr, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dba:	eba1 010e 	sub.w	r1, r1, lr
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46a6      	mov	lr, r4
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x212>
 8000dca:	ebb3 0208 	subs.w	r2, r3, r8
 8000dce:	eb61 010e 	sbc.w	r1, r1, lr
 8000dd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dda:	40f1      	lsrs	r1, r6
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	e9c5 7100 	strd	r7, r1, [r5]
 8000de2:	2600      	movs	r6, #0
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa21 f303 	lsr.w	r3, r1, r3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e08:	fb07 3610 	mls	r6, r7, r0, r3
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e12:	fb00 f60e 	mul.w	r6, r0, lr
 8000e16:	429e      	cmp	r6, r3
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	429e      	cmp	r6, r3
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1b9b      	subs	r3, r3, r6
 8000e32:	b289      	uxth	r1, r1
 8000e34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e38:	fb07 3316 	mls	r3, r7, r6, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb06 f30e 	mul.w	r3, r6, lr
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3e02      	subs	r6, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	462e      	mov	r6, r5
 8000e64:	4628      	mov	r0, r5
 8000e66:	e705      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	e6e3      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f8      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4646      	mov	r6, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4620      	mov	r0, r4
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	3b02      	subs	r3, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e709      	b.n	8000cae <__udivmoddi4+0xde>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x156>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	0000      	movs	r0, r0
	...

08000ea8 <dft>:
	  float ImX[buffersize/2];// imaginaire deel van x
	  float AmpX[buffersize/2];// amplitude van x


float dft(int k)
{
 8000ea8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
	for (j=0; j<(buffersize/2);j++)
 8000eb2:	4b9d      	ldr	r3, [pc, #628]	; (8001128 <dft+0x280>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	e014      	b.n	8000ee4 <dft+0x3c>
	{
		ReX[j]=0;
 8000eba:	4b9b      	ldr	r3, [pc, #620]	; (8001128 <dft+0x280>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a9b      	ldr	r2, [pc, #620]	; (800112c <dft+0x284>)
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
		ImX[j]=0;
 8000eca:	4b97      	ldr	r3, [pc, #604]	; (8001128 <dft+0x280>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a98      	ldr	r2, [pc, #608]	; (8001130 <dft+0x288>)
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	f04f 0200 	mov.w	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
	for (j=0; j<(buffersize/2);j++)
 8000eda:	4b93      	ldr	r3, [pc, #588]	; (8001128 <dft+0x280>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a91      	ldr	r2, [pc, #580]	; (8001128 <dft+0x280>)
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4b90      	ldr	r3, [pc, #576]	; (8001128 <dft+0x280>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b3f      	cmp	r3, #63	; 0x3f
 8000eea:	dde6      	ble.n	8000eba <dft+0x12>
	}

		  for (n=0 ; n<(buffersize-1) ; n++)
 8000eec:	4b91      	ldr	r3, [pc, #580]	; (8001134 <dft+0x28c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	e0ae      	b.n	8001052 <dft+0x1aa>
		  {
			  ReX[k] = ReX[k] + buffer[n] * cos(n * k * M_PI * 2 / buffersize);
 8000ef4:	4a8d      	ldr	r2, [pc, #564]	; (800112c <dft+0x284>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff face 	bl	80004a0 <__aeabi_f2d>
 8000f04:	4604      	mov	r4, r0
 8000f06:	460d      	mov	r5, r1
 8000f08:	4b8a      	ldr	r3, [pc, #552]	; (8001134 <dft+0x28c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a8a      	ldr	r2, [pc, #552]	; (8001138 <dft+0x290>)
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fac3 	bl	80004a0 <__aeabi_f2d>
 8000f1a:	4680      	mov	r8, r0
 8000f1c:	4689      	mov	r9, r1
 8000f1e:	4b85      	ldr	r3, [pc, #532]	; (8001134 <dft+0x28c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	fb02 f303 	mul.w	r3, r2, r3
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff faa7 	bl	800047c <__aeabi_i2d>
 8000f2e:	a37c      	add	r3, pc, #496	; (adr r3, 8001120 <dft+0x278>)
 8000f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f34:	f7ff fb0c 	bl	8000550 <__aeabi_dmul>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	f7ff f94e 	bl	80001e4 <__adddf3>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	4b79      	ldr	r3, [pc, #484]	; (800113c <dft+0x294>)
 8000f56:	f7ff fc25 	bl	80007a4 <__aeabi_ddiv>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	ec43 2b17 	vmov	d7, r2, r3
 8000f62:	eeb0 0a47 	vmov.f32	s0, s14
 8000f66:	eef0 0a67 	vmov.f32	s1, s15
 8000f6a:	f003 facd 	bl	8004508 <cos>
 8000f6e:	ec53 2b10 	vmov	r2, r3, d0
 8000f72:	4640      	mov	r0, r8
 8000f74:	4649      	mov	r1, r9
 8000f76:	f7ff faeb 	bl	8000550 <__aeabi_dmul>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4620      	mov	r0, r4
 8000f80:	4629      	mov	r1, r5
 8000f82:	f7ff f92f 	bl	80001e4 <__adddf3>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f7ff fdb7 	bl	8000b00 <__aeabi_d2f>
 8000f92:	4602      	mov	r2, r0
 8000f94:	4965      	ldr	r1, [pc, #404]	; (800112c <dft+0x284>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	601a      	str	r2, [r3, #0]
			  ImX[k] = ImX[k] - buffer[n] * sin(n * k * M_PI * 2 / buffersize);
 8000f9e:	4a64      	ldr	r2, [pc, #400]	; (8001130 <dft+0x288>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fa79 	bl	80004a0 <__aeabi_f2d>
 8000fae:	4604      	mov	r4, r0
 8000fb0:	460d      	mov	r5, r1
 8000fb2:	4b60      	ldr	r3, [pc, #384]	; (8001134 <dft+0x28c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a60      	ldr	r2, [pc, #384]	; (8001138 <dft+0x290>)
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fa6e 	bl	80004a0 <__aeabi_f2d>
 8000fc4:	4680      	mov	r8, r0
 8000fc6:	4689      	mov	r9, r1
 8000fc8:	4b5a      	ldr	r3, [pc, #360]	; (8001134 <dft+0x28c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	fb02 f303 	mul.w	r3, r2, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fa52 	bl	800047c <__aeabi_i2d>
 8000fd8:	a351      	add	r3, pc, #324	; (adr r3, 8001120 <dft+0x278>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fab7 	bl	8000550 <__aeabi_dmul>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	f7ff f8f9 	bl	80001e4 <__adddf3>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	4b4f      	ldr	r3, [pc, #316]	; (800113c <dft+0x294>)
 8001000:	f7ff fbd0 	bl	80007a4 <__aeabi_ddiv>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	ec43 2b17 	vmov	d7, r2, r3
 800100c:	eeb0 0a47 	vmov.f32	s0, s14
 8001010:	eef0 0a67 	vmov.f32	s1, s15
 8001014:	f003 facc 	bl	80045b0 <sin>
 8001018:	ec53 2b10 	vmov	r2, r3, d0
 800101c:	4640      	mov	r0, r8
 800101e:	4649      	mov	r1, r9
 8001020:	f7ff fa96 	bl	8000550 <__aeabi_dmul>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4620      	mov	r0, r4
 800102a:	4629      	mov	r1, r5
 800102c:	f7ff f8d8 	bl	80001e0 <__aeabi_dsub>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff fd62 	bl	8000b00 <__aeabi_d2f>
 800103c:	4602      	mov	r2, r0
 800103e:	493c      	ldr	r1, [pc, #240]	; (8001130 <dft+0x288>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	601a      	str	r2, [r3, #0]
		  for (n=0 ; n<(buffersize-1) ; n++)
 8001048:	4b3a      	ldr	r3, [pc, #232]	; (8001134 <dft+0x28c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	4a39      	ldr	r2, [pc, #228]	; (8001134 <dft+0x28c>)
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	4b38      	ldr	r3, [pc, #224]	; (8001134 <dft+0x28c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b7e      	cmp	r3, #126	; 0x7e
 8001058:	f77f af4c 	ble.w	8000ef4 <dft+0x4c>
		  }

		  ReX[k] /= buffersize/2;
 800105c:	4a33      	ldr	r2, [pc, #204]	; (800112c <dft+0x284>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	ed93 7a00 	vldr	s14, [r3]
 8001068:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001140 <dft+0x298>
 800106c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001070:	4a2e      	ldr	r2, [pc, #184]	; (800112c <dft+0x284>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	edc3 7a00 	vstr	s15, [r3]
		  ImX[k] /= buffersize/2;
 800107c:	4a2c      	ldr	r2, [pc, #176]	; (8001130 <dft+0x288>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	ed93 7a00 	vldr	s14, [r3]
 8001088:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001140 <dft+0x298>
 800108c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001090:	4a27      	ldr	r2, [pc, #156]	; (8001130 <dft+0x288>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	edc3 7a00 	vstr	s15, [r3]

		  AmpX[k] = sqrt(ReX[k]*ReX[k] + ImX[k]*ImX[k]);//sterkte van signal per frequentie van k
 800109c:	4a23      	ldr	r2, [pc, #140]	; (800112c <dft+0x284>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	ed93 7a00 	vldr	s14, [r3]
 80010a8:	4a20      	ldr	r2, [pc, #128]	; (800112c <dft+0x284>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010b8:	4a1d      	ldr	r2, [pc, #116]	; (8001130 <dft+0x288>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	edd3 6a00 	vldr	s13, [r3]
 80010c4:	4a1a      	ldr	r2, [pc, #104]	; (8001130 <dft+0x288>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d8:	ee17 0a90 	vmov	r0, s15
 80010dc:	f7ff f9e0 	bl	80004a0 <__aeabi_f2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	ec43 2b10 	vmov	d0, r2, r3
 80010e8:	f003 faba 	bl	8004660 <sqrt>
 80010ec:	ec53 2b10 	vmov	r2, r3, d0
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f7ff fd04 	bl	8000b00 <__aeabi_d2f>
 80010f8:	4602      	mov	r2, r0
 80010fa:	4912      	ldr	r1, [pc, #72]	; (8001144 <dft+0x29c>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	601a      	str	r2, [r3, #0]
		  return AmpX[k];
 8001104:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <dft+0x29c>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	ee07 3a90 	vmov	s15, r3
}
 8001112:	eeb0 0a67 	vmov.f32	s0, s15
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800111e:	bf00      	nop
 8001120:	54442d18 	.word	0x54442d18
 8001124:	400921fb 	.word	0x400921fb
 8001128:	20000094 	.word	0x20000094
 800112c:	20000098 	.word	0x20000098
 8001130:	20000198 	.word	0x20000198
 8001134:	20000090 	.word	0x20000090
 8001138:	200004c4 	.word	0x200004c4
 800113c:	40600000 	.word	0x40600000
 8001140:	42800000 	.word	0x42800000
 8001144:	20000298 	.word	0x20000298

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114e:	f000 fd1b 	bl	8001b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001152:	f000 f93f 	bl	80013d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001156:	f000 faa7 	bl	80016a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800115a:	f000 fa2b 	bl	80015b4 <MX_TIM2_Init>
  MX_ADC1_Init();
 800115e:	f000 f9a1 	bl	80014a4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001162:	f000 f9f1 	bl	8001548 <MX_SPI1_Init>
  MX_USART2_Init();
 8001166:	f000 fa71 	bl	800164c <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800116a:	488a      	ldr	r0, [pc, #552]	; (8001394 <main+0x24c>)
 800116c:	f002 f9e4 	bl	8003538 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Y_waarde = Y_waarde + 1;
 8001170:	4b89      	ldr	r3, [pc, #548]	; (8001398 <main+0x250>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	4a88      	ldr	r2, [pc, #544]	; (8001398 <main+0x250>)
 8001178:	6013      	str	r3, [r2, #0]
	  if (Y_waarde == 608) Y_waarde = 0;
 800117a:	4b87      	ldr	r3, [pc, #540]	; (8001398 <main+0x250>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8001182:	d102      	bne.n	800118a <main+0x42>
 8001184:	4b84      	ldr	r3, [pc, #528]	; (8001398 <main+0x250>)
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]

	  if (dft_waarde == 1){
 800118a:	4b84      	ldr	r3, [pc, #528]	; (800139c <main+0x254>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b01      	cmp	r3, #1
 8001190:	f040 80e2 	bne.w	8001358 <main+0x210>
		  f2031hz = dft(12);
 8001194:	200c      	movs	r0, #12
 8001196:	f7ff fe87 	bl	8000ea8 <dft>
 800119a:	eef0 7a40 	vmov.f32	s15, s0
 800119e:	4b80      	ldr	r3, [pc, #512]	; (80013a0 <main+0x258>)
 80011a0:	edc3 7a00 	vstr	s15, [r3]
		  f1000hz = dft(6);
 80011a4:	2006      	movs	r0, #6
 80011a6:	f7ff fe7f 	bl	8000ea8 <dft>
 80011aa:	eef0 7a40 	vmov.f32	s15, s0
 80011ae:	4b7d      	ldr	r3, [pc, #500]	; (80013a4 <main+0x25c>)
 80011b0:	edc3 7a00 	vstr	s15, [r3]
		  f3000hz = dft(21);
 80011b4:	2015      	movs	r0, #21
 80011b6:	f7ff fe77 	bl	8000ea8 <dft>
 80011ba:	eef0 7a40 	vmov.f32	s15, s0
 80011be:	4b7a      	ldr	r3, [pc, #488]	; (80013a8 <main+0x260>)
 80011c0:	edc3 7a00 	vstr	s15, [r3]
		  f4000hz = dft(26);
 80011c4:	201a      	movs	r0, #26
 80011c6:	f7ff fe6f 	bl	8000ea8 <dft>
 80011ca:	eef0 7a40 	vmov.f32	s15, s0
 80011ce:	4b77      	ldr	r3, [pc, #476]	; (80013ac <main+0x264>)
 80011d0:	edc3 7a00 	vstr	s15, [r3]
		  dft_waarde = 0;
 80011d4:	4b71      	ldr	r3, [pc, #452]	; (800139c <main+0x254>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]



	  //kies x waarde 64-224-384-544
		  Sprite_kleur = 0;
 80011da:	4b75      	ldr	r3, [pc, #468]	; (80013b0 <main+0x268>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]





		  if (f1000hz >= 200){//1kHz ingedrukt
 80011e0:	4b70      	ldr	r3, [pc, #448]	; (80013a4 <main+0x25c>)
 80011e2:	edd3 7a00 	vldr	s15, [r3]
 80011e6:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80013b4 <main+0x26c>
 80011ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	db21      	blt.n	8001238 <main+0xf0>
			  if (last1 ==0)
 80011f4:	4b70      	ldr	r3, [pc, #448]	; (80013b8 <main+0x270>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d120      	bne.n	800123e <main+0xf6>
			  {
				  if((Y_waarde >350) && (Y_waarde< 410) )//sprite in de witte balk
 80011fc:	4b66      	ldr	r3, [pc, #408]	; (8001398 <main+0x250>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001204:	dd0b      	ble.n	800121e <main+0xd6>
 8001206:	4b64      	ldr	r3, [pc, #400]	; (8001398 <main+0x250>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800120e:	da06      	bge.n	800121e <main+0xd6>
				  {
					  Sprite_kleur += 64;//kleur wordt groen
 8001210:	4b67      	ldr	r3, [pc, #412]	; (80013b0 <main+0x268>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	3340      	adds	r3, #64	; 0x40
 8001216:	b2da      	uxtb	r2, r3
 8001218:	4b65      	ldr	r3, [pc, #404]	; (80013b0 <main+0x268>)
 800121a:	701a      	strb	r2, [r3, #0]
				  {
 800121c:	e008      	b.n	8001230 <main+0xe8>
					  void display_send();

				  }
				  else
				  {
					  Sprite_kleur+= 128;//kleur wordt rood
 800121e:	4b64      	ldr	r3, [pc, #400]	; (80013b0 <main+0x268>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	3b80      	subs	r3, #128	; 0x80
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b62      	ldr	r3, [pc, #392]	; (80013b0 <main+0x268>)
 8001228:	701a      	strb	r2, [r3, #0]
//						 HAL_Delay(80);
//						 X_waarde = X_waarde - 5;
//						 void display_send();
//						 HAL_Delay(80);
//					  }
					  Y_waarde=0;//begin weer opnieuw
 800122a:	4b5b      	ldr	r3, [pc, #364]	; (8001398 <main+0x250>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
				  }



				 last1 = 1;
 8001230:	4b61      	ldr	r3, [pc, #388]	; (80013b8 <main+0x270>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e002      	b.n	800123e <main+0xf6>
			  }
		  }
		  else last1 = 0;
 8001238:	4b5f      	ldr	r3, [pc, #380]	; (80013b8 <main+0x270>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]




		  if (f2031hz >= 200){//2kHz ingedrukt
 800123e:	4b58      	ldr	r3, [pc, #352]	; (80013a0 <main+0x258>)
 8001240:	edd3 7a00 	vldr	s15, [r3]
 8001244:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80013b4 <main+0x26c>
 8001248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800124c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001250:	db21      	blt.n	8001296 <main+0x14e>
			  if (last2 == 0)
 8001252:	4b5a      	ldr	r3, [pc, #360]	; (80013bc <main+0x274>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d120      	bne.n	800129c <main+0x154>
			  {
				  if((Y_waarde >350) && (Y_waarde< 410) )//sprite in de witte balk
 800125a:	4b4f      	ldr	r3, [pc, #316]	; (8001398 <main+0x250>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001262:	dd0b      	ble.n	800127c <main+0x134>
 8001264:	4b4c      	ldr	r3, [pc, #304]	; (8001398 <main+0x250>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800126c:	da06      	bge.n	800127c <main+0x134>
				  {
					  Sprite_kleur+= 16;//kleur wordt groen
 800126e:	4b50      	ldr	r3, [pc, #320]	; (80013b0 <main+0x268>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	3310      	adds	r3, #16
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b4e      	ldr	r3, [pc, #312]	; (80013b0 <main+0x268>)
 8001278:	701a      	strb	r2, [r3, #0]
				  {
 800127a:	e008      	b.n	800128e <main+0x146>
					  void display_send();

				  }
				  else
				  {
					  Sprite_kleur+= 32;//kleur wordt rood
 800127c:	4b4c      	ldr	r3, [pc, #304]	; (80013b0 <main+0x268>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	3320      	adds	r3, #32
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <main+0x268>)
 8001286:	701a      	strb	r2, [r3, #0]
//						 HAL_Delay(200);
//						 X_waarde = X_waarde - 5;
//						 void display_send();
//						 HAL_Delay(80);
//					  }
					  Y_waarde=0;
 8001288:	4b43      	ldr	r3, [pc, #268]	; (8001398 <main+0x250>)
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
				  }


				  last2 = 1;
 800128e:	4b4b      	ldr	r3, [pc, #300]	; (80013bc <main+0x274>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	e002      	b.n	800129c <main+0x154>
			  }
		  }
		  else last2 = 0;
 8001296:	4b49      	ldr	r3, [pc, #292]	; (80013bc <main+0x274>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]




		  if (f3000hz >= 200){//3kHz ingedrukt
 800129c:	4b42      	ldr	r3, [pc, #264]	; (80013a8 <main+0x260>)
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80013b4 <main+0x26c>
 80012a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ae:	db21      	blt.n	80012f4 <main+0x1ac>
			  if (last3 == 0)
 80012b0:	4b43      	ldr	r3, [pc, #268]	; (80013c0 <main+0x278>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d120      	bne.n	80012fa <main+0x1b2>
			  {
				  if((Y_waarde >350) && (Y_waarde< 410) )//sprite in de witte balk
 80012b8:	4b37      	ldr	r3, [pc, #220]	; (8001398 <main+0x250>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80012c0:	dd0b      	ble.n	80012da <main+0x192>
 80012c2:	4b35      	ldr	r3, [pc, #212]	; (8001398 <main+0x250>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 80012ca:	da06      	bge.n	80012da <main+0x192>
				  {
					  Sprite_kleur+= 4;//kleur wordt groen
 80012cc:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <main+0x268>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	3304      	adds	r3, #4
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <main+0x268>)
 80012d6:	701a      	strb	r2, [r3, #0]
				  {
 80012d8:	e008      	b.n	80012ec <main+0x1a4>
					  void display_send();

				  }
				  else
				  {
					  Sprite_kleur+= 8;//kleur wordt rood
 80012da:	4b35      	ldr	r3, [pc, #212]	; (80013b0 <main+0x268>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	3308      	adds	r3, #8
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <main+0x268>)
 80012e4:	701a      	strb	r2, [r3, #0]
//						 HAL_Delay(200);
//						 X_waarde = X_waarde - 5;
//						 void display_send();
//						 HAL_Delay(80);
//					  }
					  Y_waarde=0;
 80012e6:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <main+0x250>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
				  }


			  	  last3 = 1;
 80012ec:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <main+0x278>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	e002      	b.n	80012fa <main+0x1b2>
			  }
		  }
		  else last3 = 0;
 80012f4:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <main+0x278>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]



		  if (f4000hz >= 200){//4kHz ingedrukt
 80012fa:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <main+0x264>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80013b4 <main+0x26c>
 8001304:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	db21      	blt.n	8001352 <main+0x20a>
			  if (last4 ==0)
 800130e:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <main+0x27c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d120      	bne.n	8001358 <main+0x210>
			  {
				  if((Y_waarde >350) && (Y_waarde< 410) )//sprite in de witte balk
 8001316:	4b20      	ldr	r3, [pc, #128]	; (8001398 <main+0x250>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800131e:	dd0b      	ble.n	8001338 <main+0x1f0>
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <main+0x250>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8001328:	da06      	bge.n	8001338 <main+0x1f0>
				  {
					  Sprite_kleur+= 1;//kleur wordt groen
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <main+0x268>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <main+0x268>)
 8001334:	701a      	strb	r2, [r3, #0]
				  {
 8001336:	e008      	b.n	800134a <main+0x202>
					  void display_send();

				  }
				  else
				  {
					  Sprite_kleur+= 2;//kleur wordt rood
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <main+0x268>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	3302      	adds	r3, #2
 800133e:	b2da      	uxtb	r2, r3
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <main+0x268>)
 8001342:	701a      	strb	r2, [r3, #0]
//						 HAL_Delay(200);
//						 X_waarde = X_waarde - 5;
//						 void display_send();
//						 HAL_Delay(80);
//					  }
					  Y_waarde=0;
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <main+0x250>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
				  }



				  last4 = 1;
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <main+0x27c>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	e002      	b.n	8001358 <main+0x210>
			  }
		  }
		  else last4 = 0;
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <main+0x27c>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

	  }


	 //uint8_t outputbuf[] = {(round(f1000hz))/2,(round(f2031hz))/2, (round(f3000hz))/2, (round(f4000hz))/2 };
	  uint8_t outputbuf[] = {X_waarde/3, Y_waarde/3, Sprite_kleur};
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <main+0x280>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <main+0x284>)
 800135e:	fb82 1203 	smull	r1, r2, r2, r3
 8001362:	17db      	asrs	r3, r3, #31
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	713b      	strb	r3, [r7, #4]
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <main+0x250>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a17      	ldr	r2, [pc, #92]	; (80013cc <main+0x284>)
 8001370:	fb82 1203 	smull	r1, r2, r2, r3
 8001374:	17db      	asrs	r3, r3, #31
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	b2db      	uxtb	r3, r3
 800137a:	717b      	strb	r3, [r7, #5]
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <main+0x268>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	71bb      	strb	r3, [r7, #6]
	  HAL_USART_Transmit(&husart2, outputbuf, sizeof(outputbuf), HAL_MAX_DELAY);
 8001382:	1d39      	adds	r1, r7, #4
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
 8001388:	2203      	movs	r2, #3
 800138a:	4811      	ldr	r0, [pc, #68]	; (80013d0 <main+0x288>)
 800138c:	f002 fd0b 	bl	8003da6 <HAL_USART_Transmit>
  {
 8001390:	e6ee      	b.n	8001170 <main+0x28>
 8001392:	bf00      	nop
 8001394:	20000438 	.word	0x20000438
 8001398:	200006ec 	.word	0x200006ec
 800139c:	200006c8 	.word	0x200006c8
 80013a0:	200006d0 	.word	0x200006d0
 80013a4:	200006cc 	.word	0x200006cc
 80013a8:	200006d4 	.word	0x200006d4
 80013ac:	200006d8 	.word	0x200006d8
 80013b0:	200006f0 	.word	0x200006f0
 80013b4:	43480000 	.word	0x43480000
 80013b8:	200006e0 	.word	0x200006e0
 80013bc:	200006e4 	.word	0x200006e4
 80013c0:	200006dc 	.word	0x200006dc
 80013c4:	200006e8 	.word	0x200006e8
 80013c8:	20000000 	.word	0x20000000
 80013cc:	55555556 	.word	0x55555556
 80013d0:	20000480 	.word	0x20000480

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b094      	sub	sp, #80	; 0x50
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	2230      	movs	r2, #48	; 0x30
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f003 f888 	bl	80044f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	4b27      	ldr	r3, [pc, #156]	; (800149c <SystemClock_Config+0xc8>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	4a26      	ldr	r2, [pc, #152]	; (800149c <SystemClock_Config+0xc8>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	; 0x40
 8001408:	4b24      	ldr	r3, [pc, #144]	; (800149c <SystemClock_Config+0xc8>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <SystemClock_Config+0xcc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a20      	ldr	r2, [pc, #128]	; (80014a0 <SystemClock_Config+0xcc>)
 800141e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <SystemClock_Config+0xcc>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001430:	2302      	movs	r3, #2
 8001432:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001434:	2301      	movs	r3, #1
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001438:	2310      	movs	r3, #16
 800143a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143c:	2302      	movs	r3, #2
 800143e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001440:	2300      	movs	r3, #0
 8001442:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001444:	2308      	movs	r3, #8
 8001446:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001448:	2340      	movs	r3, #64	; 0x40
 800144a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800144c:	2302      	movs	r3, #2
 800144e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001450:	2304      	movs	r3, #4
 8001452:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	4618      	mov	r0, r3
 800145a:	f001 fb3d 	bl	8002ad8 <HAL_RCC_OscConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001464:	f000 f9c6 	bl	80017f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001468:	230f      	movs	r3, #15
 800146a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146c:	2302      	movs	r3, #2
 800146e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	2101      	movs	r1, #1
 8001482:	4618      	mov	r0, r3
 8001484:	f001 fda0 	bl	8002fc8 <HAL_RCC_ClockConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800148e:	f000 f9b1 	bl	80017f4 <Error_Handler>
  }
}
 8001492:	bf00      	nop
 8001494:	3750      	adds	r7, #80	; 0x50
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	40007000 	.word	0x40007000

080014a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014aa:	463b      	mov	r3, r7
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014b6:	4b21      	ldr	r3, [pc, #132]	; (800153c <MX_ADC1_Init+0x98>)
 80014b8:	4a21      	ldr	r2, [pc, #132]	; (8001540 <MX_ADC1_Init+0x9c>)
 80014ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014bc:	4b1f      	ldr	r3, [pc, #124]	; (800153c <MX_ADC1_Init+0x98>)
 80014be:	2200      	movs	r2, #0
 80014c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80014c2:	4b1e      	ldr	r3, [pc, #120]	; (800153c <MX_ADC1_Init+0x98>)
 80014c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014ca:	4b1c      	ldr	r3, [pc, #112]	; (800153c <MX_ADC1_Init+0x98>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014d0:	4b1a      	ldr	r3, [pc, #104]	; (800153c <MX_ADC1_Init+0x98>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014d6:	4b19      	ldr	r3, [pc, #100]	; (800153c <MX_ADC1_Init+0x98>)
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014de:	4b17      	ldr	r3, [pc, #92]	; (800153c <MX_ADC1_Init+0x98>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <MX_ADC1_Init+0x98>)
 80014e6:	4a17      	ldr	r2, [pc, #92]	; (8001544 <MX_ADC1_Init+0xa0>)
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_ADC1_Init+0x98>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <MX_ADC1_Init+0x98>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_ADC1_Init+0x98>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_ADC1_Init+0x98>)
 8001500:	2201      	movs	r2, #1
 8001502:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <MX_ADC1_Init+0x98>)
 8001506:	f000 fbb1 	bl	8001c6c <HAL_ADC_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001510:	f000 f970 	bl	80017f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001514:	2300      	movs	r3, #0
 8001516:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001518:	2301      	movs	r3, #1
 800151a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001520:	463b      	mov	r3, r7
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_ADC1_Init+0x98>)
 8001526:	f000 fdd5 	bl	80020d4 <HAL_ADC_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001530:	f000 f960 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000398 	.word	0x20000398
 8001540:	40012000 	.word	0x40012000
 8001544:	0f000001 	.word	0x0f000001

08001548 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <MX_SPI1_Init+0x64>)
 800154e:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <MX_SPI1_Init+0x68>)
 8001550:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <MX_SPI1_Init+0x64>)
 8001554:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001558:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_SPI1_Init+0x64>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <MX_SPI1_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_SPI1_Init+0x64>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_SPI1_Init+0x64>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_SPI1_Init+0x64>)
 8001574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001578:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_SPI1_Init+0x64>)
 800157c:	2200      	movs	r2, #0
 800157e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <MX_SPI1_Init+0x64>)
 8001582:	2200      	movs	r2, #0
 8001584:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_SPI1_Init+0x64>)
 8001588:	2200      	movs	r2, #0
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <MX_SPI1_Init+0x64>)
 800158e:	2200      	movs	r2, #0
 8001590:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_SPI1_Init+0x64>)
 8001594:	220a      	movs	r2, #10
 8001596:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001598:	4804      	ldr	r0, [pc, #16]	; (80015ac <MX_SPI1_Init+0x64>)
 800159a:	f001 fef5 	bl	8003388 <HAL_SPI_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015a4:	f000 f926 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200003e0 	.word	0x200003e0
 80015b0:	40013000 	.word	0x40013000

080015b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <MX_TIM2_Init+0x94>)
 80015d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <MX_TIM2_Init+0x94>)
 80015da:	2220      	movs	r2, #32
 80015dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015de:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_TIM2_Init+0x94>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <MX_TIM2_Init+0x94>)
 80015e6:	2232      	movs	r2, #50	; 0x32
 80015e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_TIM2_Init+0x94>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <MX_TIM2_Init+0x94>)
 80015f2:	2280      	movs	r2, #128	; 0x80
 80015f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015f6:	4814      	ldr	r0, [pc, #80]	; (8001648 <MX_TIM2_Init+0x94>)
 80015f8:	f001 ff4f 	bl	800349a <HAL_TIM_Base_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001602:	f000 f8f7 	bl	80017f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	4619      	mov	r1, r3
 8001612:	480d      	ldr	r0, [pc, #52]	; (8001648 <MX_TIM2_Init+0x94>)
 8001614:	f002 f8fa 	bl	800380c <HAL_TIM_ConfigClockSource>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800161e:	f000 f8e9 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800162a:	463b      	mov	r3, r7
 800162c:	4619      	mov	r1, r3
 800162e:	4806      	ldr	r0, [pc, #24]	; (8001648 <MX_TIM2_Init+0x94>)
 8001630:	f002 faf6 	bl	8003c20 <HAL_TIMEx_MasterConfigSynchronization>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800163a:	f000 f8db 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000438 	.word	0x20000438

0800164c <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MX_USART2_Init+0x54>)
 8001652:	4a14      	ldr	r2, [pc, #80]	; (80016a4 <MX_USART2_Init+0x58>)
 8001654:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MX_USART2_Init+0x54>)
 8001658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800165c:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <MX_USART2_Init+0x54>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <MX_USART2_Init+0x54>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <MX_USART2_Init+0x54>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <MX_USART2_Init+0x54>)
 8001672:	220c      	movs	r2, #12
 8001674:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <MX_USART2_Init+0x54>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <MX_USART2_Init+0x54>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8001682:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <MX_USART2_Init+0x54>)
 8001684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001688:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_USART2_Init+0x54>)
 800168c:	f002 fb4a 	bl	8003d24 <HAL_USART_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_USART2_Init+0x4e>
  {
    Error_Handler();
 8001696:	f000 f8ad 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000480 	.word	0x20000480
 80016a4:	40004400 	.word	0x40004400

080016a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	4b2a      	ldr	r3, [pc, #168]	; (800176c <MX_GPIO_Init+0xc4>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a29      	ldr	r2, [pc, #164]	; (800176c <MX_GPIO_Init+0xc4>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b27      	ldr	r3, [pc, #156]	; (800176c <MX_GPIO_Init+0xc4>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	4b23      	ldr	r3, [pc, #140]	; (800176c <MX_GPIO_Init+0xc4>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a22      	ldr	r2, [pc, #136]	; (800176c <MX_GPIO_Init+0xc4>)
 80016e4:	f043 0308 	orr.w	r3, r3, #8
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <MX_GPIO_Init+0xc4>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <MX_GPIO_Init+0xc4>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a1b      	ldr	r2, [pc, #108]	; (800176c <MX_GPIO_Init+0xc4>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <MX_GPIO_Init+0xc4>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|BLUELED_Pin, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001718:	4815      	ldr	r0, [pc, #84]	; (8001770 <MX_GPIO_Init+0xc8>)
 800171a:	f001 f9a9 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ldac_Pin|SS1_Pin, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	2190      	movs	r1, #144	; 0x90
 8001722:	4814      	ldr	r0, [pc, #80]	; (8001774 <MX_GPIO_Init+0xcc>)
 8001724:	f001 f9a4 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 BLUELED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|BLUELED_Pin;
 8001728:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800172c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	4619      	mov	r1, r3
 8001740:	480b      	ldr	r0, [pc, #44]	; (8001770 <MX_GPIO_Init+0xc8>)
 8001742:	f001 f811 	bl	8002768 <HAL_GPIO_Init>

  /*Configure GPIO pins : ldac_Pin SS1_Pin */
  GPIO_InitStruct.Pin = ldac_Pin|SS1_Pin;
 8001746:	2390      	movs	r3, #144	; 0x90
 8001748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_GPIO_Init+0xcc>)
 800175e:	f001 f803 	bl	8002768 <HAL_GPIO_Init>

}
 8001762:	bf00      	nop
 8001764:	3720      	adds	r7, #32
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40020c00 	.word	0x40020c00
 8001774:	40020400 	.word	0x40020400

08001778 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
	{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_TogglePin(GPIOD, BLUELED_Pin);
 8001780:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001784:	4815      	ldr	r0, [pc, #84]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001786:	f001 f98c 	bl	8002aa2 <HAL_GPIO_TogglePin>

		if (htim == &htim2)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d120      	bne.n	80017d4 <HAL_TIM_PeriodElapsedCallback+0x5c>
		{
			pos++;
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800179a:	6013      	str	r3, [r2, #0]
			buffer[(pos-1)] = HAL_ADC_GetValue(&hadc1);
 800179c:	4812      	ldr	r0, [pc, #72]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800179e:	f000 fc6d 	bl	800207c <HAL_ADC_GetValue>
 80017a2:	ee07 0a90 	vmov	s15, r0
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017b0:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	edc3 7a00 	vstr	s15, [r3]
			HAL_ADC_Start(&hadc1);
 80017ba:	480b      	ldr	r0, [pc, #44]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80017bc:	f000 fa9a 	bl	8001cf4 <HAL_ADC_Start>
			if (pos > buffersize)
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b80      	cmp	r3, #128	; 0x80
 80017c6:	d905      	bls.n	80017d4 <HAL_TIM_PeriodElapsedCallback+0x5c>
				{
				dft_waarde = 1;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]
				pos = 0;
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

				}

		}
	}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40020c00 	.word	0x40020c00
 80017e0:	20000438 	.word	0x20000438
 80017e4:	200006c4 	.word	0x200006c4
 80017e8:	20000398 	.word	0x20000398
 80017ec:	200004c4 	.word	0x200004c4
 80017f0:	200006c8 	.word	0x200006c8

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017fc:	e7fe      	b.n	80017fc <Error_Handler+0x8>
	...

08001800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_MspInit+0x4c>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	4a0f      	ldr	r2, [pc, #60]	; (800184c <HAL_MspInit+0x4c>)
 8001810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001814:	6453      	str	r3, [r2, #68]	; 0x44
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_MspInit+0x4c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_MspInit+0x4c>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <HAL_MspInit+0x4c>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_MspInit+0x4c>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800

08001850 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a1b      	ldr	r2, [pc, #108]	; (80018dc <HAL_ADC_MspInit+0x8c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d12f      	bne.n	80018d2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <HAL_ADC_MspInit+0x90>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <HAL_ADC_MspInit+0x90>)
 800187c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001880:	6453      	str	r3, [r2, #68]	; 0x44
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <HAL_ADC_MspInit+0x90>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <HAL_ADC_MspInit+0x90>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <HAL_ADC_MspInit+0x90>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <HAL_ADC_MspInit+0x90>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018aa:	2301      	movs	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ae:	2303      	movs	r3, #3
 80018b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4809      	ldr	r0, [pc, #36]	; (80018e4 <HAL_ADC_MspInit+0x94>)
 80018be:	f000 ff53 	bl	8002768 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	2012      	movs	r0, #18
 80018c8:	f000 ff17 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80018cc:	2012      	movs	r0, #18
 80018ce:	f000 ff30 	bl	8002732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	; 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40012000 	.word	0x40012000
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40020000 	.word	0x40020000

080018e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a28      	ldr	r2, [pc, #160]	; (80019a8 <HAL_SPI_MspInit+0xc0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d149      	bne.n	800199e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	4b27      	ldr	r3, [pc, #156]	; (80019ac <HAL_SPI_MspInit+0xc4>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	4a26      	ldr	r2, [pc, #152]	; (80019ac <HAL_SPI_MspInit+0xc4>)
 8001914:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001918:	6453      	str	r3, [r2, #68]	; 0x44
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_SPI_MspInit+0xc4>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <HAL_SPI_MspInit+0xc4>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a1f      	ldr	r2, [pc, #124]	; (80019ac <HAL_SPI_MspInit+0xc4>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <HAL_SPI_MspInit+0xc4>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_SPI_MspInit+0xc4>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a18      	ldr	r2, [pc, #96]	; (80019ac <HAL_SPI_MspInit+0xc4>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <HAL_SPI_MspInit+0xc4>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800195e:	23c0      	movs	r3, #192	; 0xc0
 8001960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800196e:	2305      	movs	r3, #5
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	480d      	ldr	r0, [pc, #52]	; (80019b0 <HAL_SPI_MspInit+0xc8>)
 800197a:	f000 fef5 	bl	8002768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800197e:	2308      	movs	r3, #8
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198a:	2303      	movs	r3, #3
 800198c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800198e:	2305      	movs	r3, #5
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	4806      	ldr	r0, [pc, #24]	; (80019b4 <HAL_SPI_MspInit+0xcc>)
 800199a:	f000 fee5 	bl	8002768 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800199e:	bf00      	nop
 80019a0:	3728      	adds	r7, #40	; 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40013000 	.word	0x40013000
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020000 	.word	0x40020000
 80019b4:	40020400 	.word	0x40020400

080019b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c8:	d115      	bne.n	80019f6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <HAL_TIM_Base_MspInit+0x48>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <HAL_TIM_Base_MspInit+0x48>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6413      	str	r3, [r2, #64]	; 0x40
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_TIM_Base_MspInit+0x48>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	201c      	movs	r0, #28
 80019ec:	f000 fe85 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019f0:	201c      	movs	r0, #28
 80019f2:	f000 fe9e 	bl	8002732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800

08001a04 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	; 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a19      	ldr	r2, [pc, #100]	; (8001a88 <HAL_USART_MspInit+0x84>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d12b      	bne.n	8001a7e <HAL_USART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <HAL_USART_MspInit+0x88>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	4a17      	ldr	r2, [pc, #92]	; (8001a8c <HAL_USART_MspInit+0x88>)
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a34:	6413      	str	r3, [r2, #64]	; 0x40
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_USART_MspInit+0x88>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HAL_USART_MspInit+0x88>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a10      	ldr	r2, [pc, #64]	; (8001a8c <HAL_USART_MspInit+0x88>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <HAL_USART_MspInit+0x88>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001a5e:	231c      	movs	r3, #28
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a6e:	2307      	movs	r3, #7
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <HAL_USART_MspInit+0x8c>)
 8001a7a:	f000 fe75 	bl	8002768 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a7e:	bf00      	nop
 8001a80:	3728      	adds	r7, #40	; 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40004400 	.word	0x40004400
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40020000 	.word	0x40020000

08001a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <NMI_Handler+0x4>

08001a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae0:	f000 f8a4 	bl	8001c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <ADC_IRQHandler+0x10>)
 8001aee:	f000 f9b5 	bl	8001e5c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000398 	.word	0x20000398

08001afc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <TIM2_IRQHandler+0x10>)
 8001b02:	f001 fd7b 	bl	80035fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000438 	.word	0x20000438

08001b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <SystemInit+0x20>)
 8001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1a:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <SystemInit+0x20>)
 8001b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b38:	480d      	ldr	r0, [pc, #52]	; (8001b70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b3a:	490e      	ldr	r1, [pc, #56]	; (8001b74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4e:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b50:	4c0b      	ldr	r4, [pc, #44]	; (8001b80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b5e:	f7ff ffd7 	bl	8001b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b62:	f002 fca5 	bl	80044b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b66:	f7ff faef 	bl	8001148 <main>
  bx  lr    
 8001b6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b74:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b78:	08005a20 	.word	0x08005a20
  ldr r2, =_sbss
 8001b7c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b80:	200006f8 	.word	0x200006f8

08001b84 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b84:	e7fe      	b.n	8001b84 <DMA1_Stream0_IRQHandler>
	...

08001b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <HAL_Init+0x40>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <HAL_Init+0x40>)
 8001b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_Init+0x40>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <HAL_Init+0x40>)
 8001b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_Init+0x40>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <HAL_Init+0x40>)
 8001baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f000 fd97 	bl	80026e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb6:	200f      	movs	r0, #15
 8001bb8:	f000 f808 	bl	8001bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bbc:	f7ff fe20 	bl	8001800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023c00 	.word	0x40023c00

08001bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_InitTick+0x54>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_InitTick+0x58>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 fdaf 	bl	800274e <HAL_SYSTICK_Config>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00e      	b.n	8001c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b0f      	cmp	r3, #15
 8001bfe:	d80a      	bhi.n	8001c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c00:	2200      	movs	r2, #0
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f000 fd77 	bl	80026fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c0c:	4a06      	ldr	r2, [pc, #24]	; (8001c28 <HAL_InitTick+0x5c>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e000      	b.n	8001c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000004 	.word	0x20000004
 8001c24:	2000000c 	.word	0x2000000c
 8001c28:	20000008 	.word	0x20000008

08001c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_IncTick+0x20>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_IncTick+0x24>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_IncTick+0x24>)
 8001c3e:	6013      	str	r3, [r2, #0]
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	2000000c 	.word	0x2000000c
 8001c50:	200006f4 	.word	0x200006f4

08001c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return uwTick;
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_GetTick+0x14>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	200006f4 	.word	0x200006f4

08001c6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e033      	b.n	8001cea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fde0 	bl	8001850 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cb2:	f023 0302 	bic.w	r3, r3, #2
 8001cb6:	f043 0202 	orr.w	r2, r3, #2
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fb3a 	bl	8002338 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f023 0303 	bic.w	r3, r3, #3
 8001cd2:	f043 0201 	orr.w	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
 8001cda:	e001      	b.n	8001ce0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_Start+0x1a>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e097      	b.n	8001e3e <HAL_ADC_Start+0x14a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d018      	beq.n	8001d56 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d34:	4b45      	ldr	r3, [pc, #276]	; (8001e4c <HAL_ADC_Start+0x158>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a45      	ldr	r2, [pc, #276]	; (8001e50 <HAL_ADC_Start+0x15c>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0c9a      	lsrs	r2, r3, #18
 8001d40:	4613      	mov	r3, r2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d48:	e002      	b.n	8001d50 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f9      	bne.n	8001d4a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d15f      	bne.n	8001e24 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d6c:	f023 0301 	bic.w	r3, r3, #1
 8001d70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001da2:	d106      	bne.n	8001db2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da8:	f023 0206 	bic.w	r2, r3, #6
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	645a      	str	r2, [r3, #68]	; 0x44
 8001db0:	e002      	b.n	8001db8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dc0:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <HAL_ADC_Start+0x160>)
 8001dc2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001dcc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10f      	bne.n	8001dfa <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d129      	bne.n	8001e3c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	e020      	b.n	8001e3c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a16      	ldr	r2, [pc, #88]	; (8001e58 <HAL_ADC_Start+0x164>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d11b      	bne.n	8001e3c <HAL_ADC_Start+0x148>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d114      	bne.n	8001e3c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	e00b      	b.n	8001e3c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	f043 0210 	orr.w	r2, r3, #16
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e34:	f043 0201 	orr.w	r2, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000004 	.word	0x20000004
 8001e50:	431bde83 	.word	0x431bde83
 8001e54:	40012300 	.word	0x40012300
 8001e58:	40012000 	.word	0x40012000

08001e5c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f003 0320 	and.w	r3, r3, #32
 8001e8a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d049      	beq.n	8001f26 <HAL_ADC_IRQHandler+0xca>
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d046      	beq.n	8001f26 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d105      	bne.n	8001eb0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d12b      	bne.n	8001f16 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d127      	bne.n	8001f16 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d006      	beq.n	8001ee2 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d119      	bne.n	8001f16 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0220 	bic.w	r2, r2, #32
 8001ef0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d105      	bne.n	8001f16 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f043 0201 	orr.w	r2, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8bd 	bl	8002096 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0212 	mvn.w	r2, #18
 8001f24:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f34:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d057      	beq.n	8001fec <HAL_ADC_IRQHandler+0x190>
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d054      	beq.n	8001fec <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d105      	bne.n	8001f5a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d139      	bne.n	8001fdc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d006      	beq.n	8001f84 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d12b      	bne.n	8001fdc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d124      	bne.n	8001fdc <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d11d      	bne.n	8001fdc <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d119      	bne.n	8001fdc <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d105      	bne.n	8001fdc <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 faa7 	bl	8002530 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f06f 020c 	mvn.w	r2, #12
 8001fea:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffa:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d017      	beq.n	8002032 <HAL_ADC_IRQHandler+0x1d6>
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d014      	beq.n	8002032 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10d      	bne.n	8002032 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f841 	bl	80020aa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0201 	mvn.w	r2, #1
 8002030:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f003 0320 	and.w	r3, r3, #32
 8002038:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002040:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d015      	beq.n	8002074 <HAL_ADC_IRQHandler+0x218>
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d012      	beq.n	8002074 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	f043 0202 	orr.w	r2, r3, #2
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f06f 0220 	mvn.w	r2, #32
 8002062:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f82a 	bl	80020be <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f06f 0220 	mvn.w	r2, #32
 8002072:	601a      	str	r2, [r3, #0]
  }
}
 8002074:	bf00      	nop
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x1c>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e113      	b.n	8002318 <HAL_ADC_ConfigChannel+0x244>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b09      	cmp	r3, #9
 80020fe:	d925      	bls.n	800214c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68d9      	ldr	r1, [r3, #12]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	4613      	mov	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	3b1e      	subs	r3, #30
 8002116:	2207      	movs	r2, #7
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43da      	mvns	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	400a      	ands	r2, r1
 8002124:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68d9      	ldr	r1, [r3, #12]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	b29b      	uxth	r3, r3
 8002136:	4618      	mov	r0, r3
 8002138:	4603      	mov	r3, r0
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4403      	add	r3, r0
 800213e:	3b1e      	subs	r3, #30
 8002140:	409a      	lsls	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	e022      	b.n	8002192 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6919      	ldr	r1, [r3, #16]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	4613      	mov	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	2207      	movs	r2, #7
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43da      	mvns	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	400a      	ands	r2, r1
 800216e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6919      	ldr	r1, [r3, #16]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	b29b      	uxth	r3, r3
 8002180:	4618      	mov	r0, r3
 8002182:	4603      	mov	r3, r0
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4403      	add	r3, r0
 8002188:	409a      	lsls	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b06      	cmp	r3, #6
 8002198:	d824      	bhi.n	80021e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	3b05      	subs	r3, #5
 80021ac:	221f      	movs	r2, #31
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	400a      	ands	r2, r1
 80021ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	4618      	mov	r0, r3
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	3b05      	subs	r3, #5
 80021d6:	fa00 f203 	lsl.w	r2, r0, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	635a      	str	r2, [r3, #52]	; 0x34
 80021e2:	e04c      	b.n	800227e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b0c      	cmp	r3, #12
 80021ea:	d824      	bhi.n	8002236 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	3b23      	subs	r3, #35	; 0x23
 80021fe:	221f      	movs	r2, #31
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43da      	mvns	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	400a      	ands	r2, r1
 800220c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	b29b      	uxth	r3, r3
 800221a:	4618      	mov	r0, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	3b23      	subs	r3, #35	; 0x23
 8002228:	fa00 f203 	lsl.w	r2, r0, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
 8002234:	e023      	b.n	800227e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	3b41      	subs	r3, #65	; 0x41
 8002248:	221f      	movs	r2, #31
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	400a      	ands	r2, r1
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	4618      	mov	r0, r3
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	3b41      	subs	r3, #65	; 0x41
 8002272:	fa00 f203 	lsl.w	r2, r0, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800227e:	4b29      	ldr	r3, [pc, #164]	; (8002324 <HAL_ADC_ConfigChannel+0x250>)
 8002280:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a28      	ldr	r2, [pc, #160]	; (8002328 <HAL_ADC_ConfigChannel+0x254>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d10f      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x1d8>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b12      	cmp	r3, #18
 8002292:	d10b      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <HAL_ADC_ConfigChannel+0x254>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d12b      	bne.n	800230e <HAL_ADC_ConfigChannel+0x23a>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a1c      	ldr	r2, [pc, #112]	; (800232c <HAL_ADC_ConfigChannel+0x258>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d003      	beq.n	80022c8 <HAL_ADC_ConfigChannel+0x1f4>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b11      	cmp	r3, #17
 80022c6:	d122      	bne.n	800230e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a11      	ldr	r2, [pc, #68]	; (800232c <HAL_ADC_ConfigChannel+0x258>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d111      	bne.n	800230e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022ea:	4b11      	ldr	r3, [pc, #68]	; (8002330 <HAL_ADC_ConfigChannel+0x25c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a11      	ldr	r2, [pc, #68]	; (8002334 <HAL_ADC_ConfigChannel+0x260>)
 80022f0:	fba2 2303 	umull	r2, r3, r2, r3
 80022f4:	0c9a      	lsrs	r2, r3, #18
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002300:	e002      	b.n	8002308 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	3b01      	subs	r3, #1
 8002306:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f9      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	40012300 	.word	0x40012300
 8002328:	40012000 	.word	0x40012000
 800232c:	10000012 	.word	0x10000012
 8002330:	20000004 	.word	0x20000004
 8002334:	431bde83 	.word	0x431bde83

08002338 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002340:	4b79      	ldr	r3, [pc, #484]	; (8002528 <ADC_Init+0x1f0>)
 8002342:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	431a      	orrs	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800236c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	021a      	lsls	r2, r3, #8
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6859      	ldr	r1, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6899      	ldr	r1, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	4a58      	ldr	r2, [pc, #352]	; (800252c <ADC_Init+0x1f4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d022      	beq.n	8002416 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6899      	ldr	r1, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6899      	ldr	r1, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	e00f      	b.n	8002436 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002434:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0202 	bic.w	r2, r2, #2
 8002444:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6899      	ldr	r1, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7e1b      	ldrb	r3, [r3, #24]
 8002450:	005a      	lsls	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d01b      	beq.n	800249c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002472:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002482:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6859      	ldr	r1, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	3b01      	subs	r3, #1
 8002490:	035a      	lsls	r2, r3, #13
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	e007      	b.n	80024ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	051a      	lsls	r2, r3, #20
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6899      	ldr	r1, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024ee:	025a      	lsls	r2, r3, #9
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002506:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6899      	ldr	r1, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	029a      	lsls	r2, r3, #10
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	609a      	str	r2, [r3, #8]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	40012300 	.word	0x40012300
 800252c:	0f000001 	.word	0x0f000001

08002530 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002560:	4013      	ands	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800256c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002576:	4a04      	ldr	r2, [pc, #16]	; (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	60d3      	str	r3, [r2, #12]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	f003 0307 	and.w	r3, r3, #7
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	db0b      	blt.n	80025d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	4907      	ldr	r1, [pc, #28]	; (80025e0 <__NVIC_EnableIRQ+0x38>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	2001      	movs	r0, #1
 80025ca:	fa00 f202 	lsl.w	r2, r0, r2
 80025ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	db0a      	blt.n	800260e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	490c      	ldr	r1, [pc, #48]	; (8002630 <__NVIC_SetPriority+0x4c>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	440b      	add	r3, r1
 8002608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800260c:	e00a      	b.n	8002624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4908      	ldr	r1, [pc, #32]	; (8002634 <__NVIC_SetPriority+0x50>)
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	3b04      	subs	r3, #4
 800261c:	0112      	lsls	r2, r2, #4
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	440b      	add	r3, r1
 8002622:	761a      	strb	r2, [r3, #24]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000e100 	.word	0xe000e100
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f1c3 0307 	rsb	r3, r3, #7
 8002652:	2b04      	cmp	r3, #4
 8002654:	bf28      	it	cs
 8002656:	2304      	movcs	r3, #4
 8002658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3304      	adds	r3, #4
 800265e:	2b06      	cmp	r3, #6
 8002660:	d902      	bls.n	8002668 <NVIC_EncodePriority+0x30>
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3b03      	subs	r3, #3
 8002666:	e000      	b.n	800266a <NVIC_EncodePriority+0x32>
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	f04f 32ff 	mov.w	r2, #4294967295
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43da      	mvns	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	401a      	ands	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002680:	f04f 31ff 	mov.w	r1, #4294967295
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43d9      	mvns	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	4313      	orrs	r3, r2
         );
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	; 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b0:	d301      	bcc.n	80026b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026b2:	2301      	movs	r3, #1
 80026b4:	e00f      	b.n	80026d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <SysTick_Config+0x40>)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026be:	210f      	movs	r1, #15
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	f7ff ff8e 	bl	80025e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <SysTick_Config+0x40>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ce:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <SysTick_Config+0x40>)
 80026d0:	2207      	movs	r2, #7
 80026d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	e000e010 	.word	0xe000e010

080026e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ff29 	bl	8002544 <__NVIC_SetPriorityGrouping>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b086      	sub	sp, #24
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4603      	mov	r3, r0
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800270c:	f7ff ff3e 	bl	800258c <__NVIC_GetPriorityGrouping>
 8002710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	6978      	ldr	r0, [r7, #20]
 8002718:	f7ff ff8e 	bl	8002638 <NVIC_EncodePriority>
 800271c:	4602      	mov	r2, r0
 800271e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff5d 	bl	80025e4 <__NVIC_SetPriority>
}
 800272a:	bf00      	nop
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff31 	bl	80025a8 <__NVIC_EnableIRQ>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff ffa2 	bl	80026a0 <SysTick_Config>
 800275c:	4603      	mov	r3, r0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002768:	b480      	push	{r7}
 800276a:	b089      	sub	sp, #36	; 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	e159      	b.n	8002a38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002784:	2201      	movs	r2, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	429a      	cmp	r2, r3
 800279e:	f040 8148 	bne.w	8002a32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d005      	beq.n	80027ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d130      	bne.n	800281c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	2203      	movs	r2, #3
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f0:	2201      	movs	r2, #1
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 0201 	and.w	r2, r3, #1
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b03      	cmp	r3, #3
 8002826:	d017      	beq.n	8002858 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d123      	bne.n	80028ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	08da      	lsrs	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3208      	adds	r2, #8
 800286c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002870:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	220f      	movs	r2, #15
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	08da      	lsrs	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3208      	adds	r2, #8
 80028a6:	69b9      	ldr	r1, [r7, #24]
 80028a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	2203      	movs	r2, #3
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0203 	and.w	r2, r3, #3
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80a2 	beq.w	8002a32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	4b57      	ldr	r3, [pc, #348]	; (8002a50 <HAL_GPIO_Init+0x2e8>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	4a56      	ldr	r2, [pc, #344]	; (8002a50 <HAL_GPIO_Init+0x2e8>)
 80028f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028fc:	6453      	str	r3, [r2, #68]	; 0x44
 80028fe:	4b54      	ldr	r3, [pc, #336]	; (8002a50 <HAL_GPIO_Init+0x2e8>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800290a:	4a52      	ldr	r2, [pc, #328]	; (8002a54 <HAL_GPIO_Init+0x2ec>)
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	089b      	lsrs	r3, r3, #2
 8002910:	3302      	adds	r3, #2
 8002912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	220f      	movs	r2, #15
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a49      	ldr	r2, [pc, #292]	; (8002a58 <HAL_GPIO_Init+0x2f0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d019      	beq.n	800296a <HAL_GPIO_Init+0x202>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a48      	ldr	r2, [pc, #288]	; (8002a5c <HAL_GPIO_Init+0x2f4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <HAL_GPIO_Init+0x1fe>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a47      	ldr	r2, [pc, #284]	; (8002a60 <HAL_GPIO_Init+0x2f8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00d      	beq.n	8002962 <HAL_GPIO_Init+0x1fa>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a46      	ldr	r2, [pc, #280]	; (8002a64 <HAL_GPIO_Init+0x2fc>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <HAL_GPIO_Init+0x1f6>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a45      	ldr	r2, [pc, #276]	; (8002a68 <HAL_GPIO_Init+0x300>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d101      	bne.n	800295a <HAL_GPIO_Init+0x1f2>
 8002956:	2304      	movs	r3, #4
 8002958:	e008      	b.n	800296c <HAL_GPIO_Init+0x204>
 800295a:	2307      	movs	r3, #7
 800295c:	e006      	b.n	800296c <HAL_GPIO_Init+0x204>
 800295e:	2303      	movs	r3, #3
 8002960:	e004      	b.n	800296c <HAL_GPIO_Init+0x204>
 8002962:	2302      	movs	r3, #2
 8002964:	e002      	b.n	800296c <HAL_GPIO_Init+0x204>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <HAL_GPIO_Init+0x204>
 800296a:	2300      	movs	r3, #0
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	f002 0203 	and.w	r2, r2, #3
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	4093      	lsls	r3, r2
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800297c:	4935      	ldr	r1, [pc, #212]	; (8002a54 <HAL_GPIO_Init+0x2ec>)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	3302      	adds	r3, #2
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800298a:	4b38      	ldr	r3, [pc, #224]	; (8002a6c <HAL_GPIO_Init+0x304>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ae:	4a2f      	ldr	r2, [pc, #188]	; (8002a6c <HAL_GPIO_Init+0x304>)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b4:	4b2d      	ldr	r3, [pc, #180]	; (8002a6c <HAL_GPIO_Init+0x304>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d8:	4a24      	ldr	r2, [pc, #144]	; (8002a6c <HAL_GPIO_Init+0x304>)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029de:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <HAL_GPIO_Init+0x304>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a02:	4a1a      	ldr	r2, [pc, #104]	; (8002a6c <HAL_GPIO_Init+0x304>)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a08:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <HAL_GPIO_Init+0x304>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a2c:	4a0f      	ldr	r2, [pc, #60]	; (8002a6c <HAL_GPIO_Init+0x304>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3301      	adds	r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2b0f      	cmp	r3, #15
 8002a3c:	f67f aea2 	bls.w	8002784 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	3724      	adds	r7, #36	; 0x24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40013800 	.word	0x40013800
 8002a58:	40020000 	.word	0x40020000
 8002a5c:	40020400 	.word	0x40020400
 8002a60:	40020800 	.word	0x40020800
 8002a64:	40020c00 	.word	0x40020c00
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40013c00 	.word	0x40013c00

08002a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	807b      	strh	r3, [r7, #2]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a80:	787b      	ldrb	r3, [r7, #1]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a8c:	e003      	b.n	8002a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a8e:	887b      	ldrh	r3, [r7, #2]
 8002a90:	041a      	lsls	r2, r3, #16
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	619a      	str	r2, [r3, #24]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b085      	sub	sp, #20
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ab4:	887a      	ldrh	r2, [r7, #2]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	041a      	lsls	r2, r3, #16
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43d9      	mvns	r1, r3
 8002ac0:	887b      	ldrh	r3, [r7, #2]
 8002ac2:	400b      	ands	r3, r1
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	619a      	str	r2, [r3, #24]
}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e267      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d075      	beq.n	8002be2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002af6:	4b88      	ldr	r3, [pc, #544]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d00c      	beq.n	8002b1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b02:	4b85      	ldr	r3, [pc, #532]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d112      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0e:	4b82      	ldr	r3, [pc, #520]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b1a:	d10b      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1c:	4b7e      	ldr	r3, [pc, #504]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d05b      	beq.n	8002be0 <HAL_RCC_OscConfig+0x108>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d157      	bne.n	8002be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e242      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3c:	d106      	bne.n	8002b4c <HAL_RCC_OscConfig+0x74>
 8002b3e:	4b76      	ldr	r3, [pc, #472]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a75      	ldr	r2, [pc, #468]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e01d      	b.n	8002b88 <HAL_RCC_OscConfig+0xb0>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x98>
 8002b56:	4b70      	ldr	r3, [pc, #448]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a6f      	ldr	r2, [pc, #444]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	4b6d      	ldr	r3, [pc, #436]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a6c      	ldr	r2, [pc, #432]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCC_OscConfig+0xb0>
 8002b70:	4b69      	ldr	r3, [pc, #420]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a68      	ldr	r2, [pc, #416]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	4b66      	ldr	r3, [pc, #408]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a65      	ldr	r2, [pc, #404]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d013      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7ff f860 	bl	8001c54 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b98:	f7ff f85c 	bl	8001c54 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	; 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e207      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b5b      	ldr	r3, [pc, #364]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0xc0>
 8002bb6:	e014      	b.n	8002be2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7ff f84c 	bl	8001c54 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7ff f848 	bl	8001c54 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	; 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e1f3      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd2:	4b51      	ldr	r3, [pc, #324]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0xe8>
 8002bde:	e000      	b.n	8002be2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d063      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bee:	4b4a      	ldr	r3, [pc, #296]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00b      	beq.n	8002c12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfa:	4b47      	ldr	r3, [pc, #284]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d11c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c06:	4b44      	ldr	r3, [pc, #272]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d116      	bne.n	8002c40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c12:	4b41      	ldr	r3, [pc, #260]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_RCC_OscConfig+0x152>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d001      	beq.n	8002c2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e1c7      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2a:	4b3b      	ldr	r3, [pc, #236]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4937      	ldr	r1, [pc, #220]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3e:	e03a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d020      	beq.n	8002c8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c48:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <HAL_RCC_OscConfig+0x244>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7ff f801 	bl	8001c54 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c56:	f7fe fffd 	bl	8001c54 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e1a8      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c68:	4b2b      	ldr	r3, [pc, #172]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c74:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4925      	ldr	r1, [pc, #148]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]
 8002c88:	e015      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8a:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_RCC_OscConfig+0x244>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe ffe0 	bl	8001c54 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c98:	f7fe ffdc 	bl	8001c54 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e187      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d036      	beq.n	8002d30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d016      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_RCC_OscConfig+0x248>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7fe ffc0 	bl	8001c54 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd8:	f7fe ffbc 	bl	8001c54 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e167      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cea:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x200>
 8002cf6:	e01b      	b.n	8002d30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <HAL_RCC_OscConfig+0x248>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe ffa9 	bl	8001c54 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d04:	e00e      	b.n	8002d24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d06:	f7fe ffa5 	bl	8001c54 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d907      	bls.n	8002d24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e150      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	42470000 	.word	0x42470000
 8002d20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	4b88      	ldr	r3, [pc, #544]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ea      	bne.n	8002d06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8097 	beq.w	8002e6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d42:	4b81      	ldr	r3, [pc, #516]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10f      	bne.n	8002d6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	4b7d      	ldr	r3, [pc, #500]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	4a7c      	ldr	r2, [pc, #496]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5e:	4b7a      	ldr	r3, [pc, #488]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	4b77      	ldr	r3, [pc, #476]	; (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d118      	bne.n	8002dac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7a:	4b74      	ldr	r3, [pc, #464]	; (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a73      	ldr	r2, [pc, #460]	; (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d86:	f7fe ff65 	bl	8001c54 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8e:	f7fe ff61 	bl	8001c54 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e10c      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	4b6a      	ldr	r3, [pc, #424]	; (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d106      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x2ea>
 8002db4:	4b64      	ldr	r3, [pc, #400]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	4a63      	ldr	r2, [pc, #396]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc0:	e01c      	b.n	8002dfc <HAL_RCC_OscConfig+0x324>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b05      	cmp	r3, #5
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0x30c>
 8002dca:	4b5f      	ldr	r3, [pc, #380]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	4a5e      	ldr	r2, [pc, #376]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	f043 0304 	orr.w	r3, r3, #4
 8002dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd6:	4b5c      	ldr	r3, [pc, #368]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dda:	4a5b      	ldr	r2, [pc, #364]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6713      	str	r3, [r2, #112]	; 0x70
 8002de2:	e00b      	b.n	8002dfc <HAL_RCC_OscConfig+0x324>
 8002de4:	4b58      	ldr	r3, [pc, #352]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	4a57      	ldr	r2, [pc, #348]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	6713      	str	r3, [r2, #112]	; 0x70
 8002df0:	4b55      	ldr	r3, [pc, #340]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	4a54      	ldr	r2, [pc, #336]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002df6:	f023 0304 	bic.w	r3, r3, #4
 8002dfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d015      	beq.n	8002e30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e04:	f7fe ff26 	bl	8001c54 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0a:	e00a      	b.n	8002e22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e0c:	f7fe ff22 	bl	8001c54 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e0cb      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e22:	4b49      	ldr	r3, [pc, #292]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0ee      	beq.n	8002e0c <HAL_RCC_OscConfig+0x334>
 8002e2e:	e014      	b.n	8002e5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e30:	f7fe ff10 	bl	8001c54 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e38:	f7fe ff0c 	bl	8001c54 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e0b5      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4e:	4b3e      	ldr	r3, [pc, #248]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1ee      	bne.n	8002e38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d105      	bne.n	8002e6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e60:	4b39      	ldr	r3, [pc, #228]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	4a38      	ldr	r2, [pc, #224]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80a1 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e76:	4b34      	ldr	r3, [pc, #208]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d05c      	beq.n	8002f3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d141      	bne.n	8002f0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8a:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <HAL_RCC_OscConfig+0x478>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7fe fee0 	bl	8001c54 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fe fedc 	bl	8001c54 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e087      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eaa:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	019b      	lsls	r3, r3, #6
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	085b      	lsrs	r3, r3, #1
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	041b      	lsls	r3, r3, #16
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	061b      	lsls	r3, r3, #24
 8002eda:	491b      	ldr	r1, [pc, #108]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <HAL_RCC_OscConfig+0x478>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fe feb5 	bl	8001c54 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fe feb1 	bl	8001c54 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e05c      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x416>
 8002f0c:	e054      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <HAL_RCC_OscConfig+0x478>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fe9e 	bl	8001c54 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe fe9a 	bl	8001c54 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e045      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x444>
 8002f3a:	e03d      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e038      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f54:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <HAL_RCC_OscConfig+0x4ec>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d028      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d121      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d11a      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f84:	4013      	ands	r3, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d111      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800

08002fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0cc      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b68      	ldr	r3, [pc, #416]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d90c      	bls.n	8003004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b65      	ldr	r3, [pc, #404]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b63      	ldr	r3, [pc, #396]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0b8      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d020      	beq.n	8003052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800301c:	4b59      	ldr	r3, [pc, #356]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4a58      	ldr	r2, [pc, #352]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003026:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003034:	4b53      	ldr	r3, [pc, #332]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4a52      	ldr	r2, [pc, #328]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800303e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003040:	4b50      	ldr	r3, [pc, #320]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	494d      	ldr	r1, [pc, #308]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	4313      	orrs	r3, r2
 8003050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d044      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	4b47      	ldr	r3, [pc, #284]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d119      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e07f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d003      	beq.n	8003086 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003082:	2b03      	cmp	r3, #3
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	4b3f      	ldr	r3, [pc, #252]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e06f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003096:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e067      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a6:	4b37      	ldr	r3, [pc, #220]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f023 0203 	bic.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4934      	ldr	r1, [pc, #208]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b8:	f7fe fdcc 	bl	8001c54 <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c0:	f7fe fdc8 	bl	8001c54 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e04f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	4b2b      	ldr	r3, [pc, #172]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 020c 	and.w	r2, r3, #12
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d1eb      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e8:	4b25      	ldr	r3, [pc, #148]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d20c      	bcs.n	8003110 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b22      	ldr	r3, [pc, #136]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b20      	ldr	r3, [pc, #128]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e032      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800311c:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4916      	ldr	r1, [pc, #88]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800313a:	4b12      	ldr	r3, [pc, #72]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	490e      	ldr	r1, [pc, #56]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800314e:	f000 f821 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8003152:	4602      	mov	r2, r0
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	490a      	ldr	r1, [pc, #40]	; (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8003160:	5ccb      	ldrb	r3, [r1, r3]
 8003162:	fa22 f303 	lsr.w	r3, r2, r3
 8003166:	4a09      	ldr	r2, [pc, #36]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe fd2c 	bl	8001bcc <HAL_InitTick>

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023c00 	.word	0x40023c00
 8003184:	40023800 	.word	0x40023800
 8003188:	08005820 	.word	0x08005820
 800318c:	20000004 	.word	0x20000004
 8003190:	20000008 	.word	0x20000008

08003194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003198:	b090      	sub	sp, #64	; 0x40
 800319a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	637b      	str	r3, [r7, #52]	; 0x34
 80031a0:	2300      	movs	r3, #0
 80031a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a4:	2300      	movs	r3, #0
 80031a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ac:	4b59      	ldr	r3, [pc, #356]	; (8003314 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d00d      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0x40>
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	f200 80a1 	bhi.w	8003300 <HAL_RCC_GetSysClockFreq+0x16c>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0x34>
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d003      	beq.n	80031ce <HAL_RCC_GetSysClockFreq+0x3a>
 80031c6:	e09b      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031c8:	4b53      	ldr	r3, [pc, #332]	; (8003318 <HAL_RCC_GetSysClockFreq+0x184>)
 80031ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80031cc:	e09b      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ce:	4b53      	ldr	r3, [pc, #332]	; (800331c <HAL_RCC_GetSysClockFreq+0x188>)
 80031d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031d2:	e098      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d4:	4b4f      	ldr	r3, [pc, #316]	; (8003314 <HAL_RCC_GetSysClockFreq+0x180>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031de:	4b4d      	ldr	r3, [pc, #308]	; (8003314 <HAL_RCC_GetSysClockFreq+0x180>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d028      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ea:	4b4a      	ldr	r3, [pc, #296]	; (8003314 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	099b      	lsrs	r3, r3, #6
 80031f0:	2200      	movs	r2, #0
 80031f2:	623b      	str	r3, [r7, #32]
 80031f4:	627a      	str	r2, [r7, #36]	; 0x24
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031fc:	2100      	movs	r1, #0
 80031fe:	4b47      	ldr	r3, [pc, #284]	; (800331c <HAL_RCC_GetSysClockFreq+0x188>)
 8003200:	fb03 f201 	mul.w	r2, r3, r1
 8003204:	2300      	movs	r3, #0
 8003206:	fb00 f303 	mul.w	r3, r0, r3
 800320a:	4413      	add	r3, r2
 800320c:	4a43      	ldr	r2, [pc, #268]	; (800331c <HAL_RCC_GetSysClockFreq+0x188>)
 800320e:	fba0 1202 	umull	r1, r2, r0, r2
 8003212:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003214:	460a      	mov	r2, r1
 8003216:	62ba      	str	r2, [r7, #40]	; 0x28
 8003218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800321a:	4413      	add	r3, r2
 800321c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800321e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003220:	2200      	movs	r2, #0
 8003222:	61bb      	str	r3, [r7, #24]
 8003224:	61fa      	str	r2, [r7, #28]
 8003226:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800322a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800322e:	f7fd fcb7 	bl	8000ba0 <__aeabi_uldivmod>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4613      	mov	r3, r2
 8003238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800323a:	e053      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800323c:	4b35      	ldr	r3, [pc, #212]	; (8003314 <HAL_RCC_GetSysClockFreq+0x180>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	099b      	lsrs	r3, r3, #6
 8003242:	2200      	movs	r2, #0
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	617a      	str	r2, [r7, #20]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800324e:	f04f 0b00 	mov.w	fp, #0
 8003252:	4652      	mov	r2, sl
 8003254:	465b      	mov	r3, fp
 8003256:	f04f 0000 	mov.w	r0, #0
 800325a:	f04f 0100 	mov.w	r1, #0
 800325e:	0159      	lsls	r1, r3, #5
 8003260:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003264:	0150      	lsls	r0, r2, #5
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	ebb2 080a 	subs.w	r8, r2, sl
 800326e:	eb63 090b 	sbc.w	r9, r3, fp
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800327e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003282:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003286:	ebb2 0408 	subs.w	r4, r2, r8
 800328a:	eb63 0509 	sbc.w	r5, r3, r9
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	00eb      	lsls	r3, r5, #3
 8003298:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800329c:	00e2      	lsls	r2, r4, #3
 800329e:	4614      	mov	r4, r2
 80032a0:	461d      	mov	r5, r3
 80032a2:	eb14 030a 	adds.w	r3, r4, sl
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	eb45 030b 	adc.w	r3, r5, fp
 80032ac:	607b      	str	r3, [r7, #4]
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032ba:	4629      	mov	r1, r5
 80032bc:	028b      	lsls	r3, r1, #10
 80032be:	4621      	mov	r1, r4
 80032c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032c4:	4621      	mov	r1, r4
 80032c6:	028a      	lsls	r2, r1, #10
 80032c8:	4610      	mov	r0, r2
 80032ca:	4619      	mov	r1, r3
 80032cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ce:	2200      	movs	r2, #0
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	60fa      	str	r2, [r7, #12]
 80032d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032d8:	f7fd fc62 	bl	8000ba0 <__aeabi_uldivmod>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4613      	mov	r3, r2
 80032e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_RCC_GetSysClockFreq+0x180>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	0c1b      	lsrs	r3, r3, #16
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	3301      	adds	r3, #1
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80032f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032fe:	e002      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <HAL_RCC_GetSysClockFreq+0x184>)
 8003302:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003308:	4618      	mov	r0, r3
 800330a:	3740      	adds	r7, #64	; 0x40
 800330c:	46bd      	mov	sp, r7
 800330e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	00f42400 	.word	0x00f42400
 800331c:	017d7840 	.word	0x017d7840

08003320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <HAL_RCC_GetHCLKFreq+0x14>)
 8003326:	681b      	ldr	r3, [r3, #0]
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000004 	.word	0x20000004

08003338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800333c:	f7ff fff0 	bl	8003320 <HAL_RCC_GetHCLKFreq>
 8003340:	4602      	mov	r2, r0
 8003342:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	0a9b      	lsrs	r3, r3, #10
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	4903      	ldr	r1, [pc, #12]	; (800335c <HAL_RCC_GetPCLK1Freq+0x24>)
 800334e:	5ccb      	ldrb	r3, [r1, r3]
 8003350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003354:	4618      	mov	r0, r3
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40023800 	.word	0x40023800
 800335c:	08005830 	.word	0x08005830

08003360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003364:	f7ff ffdc 	bl	8003320 <HAL_RCC_GetHCLKFreq>
 8003368:	4602      	mov	r2, r0
 800336a:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	0b5b      	lsrs	r3, r3, #13
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	4903      	ldr	r1, [pc, #12]	; (8003384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003376:	5ccb      	ldrb	r3, [r1, r3]
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800337c:	4618      	mov	r0, r3
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40023800 	.word	0x40023800
 8003384:	08005830 	.word	0x08005830

08003388 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e07b      	b.n	8003492 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d108      	bne.n	80033b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033aa:	d009      	beq.n	80033c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	61da      	str	r2, [r3, #28]
 80033b2:	e005      	b.n	80033c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fe fa84 	bl	80018e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003444:	ea42 0103 	orr.w	r1, r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	0c1b      	lsrs	r3, r3, #16
 800345e:	f003 0104 	and.w	r1, r3, #4
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	f003 0210 	and.w	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003480:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e041      	b.n	8003530 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d106      	bne.n	80034c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7fe fa79 	bl	80019b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2202      	movs	r2, #2
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3304      	adds	r3, #4
 80034d6:	4619      	mov	r1, r3
 80034d8:	4610      	mov	r0, r2
 80034da:	f000 fa87 	bl	80039ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	d001      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e044      	b.n	80035da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1e      	ldr	r2, [pc, #120]	; (80035e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d018      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357a:	d013      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x6c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1a      	ldr	r2, [pc, #104]	; (80035ec <HAL_TIM_Base_Start_IT+0xb4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00e      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d009      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a17      	ldr	r2, [pc, #92]	; (80035f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d004      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x6c>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a16      	ldr	r2, [pc, #88]	; (80035f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d111      	bne.n	80035c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d010      	beq.n	80035d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c6:	e007      	b.n	80035d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40010000 	.word	0x40010000
 80035ec:	40000400 	.word	0x40000400
 80035f0:	40000800 	.word	0x40000800
 80035f4:	40000c00 	.word	0x40000c00
 80035f8:	40014000 	.word	0x40014000

080035fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b02      	cmp	r3, #2
 8003610:	d122      	bne.n	8003658 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b02      	cmp	r3, #2
 800361e:	d11b      	bne.n	8003658 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0202 	mvn.w	r2, #2
 8003628:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f9b5 	bl	80039ae <HAL_TIM_IC_CaptureCallback>
 8003644:	e005      	b.n	8003652 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f9a7 	bl	800399a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f9b8 	bl	80039c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b04      	cmp	r3, #4
 8003664:	d122      	bne.n	80036ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b04      	cmp	r3, #4
 8003672:	d11b      	bne.n	80036ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0204 	mvn.w	r2, #4
 800367c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2202      	movs	r2, #2
 8003682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f98b 	bl	80039ae <HAL_TIM_IC_CaptureCallback>
 8003698:	e005      	b.n	80036a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f97d 	bl	800399a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f98e 	bl	80039c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d122      	bne.n	8003700 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d11b      	bne.n	8003700 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0208 	mvn.w	r2, #8
 80036d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2204      	movs	r2, #4
 80036d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f961 	bl	80039ae <HAL_TIM_IC_CaptureCallback>
 80036ec:	e005      	b.n	80036fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f953 	bl	800399a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f964 	bl	80039c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f003 0310 	and.w	r3, r3, #16
 800370a:	2b10      	cmp	r3, #16
 800370c:	d122      	bne.n	8003754 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b10      	cmp	r3, #16
 800371a:	d11b      	bne.n	8003754 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0210 	mvn.w	r2, #16
 8003724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2208      	movs	r2, #8
 800372a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f937 	bl	80039ae <HAL_TIM_IC_CaptureCallback>
 8003740:	e005      	b.n	800374e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f929 	bl	800399a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f93a 	bl	80039c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b01      	cmp	r3, #1
 8003760:	d10e      	bne.n	8003780 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b01      	cmp	r3, #1
 800376e:	d107      	bne.n	8003780 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0201 	mvn.w	r2, #1
 8003778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fd fffc 	bl	8001778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378a:	2b80      	cmp	r3, #128	; 0x80
 800378c:	d10e      	bne.n	80037ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003798:	2b80      	cmp	r3, #128	; 0x80
 800379a:	d107      	bne.n	80037ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fab2 	bl	8003d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b6:	2b40      	cmp	r3, #64	; 0x40
 80037b8:	d10e      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c4:	2b40      	cmp	r3, #64	; 0x40
 80037c6:	d107      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f8ff 	bl	80039d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b20      	cmp	r3, #32
 80037e4:	d10e      	bne.n	8003804 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d107      	bne.n	8003804 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0220 	mvn.w	r2, #32
 80037fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fa7c 	bl	8003cfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_TIM_ConfigClockSource+0x1c>
 8003824:	2302      	movs	r3, #2
 8003826:	e0b4      	b.n	8003992 <HAL_TIM_ConfigClockSource+0x186>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800384e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003860:	d03e      	beq.n	80038e0 <HAL_TIM_ConfigClockSource+0xd4>
 8003862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003866:	f200 8087 	bhi.w	8003978 <HAL_TIM_ConfigClockSource+0x16c>
 800386a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386e:	f000 8086 	beq.w	800397e <HAL_TIM_ConfigClockSource+0x172>
 8003872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003876:	d87f      	bhi.n	8003978 <HAL_TIM_ConfigClockSource+0x16c>
 8003878:	2b70      	cmp	r3, #112	; 0x70
 800387a:	d01a      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0xa6>
 800387c:	2b70      	cmp	r3, #112	; 0x70
 800387e:	d87b      	bhi.n	8003978 <HAL_TIM_ConfigClockSource+0x16c>
 8003880:	2b60      	cmp	r3, #96	; 0x60
 8003882:	d050      	beq.n	8003926 <HAL_TIM_ConfigClockSource+0x11a>
 8003884:	2b60      	cmp	r3, #96	; 0x60
 8003886:	d877      	bhi.n	8003978 <HAL_TIM_ConfigClockSource+0x16c>
 8003888:	2b50      	cmp	r3, #80	; 0x50
 800388a:	d03c      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0xfa>
 800388c:	2b50      	cmp	r3, #80	; 0x50
 800388e:	d873      	bhi.n	8003978 <HAL_TIM_ConfigClockSource+0x16c>
 8003890:	2b40      	cmp	r3, #64	; 0x40
 8003892:	d058      	beq.n	8003946 <HAL_TIM_ConfigClockSource+0x13a>
 8003894:	2b40      	cmp	r3, #64	; 0x40
 8003896:	d86f      	bhi.n	8003978 <HAL_TIM_ConfigClockSource+0x16c>
 8003898:	2b30      	cmp	r3, #48	; 0x30
 800389a:	d064      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0x15a>
 800389c:	2b30      	cmp	r3, #48	; 0x30
 800389e:	d86b      	bhi.n	8003978 <HAL_TIM_ConfigClockSource+0x16c>
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d060      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0x15a>
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d867      	bhi.n	8003978 <HAL_TIM_ConfigClockSource+0x16c>
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d05c      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0x15a>
 80038ac:	2b10      	cmp	r3, #16
 80038ae:	d05a      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0x15a>
 80038b0:	e062      	b.n	8003978 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	6899      	ldr	r1, [r3, #8]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f000 f98d 	bl	8003be0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	609a      	str	r2, [r3, #8]
      break;
 80038de:	e04f      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	6899      	ldr	r1, [r3, #8]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f000 f976 	bl	8003be0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003902:	609a      	str	r2, [r3, #8]
      break;
 8003904:	e03c      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	6859      	ldr	r1, [r3, #4]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	461a      	mov	r2, r3
 8003914:	f000 f8ea 	bl	8003aec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2150      	movs	r1, #80	; 0x50
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f943 	bl	8003baa <TIM_ITRx_SetConfig>
      break;
 8003924:	e02c      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	6859      	ldr	r1, [r3, #4]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	461a      	mov	r2, r3
 8003934:	f000 f909 	bl	8003b4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2160      	movs	r1, #96	; 0x60
 800393e:	4618      	mov	r0, r3
 8003940:	f000 f933 	bl	8003baa <TIM_ITRx_SetConfig>
      break;
 8003944:	e01c      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6859      	ldr	r1, [r3, #4]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	461a      	mov	r2, r3
 8003954:	f000 f8ca 	bl	8003aec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2140      	movs	r1, #64	; 0x40
 800395e:	4618      	mov	r0, r3
 8003960:	f000 f923 	bl	8003baa <TIM_ITRx_SetConfig>
      break;
 8003964:	e00c      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4619      	mov	r1, r3
 8003970:	4610      	mov	r0, r2
 8003972:	f000 f91a 	bl	8003baa <TIM_ITRx_SetConfig>
      break;
 8003976:	e003      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
      break;
 800397c:	e000      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800397e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003990:	7bfb      	ldrb	r3, [r7, #15]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a34      	ldr	r2, [pc, #208]	; (8003ad0 <TIM_Base_SetConfig+0xe4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00f      	beq.n	8003a24 <TIM_Base_SetConfig+0x38>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a0a:	d00b      	beq.n	8003a24 <TIM_Base_SetConfig+0x38>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a31      	ldr	r2, [pc, #196]	; (8003ad4 <TIM_Base_SetConfig+0xe8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d007      	beq.n	8003a24 <TIM_Base_SetConfig+0x38>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a30      	ldr	r2, [pc, #192]	; (8003ad8 <TIM_Base_SetConfig+0xec>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <TIM_Base_SetConfig+0x38>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a2f      	ldr	r2, [pc, #188]	; (8003adc <TIM_Base_SetConfig+0xf0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d108      	bne.n	8003a36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a25      	ldr	r2, [pc, #148]	; (8003ad0 <TIM_Base_SetConfig+0xe4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01b      	beq.n	8003a76 <TIM_Base_SetConfig+0x8a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a44:	d017      	beq.n	8003a76 <TIM_Base_SetConfig+0x8a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <TIM_Base_SetConfig+0xe8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <TIM_Base_SetConfig+0x8a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <TIM_Base_SetConfig+0xec>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00f      	beq.n	8003a76 <TIM_Base_SetConfig+0x8a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a20      	ldr	r2, [pc, #128]	; (8003adc <TIM_Base_SetConfig+0xf0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00b      	beq.n	8003a76 <TIM_Base_SetConfig+0x8a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a1f      	ldr	r2, [pc, #124]	; (8003ae0 <TIM_Base_SetConfig+0xf4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d007      	beq.n	8003a76 <TIM_Base_SetConfig+0x8a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a1e      	ldr	r2, [pc, #120]	; (8003ae4 <TIM_Base_SetConfig+0xf8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d003      	beq.n	8003a76 <TIM_Base_SetConfig+0x8a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a1d      	ldr	r2, [pc, #116]	; (8003ae8 <TIM_Base_SetConfig+0xfc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d108      	bne.n	8003a88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a08      	ldr	r2, [pc, #32]	; (8003ad0 <TIM_Base_SetConfig+0xe4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d103      	bne.n	8003abc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	615a      	str	r2, [r3, #20]
}
 8003ac2:	bf00      	nop
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40010000 	.word	0x40010000
 8003ad4:	40000400 	.word	0x40000400
 8003ad8:	40000800 	.word	0x40000800
 8003adc:	40000c00 	.word	0x40000c00
 8003ae0:	40014000 	.word	0x40014000
 8003ae4:	40014400 	.word	0x40014400
 8003ae8:	40014800 	.word	0x40014800

08003aec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	f023 0201 	bic.w	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f023 030a 	bic.w	r3, r3, #10
 8003b28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	621a      	str	r2, [r3, #32]
}
 8003b3e:	bf00      	nop
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b087      	sub	sp, #28
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	f023 0210 	bic.w	r2, r3, #16
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	031b      	lsls	r3, r3, #12
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	621a      	str	r2, [r3, #32]
}
 8003b9e:	bf00      	nop
 8003ba0:	371c      	adds	r7, #28
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b085      	sub	sp, #20
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f043 0307 	orr.w	r3, r3, #7
 8003bcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	609a      	str	r2, [r3, #8]
}
 8003bd4:	bf00      	nop
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	021a      	lsls	r2, r3, #8
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	609a      	str	r2, [r3, #8]
}
 8003c14:	bf00      	nop
 8003c16:	371c      	adds	r7, #28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e050      	b.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d018      	beq.n	8003cae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c84:	d013      	beq.n	8003cae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a18      	ldr	r2, [pc, #96]	; (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00e      	beq.n	8003cae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a16      	ldr	r2, [pc, #88]	; (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d009      	beq.n	8003cae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a15      	ldr	r2, [pc, #84]	; (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d004      	beq.n	8003cae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a13      	ldr	r2, [pc, #76]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d10c      	bne.n	8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40010000 	.word	0x40010000
 8003cec:	40000400 	.word	0x40000400
 8003cf0:	40000800 	.word	0x40000800
 8003cf4:	40000c00 	.word	0x40000c00
 8003cf8:	40014000 	.word	0x40014000

08003cfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e033      	b.n	8003d9e <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fd fe5a 	bl	8001a04 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f90b 	bl	8003f74 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d7c:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d8c:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b08a      	sub	sp, #40	; 0x28
 8003daa:	af02      	add	r7, sp, #8
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	603b      	str	r3, [r7, #0]
 8003db2:	4613      	mov	r3, r2
 8003db4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d17c      	bne.n	8003ebc <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_USART_Transmit+0x28>
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e075      	b.n	8003ebe <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_USART_Transmit+0x3a>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e06e      	b.n	8003ebe <HAL_USART_Transmit+0x118>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2212      	movs	r2, #18
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003df6:	f7fd ff2d 	bl	8001c54 <HAL_GetTick>
 8003dfa:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	88fa      	ldrh	r2, [r7, #6]
 8003e00:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	88fa      	ldrh	r2, [r7, #6]
 8003e06:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e10:	d108      	bne.n	8003e24 <HAL_USART_Transmit+0x7e>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d104      	bne.n	8003e24 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	e003      	b.n	8003e2c <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8003e2c:	e02a      	b.n	8003e84 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2200      	movs	r2, #0
 8003e36:	2180      	movs	r1, #128	; 0x80
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f844 	bl	8003ec6 <USART_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e03a      	b.n	8003ebe <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10b      	bne.n	8003e66 <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e5c:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	3302      	adds	r3, #2
 8003e62:	61bb      	str	r3, [r7, #24]
 8003e64:	e007      	b.n	8003e76 <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	3301      	adds	r3, #1
 8003e74:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1cf      	bne.n	8003e2e <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2200      	movs	r2, #0
 8003e96:	2140      	movs	r1, #64	; 0x40
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f814 	bl	8003ec6 <USART_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e00a      	b.n	8003ebe <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e000      	b.n	8003ebe <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8003ebc:	2302      	movs	r3, #2
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3720      	adds	r7, #32
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003ed6:	e038      	b.n	8003f4a <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d034      	beq.n	8003f4a <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <USART_WaitOnFlagUntilTimeout+0x30>
 8003ee6:	f7fd feb5 	bl	8001c54 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d229      	bcs.n	8003f4a <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f04:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0220 	bic.w	r2, r2, #32
 8003f14:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f24:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0201 	bic.w	r2, r2, #1
 8003f34:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e00f      	b.n	8003f6a <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4013      	ands	r3, r2
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	bf0c      	ite	eq
 8003f5a:	2301      	moveq	r3, #1
 8003f5c:	2300      	movne	r3, #0
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d0b7      	beq.n	8003ed8 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f78:	b0c6      	sub	sp, #280	; 0x118
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68d9      	ldr	r1, [r3, #12]
 8003f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	f021 030c 	bic.w	r3, r1, #12
 8003f98:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8003f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003faa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003fae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fb6:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fbc:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003fbe:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fcc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8003fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe8:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8003fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ffa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ffe:	f023 030c 	bic.w	r3, r3, #12
 8004002:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	431a      	orrs	r2, r3
 8004014:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	431a      	orrs	r2, r3
 800401c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004020:	4313      	orrs	r3, r2
 8004022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004026:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 800402a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004034:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8004036:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6959      	ldr	r1, [r3, #20]
 800403e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8004048:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 800404a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4b8b      	ldr	r3, [pc, #556]	; (8004280 <USART_SetConfig+0x30c>)
 8004052:	429a      	cmp	r2, r3
 8004054:	d006      	beq.n	8004064 <USART_SetConfig+0xf0>
 8004056:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4b89      	ldr	r3, [pc, #548]	; (8004284 <USART_SetConfig+0x310>)
 800405e:	429a      	cmp	r2, r3
 8004060:	f040 8114 	bne.w	800428c <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004064:	f7ff f97c 	bl	8003360 <HAL_RCC_GetPCLK2Freq>
 8004068:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800406c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004070:	2200      	movs	r2, #0
 8004072:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004076:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800407a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800407e:	4622      	mov	r2, r4
 8004080:	462b      	mov	r3, r5
 8004082:	1891      	adds	r1, r2, r2
 8004084:	6739      	str	r1, [r7, #112]	; 0x70
 8004086:	415b      	adcs	r3, r3
 8004088:	677b      	str	r3, [r7, #116]	; 0x74
 800408a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800408e:	4621      	mov	r1, r4
 8004090:	eb12 0801 	adds.w	r8, r2, r1
 8004094:	4629      	mov	r1, r5
 8004096:	eb43 0901 	adc.w	r9, r3, r1
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ae:	4690      	mov	r8, r2
 80040b0:	4699      	mov	r9, r3
 80040b2:	4623      	mov	r3, r4
 80040b4:	eb18 0303 	adds.w	r3, r8, r3
 80040b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80040bc:	462b      	mov	r3, r5
 80040be:	eb49 0303 	adc.w	r3, r9, r3
 80040c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80040c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040d2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80040d6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80040da:	460b      	mov	r3, r1
 80040dc:	18db      	adds	r3, r3, r3
 80040de:	66bb      	str	r3, [r7, #104]	; 0x68
 80040e0:	4613      	mov	r3, r2
 80040e2:	eb42 0303 	adc.w	r3, r2, r3
 80040e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040e8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80040ec:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80040f0:	f7fc fd56 	bl	8000ba0 <__aeabi_uldivmod>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4b63      	ldr	r3, [pc, #396]	; (8004288 <USART_SetConfig+0x314>)
 80040fa:	fba3 2302 	umull	r2, r3, r3, r2
 80040fe:	095b      	lsrs	r3, r3, #5
 8004100:	011c      	lsls	r4, r3, #4
 8004102:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004106:	2200      	movs	r2, #0
 8004108:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800410c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004110:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004114:	4642      	mov	r2, r8
 8004116:	464b      	mov	r3, r9
 8004118:	1891      	adds	r1, r2, r2
 800411a:	6639      	str	r1, [r7, #96]	; 0x60
 800411c:	415b      	adcs	r3, r3
 800411e:	667b      	str	r3, [r7, #100]	; 0x64
 8004120:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004124:	4641      	mov	r1, r8
 8004126:	1851      	adds	r1, r2, r1
 8004128:	65b9      	str	r1, [r7, #88]	; 0x58
 800412a:	4649      	mov	r1, r9
 800412c:	414b      	adcs	r3, r1
 800412e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 800413c:	4659      	mov	r1, fp
 800413e:	00cb      	lsls	r3, r1, #3
 8004140:	4651      	mov	r1, sl
 8004142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004146:	4651      	mov	r1, sl
 8004148:	00ca      	lsls	r2, r1, #3
 800414a:	4610      	mov	r0, r2
 800414c:	4619      	mov	r1, r3
 800414e:	4603      	mov	r3, r0
 8004150:	4642      	mov	r2, r8
 8004152:	189b      	adds	r3, r3, r2
 8004154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004158:	464b      	mov	r3, r9
 800415a:	460a      	mov	r2, r1
 800415c:	eb42 0303 	adc.w	r3, r2, r3
 8004160:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004170:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004174:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004178:	460b      	mov	r3, r1
 800417a:	18db      	adds	r3, r3, r3
 800417c:	653b      	str	r3, [r7, #80]	; 0x50
 800417e:	4613      	mov	r3, r2
 8004180:	eb42 0303 	adc.w	r3, r2, r3
 8004184:	657b      	str	r3, [r7, #84]	; 0x54
 8004186:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800418a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800418e:	f7fc fd07 	bl	8000ba0 <__aeabi_uldivmod>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4611      	mov	r1, r2
 8004198:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <USART_SetConfig+0x314>)
 800419a:	fba3 2301 	umull	r2, r3, r3, r1
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	2264      	movs	r2, #100	; 0x64
 80041a2:	fb02 f303 	mul.w	r3, r2, r3
 80041a6:	1acb      	subs	r3, r1, r3
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041ae:	4b36      	ldr	r3, [pc, #216]	; (8004288 <USART_SetConfig+0x314>)
 80041b0:	fba3 2302 	umull	r2, r3, r3, r2
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041bc:	441c      	add	r4, r3
 80041be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041d0:	4642      	mov	r2, r8
 80041d2:	464b      	mov	r3, r9
 80041d4:	1891      	adds	r1, r2, r2
 80041d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80041d8:	415b      	adcs	r3, r3
 80041da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041e0:	4641      	mov	r1, r8
 80041e2:	1851      	adds	r1, r2, r1
 80041e4:	6439      	str	r1, [r7, #64]	; 0x40
 80041e6:	4649      	mov	r1, r9
 80041e8:	414b      	adcs	r3, r1
 80041ea:	647b      	str	r3, [r7, #68]	; 0x44
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 80041f8:	4659      	mov	r1, fp
 80041fa:	00cb      	lsls	r3, r1, #3
 80041fc:	4651      	mov	r1, sl
 80041fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004202:	4651      	mov	r1, sl
 8004204:	00ca      	lsls	r2, r1, #3
 8004206:	4610      	mov	r0, r2
 8004208:	4619      	mov	r1, r3
 800420a:	4603      	mov	r3, r0
 800420c:	4642      	mov	r2, r8
 800420e:	189b      	adds	r3, r3, r2
 8004210:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004214:	464b      	mov	r3, r9
 8004216:	460a      	mov	r2, r1
 8004218:	eb42 0303 	adc.w	r3, r2, r3
 800421c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800422c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004230:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004234:	460b      	mov	r3, r1
 8004236:	18db      	adds	r3, r3, r3
 8004238:	63bb      	str	r3, [r7, #56]	; 0x38
 800423a:	4613      	mov	r3, r2
 800423c:	eb42 0303 	adc.w	r3, r2, r3
 8004240:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004242:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004246:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800424a:	f7fc fca9 	bl	8000ba0 <__aeabi_uldivmod>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <USART_SetConfig+0x314>)
 8004254:	fba3 1302 	umull	r1, r3, r3, r2
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	2164      	movs	r1, #100	; 0x64
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	3332      	adds	r3, #50	; 0x32
 8004266:	4a08      	ldr	r2, [pc, #32]	; (8004288 <USART_SetConfig+0x314>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	095b      	lsrs	r3, r3, #5
 800426e:	f003 0207 	and.w	r2, r3, #7
 8004272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4422      	add	r2, r4
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	e109      	b.n	8004492 <USART_SetConfig+0x51e>
 800427e:	bf00      	nop
 8004280:	40011000 	.word	0x40011000
 8004284:	40011400 	.word	0x40011400
 8004288:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800428c:	f7ff f854 	bl	8003338 <HAL_RCC_GetPCLK1Freq>
 8004290:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004294:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004298:	2200      	movs	r2, #0
 800429a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800429e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042a2:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042a6:	4642      	mov	r2, r8
 80042a8:	464b      	mov	r3, r9
 80042aa:	1891      	adds	r1, r2, r2
 80042ac:	6339      	str	r1, [r7, #48]	; 0x30
 80042ae:	415b      	adcs	r3, r3
 80042b0:	637b      	str	r3, [r7, #52]	; 0x34
 80042b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80042b6:	4641      	mov	r1, r8
 80042b8:	1854      	adds	r4, r2, r1
 80042ba:	4649      	mov	r1, r9
 80042bc:	eb43 0501 	adc.w	r5, r3, r1
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	00eb      	lsls	r3, r5, #3
 80042ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ce:	00e2      	lsls	r2, r4, #3
 80042d0:	4614      	mov	r4, r2
 80042d2:	461d      	mov	r5, r3
 80042d4:	4643      	mov	r3, r8
 80042d6:	18e3      	adds	r3, r4, r3
 80042d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042dc:	464b      	mov	r3, r9
 80042de:	eb45 0303 	adc.w	r3, r5, r3
 80042e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042f2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042f6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042fa:	460b      	mov	r3, r1
 80042fc:	18db      	adds	r3, r3, r3
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004300:	4613      	mov	r3, r2
 8004302:	eb42 0303 	adc.w	r3, r2, r3
 8004306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004308:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800430c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004310:	f7fc fc46 	bl	8000ba0 <__aeabi_uldivmod>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4b61      	ldr	r3, [pc, #388]	; (80044a0 <USART_SetConfig+0x52c>)
 800431a:	fba3 2302 	umull	r2, r3, r3, r2
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	011c      	lsls	r4, r3, #4
 8004322:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004326:	2200      	movs	r2, #0
 8004328:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800432c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004330:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004334:	4642      	mov	r2, r8
 8004336:	464b      	mov	r3, r9
 8004338:	1891      	adds	r1, r2, r2
 800433a:	6239      	str	r1, [r7, #32]
 800433c:	415b      	adcs	r3, r3
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
 8004340:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004344:	4641      	mov	r1, r8
 8004346:	eb12 0a01 	adds.w	sl, r2, r1
 800434a:	4649      	mov	r1, r9
 800434c:	eb43 0b01 	adc.w	fp, r3, r1
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800435c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004360:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004364:	4692      	mov	sl, r2
 8004366:	469b      	mov	fp, r3
 8004368:	4643      	mov	r3, r8
 800436a:	eb1a 0303 	adds.w	r3, sl, r3
 800436e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004372:	464b      	mov	r3, r9
 8004374:	eb4b 0303 	adc.w	r3, fp, r3
 8004378:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800437c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004388:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800438c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004390:	460b      	mov	r3, r1
 8004392:	18db      	adds	r3, r3, r3
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	4613      	mov	r3, r2
 8004398:	eb42 0303 	adc.w	r3, r2, r3
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043a6:	f7fc fbfb 	bl	8000ba0 <__aeabi_uldivmod>
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	4611      	mov	r1, r2
 80043b0:	4b3b      	ldr	r3, [pc, #236]	; (80044a0 <USART_SetConfig+0x52c>)
 80043b2:	fba3 2301 	umull	r2, r3, r3, r1
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	2264      	movs	r2, #100	; 0x64
 80043ba:	fb02 f303 	mul.w	r3, r2, r3
 80043be:	1acb      	subs	r3, r1, r3
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043c6:	4b36      	ldr	r3, [pc, #216]	; (80044a0 <USART_SetConfig+0x52c>)
 80043c8:	fba3 2302 	umull	r2, r3, r3, r2
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043d4:	441c      	add	r4, r3
 80043d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80043e8:	4642      	mov	r2, r8
 80043ea:	464b      	mov	r3, r9
 80043ec:	1891      	adds	r1, r2, r2
 80043ee:	6139      	str	r1, [r7, #16]
 80043f0:	415b      	adcs	r3, r3
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80043f8:	4641      	mov	r1, r8
 80043fa:	1851      	adds	r1, r2, r1
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	4649      	mov	r1, r9
 8004400:	414b      	adcs	r3, r1
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004410:	4659      	mov	r1, fp
 8004412:	00cb      	lsls	r3, r1, #3
 8004414:	4651      	mov	r1, sl
 8004416:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800441a:	4651      	mov	r1, sl
 800441c:	00ca      	lsls	r2, r1, #3
 800441e:	4610      	mov	r0, r2
 8004420:	4619      	mov	r1, r3
 8004422:	4603      	mov	r3, r0
 8004424:	4642      	mov	r2, r8
 8004426:	189b      	adds	r3, r3, r2
 8004428:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800442c:	464b      	mov	r3, r9
 800442e:	460a      	mov	r2, r1
 8004430:	eb42 0303 	adc.w	r3, r2, r3
 8004434:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004438:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	67bb      	str	r3, [r7, #120]	; 0x78
 8004442:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004444:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004448:	460b      	mov	r3, r1
 800444a:	18db      	adds	r3, r3, r3
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	4613      	mov	r3, r2
 8004450:	eb42 0303 	adc.w	r3, r2, r3
 8004454:	607b      	str	r3, [r7, #4]
 8004456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800445a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800445e:	f7fc fb9f 	bl	8000ba0 <__aeabi_uldivmod>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	4b0e      	ldr	r3, [pc, #56]	; (80044a0 <USART_SetConfig+0x52c>)
 8004468:	fba3 1302 	umull	r1, r3, r3, r2
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	2164      	movs	r1, #100	; 0x64
 8004470:	fb01 f303 	mul.w	r3, r1, r3
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	3332      	adds	r3, #50	; 0x32
 800447a:	4a09      	ldr	r2, [pc, #36]	; (80044a0 <USART_SetConfig+0x52c>)
 800447c:	fba2 2303 	umull	r2, r3, r2, r3
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	f003 0207 	and.w	r2, r3, #7
 8004486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4422      	add	r2, r4
 800448e:	609a      	str	r2, [r3, #8]
  }
}
 8004490:	bf00      	nop
 8004492:	bf00      	nop
 8004494:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004498:	46bd      	mov	sp, r7
 800449a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800449e:	bf00      	nop
 80044a0:	51eb851f 	.word	0x51eb851f

080044a4 <__errno>:
 80044a4:	4b01      	ldr	r3, [pc, #4]	; (80044ac <__errno+0x8>)
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000010 	.word	0x20000010

080044b0 <__libc_init_array>:
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	4d0d      	ldr	r5, [pc, #52]	; (80044e8 <__libc_init_array+0x38>)
 80044b4:	4c0d      	ldr	r4, [pc, #52]	; (80044ec <__libc_init_array+0x3c>)
 80044b6:	1b64      	subs	r4, r4, r5
 80044b8:	10a4      	asrs	r4, r4, #2
 80044ba:	2600      	movs	r6, #0
 80044bc:	42a6      	cmp	r6, r4
 80044be:	d109      	bne.n	80044d4 <__libc_init_array+0x24>
 80044c0:	4d0b      	ldr	r5, [pc, #44]	; (80044f0 <__libc_init_array+0x40>)
 80044c2:	4c0c      	ldr	r4, [pc, #48]	; (80044f4 <__libc_init_array+0x44>)
 80044c4:	f001 f99e 	bl	8005804 <_init>
 80044c8:	1b64      	subs	r4, r4, r5
 80044ca:	10a4      	asrs	r4, r4, #2
 80044cc:	2600      	movs	r6, #0
 80044ce:	42a6      	cmp	r6, r4
 80044d0:	d105      	bne.n	80044de <__libc_init_array+0x2e>
 80044d2:	bd70      	pop	{r4, r5, r6, pc}
 80044d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d8:	4798      	blx	r3
 80044da:	3601      	adds	r6, #1
 80044dc:	e7ee      	b.n	80044bc <__libc_init_array+0xc>
 80044de:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e2:	4798      	blx	r3
 80044e4:	3601      	adds	r6, #1
 80044e6:	e7f2      	b.n	80044ce <__libc_init_array+0x1e>
 80044e8:	08005a18 	.word	0x08005a18
 80044ec:	08005a18 	.word	0x08005a18
 80044f0:	08005a18 	.word	0x08005a18
 80044f4:	08005a1c 	.word	0x08005a1c

080044f8 <memset>:
 80044f8:	4402      	add	r2, r0
 80044fa:	4603      	mov	r3, r0
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d100      	bne.n	8004502 <memset+0xa>
 8004500:	4770      	bx	lr
 8004502:	f803 1b01 	strb.w	r1, [r3], #1
 8004506:	e7f9      	b.n	80044fc <memset+0x4>

08004508 <cos>:
 8004508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800450a:	ec53 2b10 	vmov	r2, r3, d0
 800450e:	4826      	ldr	r0, [pc, #152]	; (80045a8 <cos+0xa0>)
 8004510:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004514:	4281      	cmp	r1, r0
 8004516:	dc06      	bgt.n	8004526 <cos+0x1e>
 8004518:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80045a0 <cos+0x98>
 800451c:	b005      	add	sp, #20
 800451e:	f85d eb04 	ldr.w	lr, [sp], #4
 8004522:	f000 bb89 	b.w	8004c38 <__kernel_cos>
 8004526:	4821      	ldr	r0, [pc, #132]	; (80045ac <cos+0xa4>)
 8004528:	4281      	cmp	r1, r0
 800452a:	dd09      	ble.n	8004540 <cos+0x38>
 800452c:	ee10 0a10 	vmov	r0, s0
 8004530:	4619      	mov	r1, r3
 8004532:	f7fb fe55 	bl	80001e0 <__aeabi_dsub>
 8004536:	ec41 0b10 	vmov	d0, r0, r1
 800453a:	b005      	add	sp, #20
 800453c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004540:	4668      	mov	r0, sp
 8004542:	f000 f8b9 	bl	80046b8 <__ieee754_rem_pio2>
 8004546:	f000 0003 	and.w	r0, r0, #3
 800454a:	2801      	cmp	r0, #1
 800454c:	d00b      	beq.n	8004566 <cos+0x5e>
 800454e:	2802      	cmp	r0, #2
 8004550:	d016      	beq.n	8004580 <cos+0x78>
 8004552:	b9e0      	cbnz	r0, 800458e <cos+0x86>
 8004554:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004558:	ed9d 0b00 	vldr	d0, [sp]
 800455c:	f000 fb6c 	bl	8004c38 <__kernel_cos>
 8004560:	ec51 0b10 	vmov	r0, r1, d0
 8004564:	e7e7      	b.n	8004536 <cos+0x2e>
 8004566:	ed9d 1b02 	vldr	d1, [sp, #8]
 800456a:	ed9d 0b00 	vldr	d0, [sp]
 800456e:	f000 ff7b 	bl	8005468 <__kernel_sin>
 8004572:	ec53 2b10 	vmov	r2, r3, d0
 8004576:	ee10 0a10 	vmov	r0, s0
 800457a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800457e:	e7da      	b.n	8004536 <cos+0x2e>
 8004580:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004584:	ed9d 0b00 	vldr	d0, [sp]
 8004588:	f000 fb56 	bl	8004c38 <__kernel_cos>
 800458c:	e7f1      	b.n	8004572 <cos+0x6a>
 800458e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004592:	ed9d 0b00 	vldr	d0, [sp]
 8004596:	2001      	movs	r0, #1
 8004598:	f000 ff66 	bl	8005468 <__kernel_sin>
 800459c:	e7e0      	b.n	8004560 <cos+0x58>
 800459e:	bf00      	nop
	...
 80045a8:	3fe921fb 	.word	0x3fe921fb
 80045ac:	7fefffff 	.word	0x7fefffff

080045b0 <sin>:
 80045b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80045b2:	ec53 2b10 	vmov	r2, r3, d0
 80045b6:	4828      	ldr	r0, [pc, #160]	; (8004658 <sin+0xa8>)
 80045b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80045bc:	4281      	cmp	r1, r0
 80045be:	dc07      	bgt.n	80045d0 <sin+0x20>
 80045c0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8004650 <sin+0xa0>
 80045c4:	2000      	movs	r0, #0
 80045c6:	b005      	add	sp, #20
 80045c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045cc:	f000 bf4c 	b.w	8005468 <__kernel_sin>
 80045d0:	4822      	ldr	r0, [pc, #136]	; (800465c <sin+0xac>)
 80045d2:	4281      	cmp	r1, r0
 80045d4:	dd09      	ble.n	80045ea <sin+0x3a>
 80045d6:	ee10 0a10 	vmov	r0, s0
 80045da:	4619      	mov	r1, r3
 80045dc:	f7fb fe00 	bl	80001e0 <__aeabi_dsub>
 80045e0:	ec41 0b10 	vmov	d0, r0, r1
 80045e4:	b005      	add	sp, #20
 80045e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80045ea:	4668      	mov	r0, sp
 80045ec:	f000 f864 	bl	80046b8 <__ieee754_rem_pio2>
 80045f0:	f000 0003 	and.w	r0, r0, #3
 80045f4:	2801      	cmp	r0, #1
 80045f6:	d00c      	beq.n	8004612 <sin+0x62>
 80045f8:	2802      	cmp	r0, #2
 80045fa:	d011      	beq.n	8004620 <sin+0x70>
 80045fc:	b9f0      	cbnz	r0, 800463c <sin+0x8c>
 80045fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004602:	ed9d 0b00 	vldr	d0, [sp]
 8004606:	2001      	movs	r0, #1
 8004608:	f000 ff2e 	bl	8005468 <__kernel_sin>
 800460c:	ec51 0b10 	vmov	r0, r1, d0
 8004610:	e7e6      	b.n	80045e0 <sin+0x30>
 8004612:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004616:	ed9d 0b00 	vldr	d0, [sp]
 800461a:	f000 fb0d 	bl	8004c38 <__kernel_cos>
 800461e:	e7f5      	b.n	800460c <sin+0x5c>
 8004620:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004624:	ed9d 0b00 	vldr	d0, [sp]
 8004628:	2001      	movs	r0, #1
 800462a:	f000 ff1d 	bl	8005468 <__kernel_sin>
 800462e:	ec53 2b10 	vmov	r2, r3, d0
 8004632:	ee10 0a10 	vmov	r0, s0
 8004636:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800463a:	e7d1      	b.n	80045e0 <sin+0x30>
 800463c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004640:	ed9d 0b00 	vldr	d0, [sp]
 8004644:	f000 faf8 	bl	8004c38 <__kernel_cos>
 8004648:	e7f1      	b.n	800462e <sin+0x7e>
 800464a:	bf00      	nop
 800464c:	f3af 8000 	nop.w
	...
 8004658:	3fe921fb 	.word	0x3fe921fb
 800465c:	7fefffff 	.word	0x7fefffff

08004660 <sqrt>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	ed2d 8b02 	vpush	{d8}
 8004666:	ec55 4b10 	vmov	r4, r5, d0
 800466a:	f000 fa31 	bl	8004ad0 <__ieee754_sqrt>
 800466e:	4622      	mov	r2, r4
 8004670:	462b      	mov	r3, r5
 8004672:	4620      	mov	r0, r4
 8004674:	4629      	mov	r1, r5
 8004676:	eeb0 8a40 	vmov.f32	s16, s0
 800467a:	eef0 8a60 	vmov.f32	s17, s1
 800467e:	f7fc fa01 	bl	8000a84 <__aeabi_dcmpun>
 8004682:	b990      	cbnz	r0, 80046aa <sqrt+0x4a>
 8004684:	2200      	movs	r2, #0
 8004686:	2300      	movs	r3, #0
 8004688:	4620      	mov	r0, r4
 800468a:	4629      	mov	r1, r5
 800468c:	f7fc f9d2 	bl	8000a34 <__aeabi_dcmplt>
 8004690:	b158      	cbz	r0, 80046aa <sqrt+0x4a>
 8004692:	f7ff ff07 	bl	80044a4 <__errno>
 8004696:	2321      	movs	r3, #33	; 0x21
 8004698:	6003      	str	r3, [r0, #0]
 800469a:	2200      	movs	r2, #0
 800469c:	2300      	movs	r3, #0
 800469e:	4610      	mov	r0, r2
 80046a0:	4619      	mov	r1, r3
 80046a2:	f7fc f87f 	bl	80007a4 <__aeabi_ddiv>
 80046a6:	ec41 0b18 	vmov	d8, r0, r1
 80046aa:	eeb0 0a48 	vmov.f32	s0, s16
 80046ae:	eef0 0a68 	vmov.f32	s1, s17
 80046b2:	ecbd 8b02 	vpop	{d8}
 80046b6:	bd38      	pop	{r3, r4, r5, pc}

080046b8 <__ieee754_rem_pio2>:
 80046b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046bc:	ed2d 8b02 	vpush	{d8}
 80046c0:	ec55 4b10 	vmov	r4, r5, d0
 80046c4:	4bca      	ldr	r3, [pc, #808]	; (80049f0 <__ieee754_rem_pio2+0x338>)
 80046c6:	b08b      	sub	sp, #44	; 0x2c
 80046c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80046cc:	4598      	cmp	r8, r3
 80046ce:	4682      	mov	sl, r0
 80046d0:	9502      	str	r5, [sp, #8]
 80046d2:	dc08      	bgt.n	80046e6 <__ieee754_rem_pio2+0x2e>
 80046d4:	2200      	movs	r2, #0
 80046d6:	2300      	movs	r3, #0
 80046d8:	ed80 0b00 	vstr	d0, [r0]
 80046dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80046e0:	f04f 0b00 	mov.w	fp, #0
 80046e4:	e028      	b.n	8004738 <__ieee754_rem_pio2+0x80>
 80046e6:	4bc3      	ldr	r3, [pc, #780]	; (80049f4 <__ieee754_rem_pio2+0x33c>)
 80046e8:	4598      	cmp	r8, r3
 80046ea:	dc78      	bgt.n	80047de <__ieee754_rem_pio2+0x126>
 80046ec:	9b02      	ldr	r3, [sp, #8]
 80046ee:	4ec2      	ldr	r6, [pc, #776]	; (80049f8 <__ieee754_rem_pio2+0x340>)
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	ee10 0a10 	vmov	r0, s0
 80046f6:	a3b0      	add	r3, pc, #704	; (adr r3, 80049b8 <__ieee754_rem_pio2+0x300>)
 80046f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fc:	4629      	mov	r1, r5
 80046fe:	dd39      	ble.n	8004774 <__ieee754_rem_pio2+0xbc>
 8004700:	f7fb fd6e 	bl	80001e0 <__aeabi_dsub>
 8004704:	45b0      	cmp	r8, r6
 8004706:	4604      	mov	r4, r0
 8004708:	460d      	mov	r5, r1
 800470a:	d01b      	beq.n	8004744 <__ieee754_rem_pio2+0x8c>
 800470c:	a3ac      	add	r3, pc, #688	; (adr r3, 80049c0 <__ieee754_rem_pio2+0x308>)
 800470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004712:	f7fb fd65 	bl	80001e0 <__aeabi_dsub>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	e9ca 2300 	strd	r2, r3, [sl]
 800471e:	4620      	mov	r0, r4
 8004720:	4629      	mov	r1, r5
 8004722:	f7fb fd5d 	bl	80001e0 <__aeabi_dsub>
 8004726:	a3a6      	add	r3, pc, #664	; (adr r3, 80049c0 <__ieee754_rem_pio2+0x308>)
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f7fb fd58 	bl	80001e0 <__aeabi_dsub>
 8004730:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004734:	f04f 0b01 	mov.w	fp, #1
 8004738:	4658      	mov	r0, fp
 800473a:	b00b      	add	sp, #44	; 0x2c
 800473c:	ecbd 8b02 	vpop	{d8}
 8004740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004744:	a3a0      	add	r3, pc, #640	; (adr r3, 80049c8 <__ieee754_rem_pio2+0x310>)
 8004746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474a:	f7fb fd49 	bl	80001e0 <__aeabi_dsub>
 800474e:	a3a0      	add	r3, pc, #640	; (adr r3, 80049d0 <__ieee754_rem_pio2+0x318>)
 8004750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004754:	4604      	mov	r4, r0
 8004756:	460d      	mov	r5, r1
 8004758:	f7fb fd42 	bl	80001e0 <__aeabi_dsub>
 800475c:	4602      	mov	r2, r0
 800475e:	460b      	mov	r3, r1
 8004760:	e9ca 2300 	strd	r2, r3, [sl]
 8004764:	4620      	mov	r0, r4
 8004766:	4629      	mov	r1, r5
 8004768:	f7fb fd3a 	bl	80001e0 <__aeabi_dsub>
 800476c:	a398      	add	r3, pc, #608	; (adr r3, 80049d0 <__ieee754_rem_pio2+0x318>)
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	e7db      	b.n	800472c <__ieee754_rem_pio2+0x74>
 8004774:	f7fb fd36 	bl	80001e4 <__adddf3>
 8004778:	45b0      	cmp	r8, r6
 800477a:	4604      	mov	r4, r0
 800477c:	460d      	mov	r5, r1
 800477e:	d016      	beq.n	80047ae <__ieee754_rem_pio2+0xf6>
 8004780:	a38f      	add	r3, pc, #572	; (adr r3, 80049c0 <__ieee754_rem_pio2+0x308>)
 8004782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004786:	f7fb fd2d 	bl	80001e4 <__adddf3>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	e9ca 2300 	strd	r2, r3, [sl]
 8004792:	4620      	mov	r0, r4
 8004794:	4629      	mov	r1, r5
 8004796:	f7fb fd23 	bl	80001e0 <__aeabi_dsub>
 800479a:	a389      	add	r3, pc, #548	; (adr r3, 80049c0 <__ieee754_rem_pio2+0x308>)
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f7fb fd20 	bl	80001e4 <__adddf3>
 80047a4:	f04f 3bff 	mov.w	fp, #4294967295
 80047a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80047ac:	e7c4      	b.n	8004738 <__ieee754_rem_pio2+0x80>
 80047ae:	a386      	add	r3, pc, #536	; (adr r3, 80049c8 <__ieee754_rem_pio2+0x310>)
 80047b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b4:	f7fb fd16 	bl	80001e4 <__adddf3>
 80047b8:	a385      	add	r3, pc, #532	; (adr r3, 80049d0 <__ieee754_rem_pio2+0x318>)
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	4604      	mov	r4, r0
 80047c0:	460d      	mov	r5, r1
 80047c2:	f7fb fd0f 	bl	80001e4 <__adddf3>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	e9ca 2300 	strd	r2, r3, [sl]
 80047ce:	4620      	mov	r0, r4
 80047d0:	4629      	mov	r1, r5
 80047d2:	f7fb fd05 	bl	80001e0 <__aeabi_dsub>
 80047d6:	a37e      	add	r3, pc, #504	; (adr r3, 80049d0 <__ieee754_rem_pio2+0x318>)
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	e7e0      	b.n	80047a0 <__ieee754_rem_pio2+0xe8>
 80047de:	4b87      	ldr	r3, [pc, #540]	; (80049fc <__ieee754_rem_pio2+0x344>)
 80047e0:	4598      	cmp	r8, r3
 80047e2:	f300 80d9 	bgt.w	8004998 <__ieee754_rem_pio2+0x2e0>
 80047e6:	f000 fefd 	bl	80055e4 <fabs>
 80047ea:	ec55 4b10 	vmov	r4, r5, d0
 80047ee:	ee10 0a10 	vmov	r0, s0
 80047f2:	a379      	add	r3, pc, #484	; (adr r3, 80049d8 <__ieee754_rem_pio2+0x320>)
 80047f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f8:	4629      	mov	r1, r5
 80047fa:	f7fb fea9 	bl	8000550 <__aeabi_dmul>
 80047fe:	4b80      	ldr	r3, [pc, #512]	; (8004a00 <__ieee754_rem_pio2+0x348>)
 8004800:	2200      	movs	r2, #0
 8004802:	f7fb fcef 	bl	80001e4 <__adddf3>
 8004806:	f7fc f953 	bl	8000ab0 <__aeabi_d2iz>
 800480a:	4683      	mov	fp, r0
 800480c:	f7fb fe36 	bl	800047c <__aeabi_i2d>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	ec43 2b18 	vmov	d8, r2, r3
 8004818:	a367      	add	r3, pc, #412	; (adr r3, 80049b8 <__ieee754_rem_pio2+0x300>)
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	f7fb fe97 	bl	8000550 <__aeabi_dmul>
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	4620      	mov	r0, r4
 8004828:	4629      	mov	r1, r5
 800482a:	f7fb fcd9 	bl	80001e0 <__aeabi_dsub>
 800482e:	a364      	add	r3, pc, #400	; (adr r3, 80049c0 <__ieee754_rem_pio2+0x308>)
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	4606      	mov	r6, r0
 8004836:	460f      	mov	r7, r1
 8004838:	ec51 0b18 	vmov	r0, r1, d8
 800483c:	f7fb fe88 	bl	8000550 <__aeabi_dmul>
 8004840:	f1bb 0f1f 	cmp.w	fp, #31
 8004844:	4604      	mov	r4, r0
 8004846:	460d      	mov	r5, r1
 8004848:	dc0d      	bgt.n	8004866 <__ieee754_rem_pio2+0x1ae>
 800484a:	4b6e      	ldr	r3, [pc, #440]	; (8004a04 <__ieee754_rem_pio2+0x34c>)
 800484c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004854:	4543      	cmp	r3, r8
 8004856:	d006      	beq.n	8004866 <__ieee754_rem_pio2+0x1ae>
 8004858:	4622      	mov	r2, r4
 800485a:	462b      	mov	r3, r5
 800485c:	4630      	mov	r0, r6
 800485e:	4639      	mov	r1, r7
 8004860:	f7fb fcbe 	bl	80001e0 <__aeabi_dsub>
 8004864:	e00f      	b.n	8004886 <__ieee754_rem_pio2+0x1ce>
 8004866:	462b      	mov	r3, r5
 8004868:	4622      	mov	r2, r4
 800486a:	4630      	mov	r0, r6
 800486c:	4639      	mov	r1, r7
 800486e:	f7fb fcb7 	bl	80001e0 <__aeabi_dsub>
 8004872:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004876:	9303      	str	r3, [sp, #12]
 8004878:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800487c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004880:	f1b8 0f10 	cmp.w	r8, #16
 8004884:	dc02      	bgt.n	800488c <__ieee754_rem_pio2+0x1d4>
 8004886:	e9ca 0100 	strd	r0, r1, [sl]
 800488a:	e039      	b.n	8004900 <__ieee754_rem_pio2+0x248>
 800488c:	a34e      	add	r3, pc, #312	; (adr r3, 80049c8 <__ieee754_rem_pio2+0x310>)
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	ec51 0b18 	vmov	r0, r1, d8
 8004896:	f7fb fe5b 	bl	8000550 <__aeabi_dmul>
 800489a:	4604      	mov	r4, r0
 800489c:	460d      	mov	r5, r1
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4630      	mov	r0, r6
 80048a4:	4639      	mov	r1, r7
 80048a6:	f7fb fc9b 	bl	80001e0 <__aeabi_dsub>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4680      	mov	r8, r0
 80048b0:	4689      	mov	r9, r1
 80048b2:	4630      	mov	r0, r6
 80048b4:	4639      	mov	r1, r7
 80048b6:	f7fb fc93 	bl	80001e0 <__aeabi_dsub>
 80048ba:	4622      	mov	r2, r4
 80048bc:	462b      	mov	r3, r5
 80048be:	f7fb fc8f 	bl	80001e0 <__aeabi_dsub>
 80048c2:	a343      	add	r3, pc, #268	; (adr r3, 80049d0 <__ieee754_rem_pio2+0x318>)
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	4604      	mov	r4, r0
 80048ca:	460d      	mov	r5, r1
 80048cc:	ec51 0b18 	vmov	r0, r1, d8
 80048d0:	f7fb fe3e 	bl	8000550 <__aeabi_dmul>
 80048d4:	4622      	mov	r2, r4
 80048d6:	462b      	mov	r3, r5
 80048d8:	f7fb fc82 	bl	80001e0 <__aeabi_dsub>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4604      	mov	r4, r0
 80048e2:	460d      	mov	r5, r1
 80048e4:	4640      	mov	r0, r8
 80048e6:	4649      	mov	r1, r9
 80048e8:	f7fb fc7a 	bl	80001e0 <__aeabi_dsub>
 80048ec:	9a03      	ldr	r2, [sp, #12]
 80048ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b31      	cmp	r3, #49	; 0x31
 80048f6:	dc24      	bgt.n	8004942 <__ieee754_rem_pio2+0x28a>
 80048f8:	e9ca 0100 	strd	r0, r1, [sl]
 80048fc:	4646      	mov	r6, r8
 80048fe:	464f      	mov	r7, r9
 8004900:	e9da 8900 	ldrd	r8, r9, [sl]
 8004904:	4630      	mov	r0, r6
 8004906:	4642      	mov	r2, r8
 8004908:	464b      	mov	r3, r9
 800490a:	4639      	mov	r1, r7
 800490c:	f7fb fc68 	bl	80001e0 <__aeabi_dsub>
 8004910:	462b      	mov	r3, r5
 8004912:	4622      	mov	r2, r4
 8004914:	f7fb fc64 	bl	80001e0 <__aeabi_dsub>
 8004918:	9b02      	ldr	r3, [sp, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004920:	f6bf af0a 	bge.w	8004738 <__ieee754_rem_pio2+0x80>
 8004924:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004928:	f8ca 3004 	str.w	r3, [sl, #4]
 800492c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004930:	f8ca 8000 	str.w	r8, [sl]
 8004934:	f8ca 0008 	str.w	r0, [sl, #8]
 8004938:	f8ca 300c 	str.w	r3, [sl, #12]
 800493c:	f1cb 0b00 	rsb	fp, fp, #0
 8004940:	e6fa      	b.n	8004738 <__ieee754_rem_pio2+0x80>
 8004942:	a327      	add	r3, pc, #156	; (adr r3, 80049e0 <__ieee754_rem_pio2+0x328>)
 8004944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004948:	ec51 0b18 	vmov	r0, r1, d8
 800494c:	f7fb fe00 	bl	8000550 <__aeabi_dmul>
 8004950:	4604      	mov	r4, r0
 8004952:	460d      	mov	r5, r1
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4640      	mov	r0, r8
 800495a:	4649      	mov	r1, r9
 800495c:	f7fb fc40 	bl	80001e0 <__aeabi_dsub>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4606      	mov	r6, r0
 8004966:	460f      	mov	r7, r1
 8004968:	4640      	mov	r0, r8
 800496a:	4649      	mov	r1, r9
 800496c:	f7fb fc38 	bl	80001e0 <__aeabi_dsub>
 8004970:	4622      	mov	r2, r4
 8004972:	462b      	mov	r3, r5
 8004974:	f7fb fc34 	bl	80001e0 <__aeabi_dsub>
 8004978:	a31b      	add	r3, pc, #108	; (adr r3, 80049e8 <__ieee754_rem_pio2+0x330>)
 800497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497e:	4604      	mov	r4, r0
 8004980:	460d      	mov	r5, r1
 8004982:	ec51 0b18 	vmov	r0, r1, d8
 8004986:	f7fb fde3 	bl	8000550 <__aeabi_dmul>
 800498a:	4622      	mov	r2, r4
 800498c:	462b      	mov	r3, r5
 800498e:	f7fb fc27 	bl	80001e0 <__aeabi_dsub>
 8004992:	4604      	mov	r4, r0
 8004994:	460d      	mov	r5, r1
 8004996:	e75f      	b.n	8004858 <__ieee754_rem_pio2+0x1a0>
 8004998:	4b1b      	ldr	r3, [pc, #108]	; (8004a08 <__ieee754_rem_pio2+0x350>)
 800499a:	4598      	cmp	r8, r3
 800499c:	dd36      	ble.n	8004a0c <__ieee754_rem_pio2+0x354>
 800499e:	ee10 2a10 	vmov	r2, s0
 80049a2:	462b      	mov	r3, r5
 80049a4:	4620      	mov	r0, r4
 80049a6:	4629      	mov	r1, r5
 80049a8:	f7fb fc1a 	bl	80001e0 <__aeabi_dsub>
 80049ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80049b0:	e9ca 0100 	strd	r0, r1, [sl]
 80049b4:	e694      	b.n	80046e0 <__ieee754_rem_pio2+0x28>
 80049b6:	bf00      	nop
 80049b8:	54400000 	.word	0x54400000
 80049bc:	3ff921fb 	.word	0x3ff921fb
 80049c0:	1a626331 	.word	0x1a626331
 80049c4:	3dd0b461 	.word	0x3dd0b461
 80049c8:	1a600000 	.word	0x1a600000
 80049cc:	3dd0b461 	.word	0x3dd0b461
 80049d0:	2e037073 	.word	0x2e037073
 80049d4:	3ba3198a 	.word	0x3ba3198a
 80049d8:	6dc9c883 	.word	0x6dc9c883
 80049dc:	3fe45f30 	.word	0x3fe45f30
 80049e0:	2e000000 	.word	0x2e000000
 80049e4:	3ba3198a 	.word	0x3ba3198a
 80049e8:	252049c1 	.word	0x252049c1
 80049ec:	397b839a 	.word	0x397b839a
 80049f0:	3fe921fb 	.word	0x3fe921fb
 80049f4:	4002d97b 	.word	0x4002d97b
 80049f8:	3ff921fb 	.word	0x3ff921fb
 80049fc:	413921fb 	.word	0x413921fb
 8004a00:	3fe00000 	.word	0x3fe00000
 8004a04:	08005838 	.word	0x08005838
 8004a08:	7fefffff 	.word	0x7fefffff
 8004a0c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004a10:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004a14:	ee10 0a10 	vmov	r0, s0
 8004a18:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8004a1c:	ee10 6a10 	vmov	r6, s0
 8004a20:	460f      	mov	r7, r1
 8004a22:	f7fc f845 	bl	8000ab0 <__aeabi_d2iz>
 8004a26:	f7fb fd29 	bl	800047c <__aeabi_i2d>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4630      	mov	r0, r6
 8004a30:	4639      	mov	r1, r7
 8004a32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a36:	f7fb fbd3 	bl	80001e0 <__aeabi_dsub>
 8004a3a:	4b23      	ldr	r3, [pc, #140]	; (8004ac8 <__ieee754_rem_pio2+0x410>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f7fb fd87 	bl	8000550 <__aeabi_dmul>
 8004a42:	460f      	mov	r7, r1
 8004a44:	4606      	mov	r6, r0
 8004a46:	f7fc f833 	bl	8000ab0 <__aeabi_d2iz>
 8004a4a:	f7fb fd17 	bl	800047c <__aeabi_i2d>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	4630      	mov	r0, r6
 8004a54:	4639      	mov	r1, r7
 8004a56:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a5a:	f7fb fbc1 	bl	80001e0 <__aeabi_dsub>
 8004a5e:	4b1a      	ldr	r3, [pc, #104]	; (8004ac8 <__ieee754_rem_pio2+0x410>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	f7fb fd75 	bl	8000550 <__aeabi_dmul>
 8004a66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004a6a:	ad04      	add	r5, sp, #16
 8004a6c:	f04f 0803 	mov.w	r8, #3
 8004a70:	46a9      	mov	r9, r5
 8004a72:	2600      	movs	r6, #0
 8004a74:	2700      	movs	r7, #0
 8004a76:	4632      	mov	r2, r6
 8004a78:	463b      	mov	r3, r7
 8004a7a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004a7e:	46c3      	mov	fp, r8
 8004a80:	3d08      	subs	r5, #8
 8004a82:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a86:	f7fb ffcb 	bl	8000a20 <__aeabi_dcmpeq>
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	d1f3      	bne.n	8004a76 <__ieee754_rem_pio2+0x3be>
 8004a8e:	4b0f      	ldr	r3, [pc, #60]	; (8004acc <__ieee754_rem_pio2+0x414>)
 8004a90:	9301      	str	r3, [sp, #4]
 8004a92:	2302      	movs	r3, #2
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	4622      	mov	r2, r4
 8004a98:	465b      	mov	r3, fp
 8004a9a:	4651      	mov	r1, sl
 8004a9c:	4648      	mov	r0, r9
 8004a9e:	f000 f993 	bl	8004dc8 <__kernel_rem_pio2>
 8004aa2:	9b02      	ldr	r3, [sp, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	4683      	mov	fp, r0
 8004aa8:	f6bf ae46 	bge.w	8004738 <__ieee754_rem_pio2+0x80>
 8004aac:	e9da 2100 	ldrd	r2, r1, [sl]
 8004ab0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ab4:	e9ca 2300 	strd	r2, r3, [sl]
 8004ab8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004abc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ac0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004ac4:	e73a      	b.n	800493c <__ieee754_rem_pio2+0x284>
 8004ac6:	bf00      	nop
 8004ac8:	41700000 	.word	0x41700000
 8004acc:	080058b8 	.word	0x080058b8

08004ad0 <__ieee754_sqrt>:
 8004ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ad4:	ec55 4b10 	vmov	r4, r5, d0
 8004ad8:	4e55      	ldr	r6, [pc, #340]	; (8004c30 <__ieee754_sqrt+0x160>)
 8004ada:	43ae      	bics	r6, r5
 8004adc:	ee10 0a10 	vmov	r0, s0
 8004ae0:	ee10 3a10 	vmov	r3, s0
 8004ae4:	462a      	mov	r2, r5
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	d110      	bne.n	8004b0c <__ieee754_sqrt+0x3c>
 8004aea:	ee10 2a10 	vmov	r2, s0
 8004aee:	462b      	mov	r3, r5
 8004af0:	f7fb fd2e 	bl	8000550 <__aeabi_dmul>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4620      	mov	r0, r4
 8004afa:	4629      	mov	r1, r5
 8004afc:	f7fb fb72 	bl	80001e4 <__adddf3>
 8004b00:	4604      	mov	r4, r0
 8004b02:	460d      	mov	r5, r1
 8004b04:	ec45 4b10 	vmov	d0, r4, r5
 8004b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b0c:	2d00      	cmp	r5, #0
 8004b0e:	dc10      	bgt.n	8004b32 <__ieee754_sqrt+0x62>
 8004b10:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004b14:	4330      	orrs	r0, r6
 8004b16:	d0f5      	beq.n	8004b04 <__ieee754_sqrt+0x34>
 8004b18:	b15d      	cbz	r5, 8004b32 <__ieee754_sqrt+0x62>
 8004b1a:	ee10 2a10 	vmov	r2, s0
 8004b1e:	462b      	mov	r3, r5
 8004b20:	ee10 0a10 	vmov	r0, s0
 8004b24:	f7fb fb5c 	bl	80001e0 <__aeabi_dsub>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	f7fb fe3a 	bl	80007a4 <__aeabi_ddiv>
 8004b30:	e7e6      	b.n	8004b00 <__ieee754_sqrt+0x30>
 8004b32:	1512      	asrs	r2, r2, #20
 8004b34:	d074      	beq.n	8004c20 <__ieee754_sqrt+0x150>
 8004b36:	07d4      	lsls	r4, r2, #31
 8004b38:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004b3c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004b40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004b44:	bf5e      	ittt	pl
 8004b46:	0fda      	lsrpl	r2, r3, #31
 8004b48:	005b      	lslpl	r3, r3, #1
 8004b4a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004b4e:	2400      	movs	r4, #0
 8004b50:	0fda      	lsrs	r2, r3, #31
 8004b52:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004b56:	107f      	asrs	r7, r7, #1
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	2516      	movs	r5, #22
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004b62:	1886      	adds	r6, r0, r2
 8004b64:	428e      	cmp	r6, r1
 8004b66:	bfde      	ittt	le
 8004b68:	1b89      	suble	r1, r1, r6
 8004b6a:	18b0      	addle	r0, r6, r2
 8004b6c:	18a4      	addle	r4, r4, r2
 8004b6e:	0049      	lsls	r1, r1, #1
 8004b70:	3d01      	subs	r5, #1
 8004b72:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004b76:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004b7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b7e:	d1f0      	bne.n	8004b62 <__ieee754_sqrt+0x92>
 8004b80:	462a      	mov	r2, r5
 8004b82:	f04f 0e20 	mov.w	lr, #32
 8004b86:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004b8a:	4281      	cmp	r1, r0
 8004b8c:	eb06 0c05 	add.w	ip, r6, r5
 8004b90:	dc02      	bgt.n	8004b98 <__ieee754_sqrt+0xc8>
 8004b92:	d113      	bne.n	8004bbc <__ieee754_sqrt+0xec>
 8004b94:	459c      	cmp	ip, r3
 8004b96:	d811      	bhi.n	8004bbc <__ieee754_sqrt+0xec>
 8004b98:	f1bc 0f00 	cmp.w	ip, #0
 8004b9c:	eb0c 0506 	add.w	r5, ip, r6
 8004ba0:	da43      	bge.n	8004c2a <__ieee754_sqrt+0x15a>
 8004ba2:	2d00      	cmp	r5, #0
 8004ba4:	db41      	blt.n	8004c2a <__ieee754_sqrt+0x15a>
 8004ba6:	f100 0801 	add.w	r8, r0, #1
 8004baa:	1a09      	subs	r1, r1, r0
 8004bac:	459c      	cmp	ip, r3
 8004bae:	bf88      	it	hi
 8004bb0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004bb4:	eba3 030c 	sub.w	r3, r3, ip
 8004bb8:	4432      	add	r2, r6
 8004bba:	4640      	mov	r0, r8
 8004bbc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004bc0:	f1be 0e01 	subs.w	lr, lr, #1
 8004bc4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8004bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004bcc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004bd0:	d1db      	bne.n	8004b8a <__ieee754_sqrt+0xba>
 8004bd2:	430b      	orrs	r3, r1
 8004bd4:	d006      	beq.n	8004be4 <__ieee754_sqrt+0x114>
 8004bd6:	1c50      	adds	r0, r2, #1
 8004bd8:	bf13      	iteet	ne
 8004bda:	3201      	addne	r2, #1
 8004bdc:	3401      	addeq	r4, #1
 8004bde:	4672      	moveq	r2, lr
 8004be0:	f022 0201 	bicne.w	r2, r2, #1
 8004be4:	1063      	asrs	r3, r4, #1
 8004be6:	0852      	lsrs	r2, r2, #1
 8004be8:	07e1      	lsls	r1, r4, #31
 8004bea:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004bee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004bf2:	bf48      	it	mi
 8004bf4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004bf8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004bfc:	4614      	mov	r4, r2
 8004bfe:	e781      	b.n	8004b04 <__ieee754_sqrt+0x34>
 8004c00:	0ad9      	lsrs	r1, r3, #11
 8004c02:	3815      	subs	r0, #21
 8004c04:	055b      	lsls	r3, r3, #21
 8004c06:	2900      	cmp	r1, #0
 8004c08:	d0fa      	beq.n	8004c00 <__ieee754_sqrt+0x130>
 8004c0a:	02cd      	lsls	r5, r1, #11
 8004c0c:	d50a      	bpl.n	8004c24 <__ieee754_sqrt+0x154>
 8004c0e:	f1c2 0420 	rsb	r4, r2, #32
 8004c12:	fa23 f404 	lsr.w	r4, r3, r4
 8004c16:	1e55      	subs	r5, r2, #1
 8004c18:	4093      	lsls	r3, r2
 8004c1a:	4321      	orrs	r1, r4
 8004c1c:	1b42      	subs	r2, r0, r5
 8004c1e:	e78a      	b.n	8004b36 <__ieee754_sqrt+0x66>
 8004c20:	4610      	mov	r0, r2
 8004c22:	e7f0      	b.n	8004c06 <__ieee754_sqrt+0x136>
 8004c24:	0049      	lsls	r1, r1, #1
 8004c26:	3201      	adds	r2, #1
 8004c28:	e7ef      	b.n	8004c0a <__ieee754_sqrt+0x13a>
 8004c2a:	4680      	mov	r8, r0
 8004c2c:	e7bd      	b.n	8004baa <__ieee754_sqrt+0xda>
 8004c2e:	bf00      	nop
 8004c30:	7ff00000 	.word	0x7ff00000
 8004c34:	00000000 	.word	0x00000000

08004c38 <__kernel_cos>:
 8004c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3c:	ec57 6b10 	vmov	r6, r7, d0
 8004c40:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004c44:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004c48:	ed8d 1b00 	vstr	d1, [sp]
 8004c4c:	da07      	bge.n	8004c5e <__kernel_cos+0x26>
 8004c4e:	ee10 0a10 	vmov	r0, s0
 8004c52:	4639      	mov	r1, r7
 8004c54:	f7fb ff2c 	bl	8000ab0 <__aeabi_d2iz>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	f000 8088 	beq.w	8004d6e <__kernel_cos+0x136>
 8004c5e:	4632      	mov	r2, r6
 8004c60:	463b      	mov	r3, r7
 8004c62:	4630      	mov	r0, r6
 8004c64:	4639      	mov	r1, r7
 8004c66:	f7fb fc73 	bl	8000550 <__aeabi_dmul>
 8004c6a:	4b51      	ldr	r3, [pc, #324]	; (8004db0 <__kernel_cos+0x178>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	4604      	mov	r4, r0
 8004c70:	460d      	mov	r5, r1
 8004c72:	f7fb fc6d 	bl	8000550 <__aeabi_dmul>
 8004c76:	a340      	add	r3, pc, #256	; (adr r3, 8004d78 <__kernel_cos+0x140>)
 8004c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7c:	4682      	mov	sl, r0
 8004c7e:	468b      	mov	fp, r1
 8004c80:	4620      	mov	r0, r4
 8004c82:	4629      	mov	r1, r5
 8004c84:	f7fb fc64 	bl	8000550 <__aeabi_dmul>
 8004c88:	a33d      	add	r3, pc, #244	; (adr r3, 8004d80 <__kernel_cos+0x148>)
 8004c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8e:	f7fb faa9 	bl	80001e4 <__adddf3>
 8004c92:	4622      	mov	r2, r4
 8004c94:	462b      	mov	r3, r5
 8004c96:	f7fb fc5b 	bl	8000550 <__aeabi_dmul>
 8004c9a:	a33b      	add	r3, pc, #236	; (adr r3, 8004d88 <__kernel_cos+0x150>)
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	f7fb fa9e 	bl	80001e0 <__aeabi_dsub>
 8004ca4:	4622      	mov	r2, r4
 8004ca6:	462b      	mov	r3, r5
 8004ca8:	f7fb fc52 	bl	8000550 <__aeabi_dmul>
 8004cac:	a338      	add	r3, pc, #224	; (adr r3, 8004d90 <__kernel_cos+0x158>)
 8004cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb2:	f7fb fa97 	bl	80001e4 <__adddf3>
 8004cb6:	4622      	mov	r2, r4
 8004cb8:	462b      	mov	r3, r5
 8004cba:	f7fb fc49 	bl	8000550 <__aeabi_dmul>
 8004cbe:	a336      	add	r3, pc, #216	; (adr r3, 8004d98 <__kernel_cos+0x160>)
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	f7fb fa8c 	bl	80001e0 <__aeabi_dsub>
 8004cc8:	4622      	mov	r2, r4
 8004cca:	462b      	mov	r3, r5
 8004ccc:	f7fb fc40 	bl	8000550 <__aeabi_dmul>
 8004cd0:	a333      	add	r3, pc, #204	; (adr r3, 8004da0 <__kernel_cos+0x168>)
 8004cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd6:	f7fb fa85 	bl	80001e4 <__adddf3>
 8004cda:	4622      	mov	r2, r4
 8004cdc:	462b      	mov	r3, r5
 8004cde:	f7fb fc37 	bl	8000550 <__aeabi_dmul>
 8004ce2:	4622      	mov	r2, r4
 8004ce4:	462b      	mov	r3, r5
 8004ce6:	f7fb fc33 	bl	8000550 <__aeabi_dmul>
 8004cea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cee:	4604      	mov	r4, r0
 8004cf0:	460d      	mov	r5, r1
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	4639      	mov	r1, r7
 8004cf6:	f7fb fc2b 	bl	8000550 <__aeabi_dmul>
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	4629      	mov	r1, r5
 8004d00:	4620      	mov	r0, r4
 8004d02:	f7fb fa6d 	bl	80001e0 <__aeabi_dsub>
 8004d06:	4b2b      	ldr	r3, [pc, #172]	; (8004db4 <__kernel_cos+0x17c>)
 8004d08:	4598      	cmp	r8, r3
 8004d0a:	4606      	mov	r6, r0
 8004d0c:	460f      	mov	r7, r1
 8004d0e:	dc10      	bgt.n	8004d32 <__kernel_cos+0xfa>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4650      	mov	r0, sl
 8004d16:	4659      	mov	r1, fp
 8004d18:	f7fb fa62 	bl	80001e0 <__aeabi_dsub>
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4926      	ldr	r1, [pc, #152]	; (8004db8 <__kernel_cos+0x180>)
 8004d20:	4602      	mov	r2, r0
 8004d22:	2000      	movs	r0, #0
 8004d24:	f7fb fa5c 	bl	80001e0 <__aeabi_dsub>
 8004d28:	ec41 0b10 	vmov	d0, r0, r1
 8004d2c:	b003      	add	sp, #12
 8004d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d32:	4b22      	ldr	r3, [pc, #136]	; (8004dbc <__kernel_cos+0x184>)
 8004d34:	4920      	ldr	r1, [pc, #128]	; (8004db8 <__kernel_cos+0x180>)
 8004d36:	4598      	cmp	r8, r3
 8004d38:	bfcc      	ite	gt
 8004d3a:	4d21      	ldrgt	r5, [pc, #132]	; (8004dc0 <__kernel_cos+0x188>)
 8004d3c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004d40:	2400      	movs	r4, #0
 8004d42:	4622      	mov	r2, r4
 8004d44:	462b      	mov	r3, r5
 8004d46:	2000      	movs	r0, #0
 8004d48:	f7fb fa4a 	bl	80001e0 <__aeabi_dsub>
 8004d4c:	4622      	mov	r2, r4
 8004d4e:	4680      	mov	r8, r0
 8004d50:	4689      	mov	r9, r1
 8004d52:	462b      	mov	r3, r5
 8004d54:	4650      	mov	r0, sl
 8004d56:	4659      	mov	r1, fp
 8004d58:	f7fb fa42 	bl	80001e0 <__aeabi_dsub>
 8004d5c:	4632      	mov	r2, r6
 8004d5e:	463b      	mov	r3, r7
 8004d60:	f7fb fa3e 	bl	80001e0 <__aeabi_dsub>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4640      	mov	r0, r8
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	e7da      	b.n	8004d24 <__kernel_cos+0xec>
 8004d6e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004da8 <__kernel_cos+0x170>
 8004d72:	e7db      	b.n	8004d2c <__kernel_cos+0xf4>
 8004d74:	f3af 8000 	nop.w
 8004d78:	be8838d4 	.word	0xbe8838d4
 8004d7c:	bda8fae9 	.word	0xbda8fae9
 8004d80:	bdb4b1c4 	.word	0xbdb4b1c4
 8004d84:	3e21ee9e 	.word	0x3e21ee9e
 8004d88:	809c52ad 	.word	0x809c52ad
 8004d8c:	3e927e4f 	.word	0x3e927e4f
 8004d90:	19cb1590 	.word	0x19cb1590
 8004d94:	3efa01a0 	.word	0x3efa01a0
 8004d98:	16c15177 	.word	0x16c15177
 8004d9c:	3f56c16c 	.word	0x3f56c16c
 8004da0:	5555554c 	.word	0x5555554c
 8004da4:	3fa55555 	.word	0x3fa55555
 8004da8:	00000000 	.word	0x00000000
 8004dac:	3ff00000 	.word	0x3ff00000
 8004db0:	3fe00000 	.word	0x3fe00000
 8004db4:	3fd33332 	.word	0x3fd33332
 8004db8:	3ff00000 	.word	0x3ff00000
 8004dbc:	3fe90000 	.word	0x3fe90000
 8004dc0:	3fd20000 	.word	0x3fd20000
 8004dc4:	00000000 	.word	0x00000000

08004dc8 <__kernel_rem_pio2>:
 8004dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dcc:	ed2d 8b02 	vpush	{d8}
 8004dd0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004dd4:	f112 0f14 	cmn.w	r2, #20
 8004dd8:	9308      	str	r3, [sp, #32]
 8004dda:	9101      	str	r1, [sp, #4]
 8004ddc:	4bc4      	ldr	r3, [pc, #784]	; (80050f0 <__kernel_rem_pio2+0x328>)
 8004dde:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004de0:	900b      	str	r0, [sp, #44]	; 0x2c
 8004de2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004de6:	9302      	str	r3, [sp, #8]
 8004de8:	9b08      	ldr	r3, [sp, #32]
 8004dea:	f103 33ff 	add.w	r3, r3, #4294967295
 8004dee:	bfa8      	it	ge
 8004df0:	1ed4      	subge	r4, r2, #3
 8004df2:	9306      	str	r3, [sp, #24]
 8004df4:	bfb2      	itee	lt
 8004df6:	2400      	movlt	r4, #0
 8004df8:	2318      	movge	r3, #24
 8004dfa:	fb94 f4f3 	sdivge	r4, r4, r3
 8004dfe:	f06f 0317 	mvn.w	r3, #23
 8004e02:	fb04 3303 	mla	r3, r4, r3, r3
 8004e06:	eb03 0a02 	add.w	sl, r3, r2
 8004e0a:	9b02      	ldr	r3, [sp, #8]
 8004e0c:	9a06      	ldr	r2, [sp, #24]
 8004e0e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80050e0 <__kernel_rem_pio2+0x318>
 8004e12:	eb03 0802 	add.w	r8, r3, r2
 8004e16:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004e18:	1aa7      	subs	r7, r4, r2
 8004e1a:	ae22      	add	r6, sp, #136	; 0x88
 8004e1c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004e20:	2500      	movs	r5, #0
 8004e22:	4545      	cmp	r5, r8
 8004e24:	dd13      	ble.n	8004e4e <__kernel_rem_pio2+0x86>
 8004e26:	9b08      	ldr	r3, [sp, #32]
 8004e28:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80050e0 <__kernel_rem_pio2+0x318>
 8004e2c:	aa22      	add	r2, sp, #136	; 0x88
 8004e2e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004e32:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8004e36:	f04f 0800 	mov.w	r8, #0
 8004e3a:	9b02      	ldr	r3, [sp, #8]
 8004e3c:	4598      	cmp	r8, r3
 8004e3e:	dc2f      	bgt.n	8004ea0 <__kernel_rem_pio2+0xd8>
 8004e40:	ed8d 8b04 	vstr	d8, [sp, #16]
 8004e44:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004e48:	462f      	mov	r7, r5
 8004e4a:	2600      	movs	r6, #0
 8004e4c:	e01b      	b.n	8004e86 <__kernel_rem_pio2+0xbe>
 8004e4e:	42ef      	cmn	r7, r5
 8004e50:	d407      	bmi.n	8004e62 <__kernel_rem_pio2+0x9a>
 8004e52:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004e56:	f7fb fb11 	bl	800047c <__aeabi_i2d>
 8004e5a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004e5e:	3501      	adds	r5, #1
 8004e60:	e7df      	b.n	8004e22 <__kernel_rem_pio2+0x5a>
 8004e62:	ec51 0b18 	vmov	r0, r1, d8
 8004e66:	e7f8      	b.n	8004e5a <__kernel_rem_pio2+0x92>
 8004e68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004e70:	f7fb fb6e 	bl	8000550 <__aeabi_dmul>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e7c:	f7fb f9b2 	bl	80001e4 <__adddf3>
 8004e80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e84:	3601      	adds	r6, #1
 8004e86:	9b06      	ldr	r3, [sp, #24]
 8004e88:	429e      	cmp	r6, r3
 8004e8a:	f1a7 0708 	sub.w	r7, r7, #8
 8004e8e:	ddeb      	ble.n	8004e68 <__kernel_rem_pio2+0xa0>
 8004e90:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004e94:	f108 0801 	add.w	r8, r8, #1
 8004e98:	ecab 7b02 	vstmia	fp!, {d7}
 8004e9c:	3508      	adds	r5, #8
 8004e9e:	e7cc      	b.n	8004e3a <__kernel_rem_pio2+0x72>
 8004ea0:	9b02      	ldr	r3, [sp, #8]
 8004ea2:	aa0e      	add	r2, sp, #56	; 0x38
 8004ea4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004ea8:	930d      	str	r3, [sp, #52]	; 0x34
 8004eaa:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004eac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004eb0:	9c02      	ldr	r4, [sp, #8]
 8004eb2:	930c      	str	r3, [sp, #48]	; 0x30
 8004eb4:	00e3      	lsls	r3, r4, #3
 8004eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8004eb8:	ab9a      	add	r3, sp, #616	; 0x268
 8004eba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ebe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004ec2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8004ec6:	ab72      	add	r3, sp, #456	; 0x1c8
 8004ec8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8004ecc:	46c3      	mov	fp, r8
 8004ece:	46a1      	mov	r9, r4
 8004ed0:	f1b9 0f00 	cmp.w	r9, #0
 8004ed4:	f1a5 0508 	sub.w	r5, r5, #8
 8004ed8:	dc77      	bgt.n	8004fca <__kernel_rem_pio2+0x202>
 8004eda:	ec47 6b10 	vmov	d0, r6, r7
 8004ede:	4650      	mov	r0, sl
 8004ee0:	f000 fc0a 	bl	80056f8 <scalbn>
 8004ee4:	ec57 6b10 	vmov	r6, r7, d0
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004eee:	ee10 0a10 	vmov	r0, s0
 8004ef2:	4639      	mov	r1, r7
 8004ef4:	f7fb fb2c 	bl	8000550 <__aeabi_dmul>
 8004ef8:	ec41 0b10 	vmov	d0, r0, r1
 8004efc:	f000 fb7c 	bl	80055f8 <floor>
 8004f00:	4b7c      	ldr	r3, [pc, #496]	; (80050f4 <__kernel_rem_pio2+0x32c>)
 8004f02:	ec51 0b10 	vmov	r0, r1, d0
 8004f06:	2200      	movs	r2, #0
 8004f08:	f7fb fb22 	bl	8000550 <__aeabi_dmul>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4630      	mov	r0, r6
 8004f12:	4639      	mov	r1, r7
 8004f14:	f7fb f964 	bl	80001e0 <__aeabi_dsub>
 8004f18:	460f      	mov	r7, r1
 8004f1a:	4606      	mov	r6, r0
 8004f1c:	f7fb fdc8 	bl	8000ab0 <__aeabi_d2iz>
 8004f20:	9004      	str	r0, [sp, #16]
 8004f22:	f7fb faab 	bl	800047c <__aeabi_i2d>
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	4639      	mov	r1, r7
 8004f2e:	f7fb f957 	bl	80001e0 <__aeabi_dsub>
 8004f32:	f1ba 0f00 	cmp.w	sl, #0
 8004f36:	4606      	mov	r6, r0
 8004f38:	460f      	mov	r7, r1
 8004f3a:	dd6d      	ble.n	8005018 <__kernel_rem_pio2+0x250>
 8004f3c:	1e62      	subs	r2, r4, #1
 8004f3e:	ab0e      	add	r3, sp, #56	; 0x38
 8004f40:	9d04      	ldr	r5, [sp, #16]
 8004f42:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004f46:	f1ca 0118 	rsb	r1, sl, #24
 8004f4a:	fa40 f301 	asr.w	r3, r0, r1
 8004f4e:	441d      	add	r5, r3
 8004f50:	408b      	lsls	r3, r1
 8004f52:	1ac0      	subs	r0, r0, r3
 8004f54:	ab0e      	add	r3, sp, #56	; 0x38
 8004f56:	9504      	str	r5, [sp, #16]
 8004f58:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004f5c:	f1ca 0317 	rsb	r3, sl, #23
 8004f60:	fa40 fb03 	asr.w	fp, r0, r3
 8004f64:	f1bb 0f00 	cmp.w	fp, #0
 8004f68:	dd65      	ble.n	8005036 <__kernel_rem_pio2+0x26e>
 8004f6a:	9b04      	ldr	r3, [sp, #16]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	3301      	adds	r3, #1
 8004f70:	9304      	str	r3, [sp, #16]
 8004f72:	4615      	mov	r5, r2
 8004f74:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004f78:	4294      	cmp	r4, r2
 8004f7a:	f300 809c 	bgt.w	80050b6 <__kernel_rem_pio2+0x2ee>
 8004f7e:	f1ba 0f00 	cmp.w	sl, #0
 8004f82:	dd07      	ble.n	8004f94 <__kernel_rem_pio2+0x1cc>
 8004f84:	f1ba 0f01 	cmp.w	sl, #1
 8004f88:	f000 80c0 	beq.w	800510c <__kernel_rem_pio2+0x344>
 8004f8c:	f1ba 0f02 	cmp.w	sl, #2
 8004f90:	f000 80c6 	beq.w	8005120 <__kernel_rem_pio2+0x358>
 8004f94:	f1bb 0f02 	cmp.w	fp, #2
 8004f98:	d14d      	bne.n	8005036 <__kernel_rem_pio2+0x26e>
 8004f9a:	4632      	mov	r2, r6
 8004f9c:	463b      	mov	r3, r7
 8004f9e:	4956      	ldr	r1, [pc, #344]	; (80050f8 <__kernel_rem_pio2+0x330>)
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	f7fb f91d 	bl	80001e0 <__aeabi_dsub>
 8004fa6:	4606      	mov	r6, r0
 8004fa8:	460f      	mov	r7, r1
 8004faa:	2d00      	cmp	r5, #0
 8004fac:	d043      	beq.n	8005036 <__kernel_rem_pio2+0x26e>
 8004fae:	4650      	mov	r0, sl
 8004fb0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80050e8 <__kernel_rem_pio2+0x320>
 8004fb4:	f000 fba0 	bl	80056f8 <scalbn>
 8004fb8:	4630      	mov	r0, r6
 8004fba:	4639      	mov	r1, r7
 8004fbc:	ec53 2b10 	vmov	r2, r3, d0
 8004fc0:	f7fb f90e 	bl	80001e0 <__aeabi_dsub>
 8004fc4:	4606      	mov	r6, r0
 8004fc6:	460f      	mov	r7, r1
 8004fc8:	e035      	b.n	8005036 <__kernel_rem_pio2+0x26e>
 8004fca:	4b4c      	ldr	r3, [pc, #304]	; (80050fc <__kernel_rem_pio2+0x334>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	4630      	mov	r0, r6
 8004fd0:	4639      	mov	r1, r7
 8004fd2:	f7fb fabd 	bl	8000550 <__aeabi_dmul>
 8004fd6:	f7fb fd6b 	bl	8000ab0 <__aeabi_d2iz>
 8004fda:	f7fb fa4f 	bl	800047c <__aeabi_i2d>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	ec43 2b18 	vmov	d8, r2, r3
 8004fe6:	4b46      	ldr	r3, [pc, #280]	; (8005100 <__kernel_rem_pio2+0x338>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f7fb fab1 	bl	8000550 <__aeabi_dmul>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	4639      	mov	r1, r7
 8004ff6:	f7fb f8f3 	bl	80001e0 <__aeabi_dsub>
 8004ffa:	f7fb fd59 	bl	8000ab0 <__aeabi_d2iz>
 8004ffe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005002:	f84b 0b04 	str.w	r0, [fp], #4
 8005006:	ec51 0b18 	vmov	r0, r1, d8
 800500a:	f7fb f8eb 	bl	80001e4 <__adddf3>
 800500e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005012:	4606      	mov	r6, r0
 8005014:	460f      	mov	r7, r1
 8005016:	e75b      	b.n	8004ed0 <__kernel_rem_pio2+0x108>
 8005018:	d106      	bne.n	8005028 <__kernel_rem_pio2+0x260>
 800501a:	1e63      	subs	r3, r4, #1
 800501c:	aa0e      	add	r2, sp, #56	; 0x38
 800501e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005022:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8005026:	e79d      	b.n	8004f64 <__kernel_rem_pio2+0x19c>
 8005028:	4b36      	ldr	r3, [pc, #216]	; (8005104 <__kernel_rem_pio2+0x33c>)
 800502a:	2200      	movs	r2, #0
 800502c:	f7fb fd16 	bl	8000a5c <__aeabi_dcmpge>
 8005030:	2800      	cmp	r0, #0
 8005032:	d13d      	bne.n	80050b0 <__kernel_rem_pio2+0x2e8>
 8005034:	4683      	mov	fp, r0
 8005036:	2200      	movs	r2, #0
 8005038:	2300      	movs	r3, #0
 800503a:	4630      	mov	r0, r6
 800503c:	4639      	mov	r1, r7
 800503e:	f7fb fcef 	bl	8000a20 <__aeabi_dcmpeq>
 8005042:	2800      	cmp	r0, #0
 8005044:	f000 80c0 	beq.w	80051c8 <__kernel_rem_pio2+0x400>
 8005048:	1e65      	subs	r5, r4, #1
 800504a:	462b      	mov	r3, r5
 800504c:	2200      	movs	r2, #0
 800504e:	9902      	ldr	r1, [sp, #8]
 8005050:	428b      	cmp	r3, r1
 8005052:	da6c      	bge.n	800512e <__kernel_rem_pio2+0x366>
 8005054:	2a00      	cmp	r2, #0
 8005056:	f000 8089 	beq.w	800516c <__kernel_rem_pio2+0x3a4>
 800505a:	ab0e      	add	r3, sp, #56	; 0x38
 800505c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005060:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 80ad 	beq.w	80051c4 <__kernel_rem_pio2+0x3fc>
 800506a:	4650      	mov	r0, sl
 800506c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80050e8 <__kernel_rem_pio2+0x320>
 8005070:	f000 fb42 	bl	80056f8 <scalbn>
 8005074:	ab9a      	add	r3, sp, #616	; 0x268
 8005076:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800507a:	ec57 6b10 	vmov	r6, r7, d0
 800507e:	00ec      	lsls	r4, r5, #3
 8005080:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8005084:	46aa      	mov	sl, r5
 8005086:	f1ba 0f00 	cmp.w	sl, #0
 800508a:	f280 80d6 	bge.w	800523a <__kernel_rem_pio2+0x472>
 800508e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80050e0 <__kernel_rem_pio2+0x318>
 8005092:	462e      	mov	r6, r5
 8005094:	2e00      	cmp	r6, #0
 8005096:	f2c0 8104 	blt.w	80052a2 <__kernel_rem_pio2+0x4da>
 800509a:	ab72      	add	r3, sp, #456	; 0x1c8
 800509c:	ed8d 8b06 	vstr	d8, [sp, #24]
 80050a0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005108 <__kernel_rem_pio2+0x340>
 80050a4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80050a8:	f04f 0800 	mov.w	r8, #0
 80050ac:	1baf      	subs	r7, r5, r6
 80050ae:	e0ea      	b.n	8005286 <__kernel_rem_pio2+0x4be>
 80050b0:	f04f 0b02 	mov.w	fp, #2
 80050b4:	e759      	b.n	8004f6a <__kernel_rem_pio2+0x1a2>
 80050b6:	f8d8 3000 	ldr.w	r3, [r8]
 80050ba:	b955      	cbnz	r5, 80050d2 <__kernel_rem_pio2+0x30a>
 80050bc:	b123      	cbz	r3, 80050c8 <__kernel_rem_pio2+0x300>
 80050be:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80050c2:	f8c8 3000 	str.w	r3, [r8]
 80050c6:	2301      	movs	r3, #1
 80050c8:	3201      	adds	r2, #1
 80050ca:	f108 0804 	add.w	r8, r8, #4
 80050ce:	461d      	mov	r5, r3
 80050d0:	e752      	b.n	8004f78 <__kernel_rem_pio2+0x1b0>
 80050d2:	1acb      	subs	r3, r1, r3
 80050d4:	f8c8 3000 	str.w	r3, [r8]
 80050d8:	462b      	mov	r3, r5
 80050da:	e7f5      	b.n	80050c8 <__kernel_rem_pio2+0x300>
 80050dc:	f3af 8000 	nop.w
	...
 80050ec:	3ff00000 	.word	0x3ff00000
 80050f0:	08005a00 	.word	0x08005a00
 80050f4:	40200000 	.word	0x40200000
 80050f8:	3ff00000 	.word	0x3ff00000
 80050fc:	3e700000 	.word	0x3e700000
 8005100:	41700000 	.word	0x41700000
 8005104:	3fe00000 	.word	0x3fe00000
 8005108:	080059c0 	.word	0x080059c0
 800510c:	1e62      	subs	r2, r4, #1
 800510e:	ab0e      	add	r3, sp, #56	; 0x38
 8005110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005114:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005118:	a90e      	add	r1, sp, #56	; 0x38
 800511a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800511e:	e739      	b.n	8004f94 <__kernel_rem_pio2+0x1cc>
 8005120:	1e62      	subs	r2, r4, #1
 8005122:	ab0e      	add	r3, sp, #56	; 0x38
 8005124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005128:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800512c:	e7f4      	b.n	8005118 <__kernel_rem_pio2+0x350>
 800512e:	a90e      	add	r1, sp, #56	; 0x38
 8005130:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005134:	3b01      	subs	r3, #1
 8005136:	430a      	orrs	r2, r1
 8005138:	e789      	b.n	800504e <__kernel_rem_pio2+0x286>
 800513a:	3301      	adds	r3, #1
 800513c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005140:	2900      	cmp	r1, #0
 8005142:	d0fa      	beq.n	800513a <__kernel_rem_pio2+0x372>
 8005144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005146:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800514a:	446a      	add	r2, sp
 800514c:	3a98      	subs	r2, #152	; 0x98
 800514e:	920a      	str	r2, [sp, #40]	; 0x28
 8005150:	9a08      	ldr	r2, [sp, #32]
 8005152:	18e3      	adds	r3, r4, r3
 8005154:	18a5      	adds	r5, r4, r2
 8005156:	aa22      	add	r2, sp, #136	; 0x88
 8005158:	f104 0801 	add.w	r8, r4, #1
 800515c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005160:	9304      	str	r3, [sp, #16]
 8005162:	9b04      	ldr	r3, [sp, #16]
 8005164:	4543      	cmp	r3, r8
 8005166:	da04      	bge.n	8005172 <__kernel_rem_pio2+0x3aa>
 8005168:	461c      	mov	r4, r3
 800516a:	e6a3      	b.n	8004eb4 <__kernel_rem_pio2+0xec>
 800516c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800516e:	2301      	movs	r3, #1
 8005170:	e7e4      	b.n	800513c <__kernel_rem_pio2+0x374>
 8005172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005174:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005178:	f7fb f980 	bl	800047c <__aeabi_i2d>
 800517c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005182:	46ab      	mov	fp, r5
 8005184:	461c      	mov	r4, r3
 8005186:	f04f 0900 	mov.w	r9, #0
 800518a:	2600      	movs	r6, #0
 800518c:	2700      	movs	r7, #0
 800518e:	9b06      	ldr	r3, [sp, #24]
 8005190:	4599      	cmp	r9, r3
 8005192:	dd06      	ble.n	80051a2 <__kernel_rem_pio2+0x3da>
 8005194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005196:	e8e3 6702 	strd	r6, r7, [r3], #8
 800519a:	f108 0801 	add.w	r8, r8, #1
 800519e:	930a      	str	r3, [sp, #40]	; 0x28
 80051a0:	e7df      	b.n	8005162 <__kernel_rem_pio2+0x39a>
 80051a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80051a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80051aa:	f7fb f9d1 	bl	8000550 <__aeabi_dmul>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4630      	mov	r0, r6
 80051b4:	4639      	mov	r1, r7
 80051b6:	f7fb f815 	bl	80001e4 <__adddf3>
 80051ba:	f109 0901 	add.w	r9, r9, #1
 80051be:	4606      	mov	r6, r0
 80051c0:	460f      	mov	r7, r1
 80051c2:	e7e4      	b.n	800518e <__kernel_rem_pio2+0x3c6>
 80051c4:	3d01      	subs	r5, #1
 80051c6:	e748      	b.n	800505a <__kernel_rem_pio2+0x292>
 80051c8:	ec47 6b10 	vmov	d0, r6, r7
 80051cc:	f1ca 0000 	rsb	r0, sl, #0
 80051d0:	f000 fa92 	bl	80056f8 <scalbn>
 80051d4:	ec57 6b10 	vmov	r6, r7, d0
 80051d8:	4ba0      	ldr	r3, [pc, #640]	; (800545c <__kernel_rem_pio2+0x694>)
 80051da:	ee10 0a10 	vmov	r0, s0
 80051de:	2200      	movs	r2, #0
 80051e0:	4639      	mov	r1, r7
 80051e2:	f7fb fc3b 	bl	8000a5c <__aeabi_dcmpge>
 80051e6:	b1f8      	cbz	r0, 8005228 <__kernel_rem_pio2+0x460>
 80051e8:	4b9d      	ldr	r3, [pc, #628]	; (8005460 <__kernel_rem_pio2+0x698>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	4630      	mov	r0, r6
 80051ee:	4639      	mov	r1, r7
 80051f0:	f7fb f9ae 	bl	8000550 <__aeabi_dmul>
 80051f4:	f7fb fc5c 	bl	8000ab0 <__aeabi_d2iz>
 80051f8:	4680      	mov	r8, r0
 80051fa:	f7fb f93f 	bl	800047c <__aeabi_i2d>
 80051fe:	4b97      	ldr	r3, [pc, #604]	; (800545c <__kernel_rem_pio2+0x694>)
 8005200:	2200      	movs	r2, #0
 8005202:	f7fb f9a5 	bl	8000550 <__aeabi_dmul>
 8005206:	460b      	mov	r3, r1
 8005208:	4602      	mov	r2, r0
 800520a:	4639      	mov	r1, r7
 800520c:	4630      	mov	r0, r6
 800520e:	f7fa ffe7 	bl	80001e0 <__aeabi_dsub>
 8005212:	f7fb fc4d 	bl	8000ab0 <__aeabi_d2iz>
 8005216:	1c65      	adds	r5, r4, #1
 8005218:	ab0e      	add	r3, sp, #56	; 0x38
 800521a:	f10a 0a18 	add.w	sl, sl, #24
 800521e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005222:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005226:	e720      	b.n	800506a <__kernel_rem_pio2+0x2a2>
 8005228:	4630      	mov	r0, r6
 800522a:	4639      	mov	r1, r7
 800522c:	f7fb fc40 	bl	8000ab0 <__aeabi_d2iz>
 8005230:	ab0e      	add	r3, sp, #56	; 0x38
 8005232:	4625      	mov	r5, r4
 8005234:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005238:	e717      	b.n	800506a <__kernel_rem_pio2+0x2a2>
 800523a:	ab0e      	add	r3, sp, #56	; 0x38
 800523c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005240:	f7fb f91c 	bl	800047c <__aeabi_i2d>
 8005244:	4632      	mov	r2, r6
 8005246:	463b      	mov	r3, r7
 8005248:	f7fb f982 	bl	8000550 <__aeabi_dmul>
 800524c:	4b84      	ldr	r3, [pc, #528]	; (8005460 <__kernel_rem_pio2+0x698>)
 800524e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005252:	2200      	movs	r2, #0
 8005254:	4630      	mov	r0, r6
 8005256:	4639      	mov	r1, r7
 8005258:	f7fb f97a 	bl	8000550 <__aeabi_dmul>
 800525c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005260:	4606      	mov	r6, r0
 8005262:	460f      	mov	r7, r1
 8005264:	e70f      	b.n	8005086 <__kernel_rem_pio2+0x2be>
 8005266:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800526a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800526e:	f7fb f96f 	bl	8000550 <__aeabi_dmul>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800527a:	f7fa ffb3 	bl	80001e4 <__adddf3>
 800527e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005282:	f108 0801 	add.w	r8, r8, #1
 8005286:	9b02      	ldr	r3, [sp, #8]
 8005288:	4598      	cmp	r8, r3
 800528a:	dc01      	bgt.n	8005290 <__kernel_rem_pio2+0x4c8>
 800528c:	45b8      	cmp	r8, r7
 800528e:	ddea      	ble.n	8005266 <__kernel_rem_pio2+0x49e>
 8005290:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005294:	ab4a      	add	r3, sp, #296	; 0x128
 8005296:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800529a:	ed87 7b00 	vstr	d7, [r7]
 800529e:	3e01      	subs	r6, #1
 80052a0:	e6f8      	b.n	8005094 <__kernel_rem_pio2+0x2cc>
 80052a2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	dc0b      	bgt.n	80052c0 <__kernel_rem_pio2+0x4f8>
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	dc35      	bgt.n	8005318 <__kernel_rem_pio2+0x550>
 80052ac:	d059      	beq.n	8005362 <__kernel_rem_pio2+0x59a>
 80052ae:	9b04      	ldr	r3, [sp, #16]
 80052b0:	f003 0007 	and.w	r0, r3, #7
 80052b4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80052b8:	ecbd 8b02 	vpop	{d8}
 80052bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80052c2:	2b03      	cmp	r3, #3
 80052c4:	d1f3      	bne.n	80052ae <__kernel_rem_pio2+0x4e6>
 80052c6:	ab4a      	add	r3, sp, #296	; 0x128
 80052c8:	4423      	add	r3, r4
 80052ca:	9306      	str	r3, [sp, #24]
 80052cc:	461c      	mov	r4, r3
 80052ce:	469a      	mov	sl, r3
 80052d0:	9502      	str	r5, [sp, #8]
 80052d2:	9b02      	ldr	r3, [sp, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f1aa 0a08 	sub.w	sl, sl, #8
 80052da:	dc6b      	bgt.n	80053b4 <__kernel_rem_pio2+0x5ec>
 80052dc:	46aa      	mov	sl, r5
 80052de:	f1ba 0f01 	cmp.w	sl, #1
 80052e2:	f1a4 0408 	sub.w	r4, r4, #8
 80052e6:	f300 8085 	bgt.w	80053f4 <__kernel_rem_pio2+0x62c>
 80052ea:	9c06      	ldr	r4, [sp, #24]
 80052ec:	2000      	movs	r0, #0
 80052ee:	3408      	adds	r4, #8
 80052f0:	2100      	movs	r1, #0
 80052f2:	2d01      	cmp	r5, #1
 80052f4:	f300 809d 	bgt.w	8005432 <__kernel_rem_pio2+0x66a>
 80052f8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80052fc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005300:	f1bb 0f00 	cmp.w	fp, #0
 8005304:	f040 809b 	bne.w	800543e <__kernel_rem_pio2+0x676>
 8005308:	9b01      	ldr	r3, [sp, #4]
 800530a:	e9c3 5600 	strd	r5, r6, [r3]
 800530e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005312:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005316:	e7ca      	b.n	80052ae <__kernel_rem_pio2+0x4e6>
 8005318:	3408      	adds	r4, #8
 800531a:	ab4a      	add	r3, sp, #296	; 0x128
 800531c:	441c      	add	r4, r3
 800531e:	462e      	mov	r6, r5
 8005320:	2000      	movs	r0, #0
 8005322:	2100      	movs	r1, #0
 8005324:	2e00      	cmp	r6, #0
 8005326:	da36      	bge.n	8005396 <__kernel_rem_pio2+0x5ce>
 8005328:	f1bb 0f00 	cmp.w	fp, #0
 800532c:	d039      	beq.n	80053a2 <__kernel_rem_pio2+0x5da>
 800532e:	4602      	mov	r2, r0
 8005330:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005334:	9c01      	ldr	r4, [sp, #4]
 8005336:	e9c4 2300 	strd	r2, r3, [r4]
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005342:	f7fa ff4d 	bl	80001e0 <__aeabi_dsub>
 8005346:	ae4c      	add	r6, sp, #304	; 0x130
 8005348:	2401      	movs	r4, #1
 800534a:	42a5      	cmp	r5, r4
 800534c:	da2c      	bge.n	80053a8 <__kernel_rem_pio2+0x5e0>
 800534e:	f1bb 0f00 	cmp.w	fp, #0
 8005352:	d002      	beq.n	800535a <__kernel_rem_pio2+0x592>
 8005354:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005358:	4619      	mov	r1, r3
 800535a:	9b01      	ldr	r3, [sp, #4]
 800535c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005360:	e7a5      	b.n	80052ae <__kernel_rem_pio2+0x4e6>
 8005362:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8005366:	eb0d 0403 	add.w	r4, sp, r3
 800536a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800536e:	2000      	movs	r0, #0
 8005370:	2100      	movs	r1, #0
 8005372:	2d00      	cmp	r5, #0
 8005374:	da09      	bge.n	800538a <__kernel_rem_pio2+0x5c2>
 8005376:	f1bb 0f00 	cmp.w	fp, #0
 800537a:	d002      	beq.n	8005382 <__kernel_rem_pio2+0x5ba>
 800537c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005380:	4619      	mov	r1, r3
 8005382:	9b01      	ldr	r3, [sp, #4]
 8005384:	e9c3 0100 	strd	r0, r1, [r3]
 8005388:	e791      	b.n	80052ae <__kernel_rem_pio2+0x4e6>
 800538a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800538e:	f7fa ff29 	bl	80001e4 <__adddf3>
 8005392:	3d01      	subs	r5, #1
 8005394:	e7ed      	b.n	8005372 <__kernel_rem_pio2+0x5aa>
 8005396:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800539a:	f7fa ff23 	bl	80001e4 <__adddf3>
 800539e:	3e01      	subs	r6, #1
 80053a0:	e7c0      	b.n	8005324 <__kernel_rem_pio2+0x55c>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	e7c5      	b.n	8005334 <__kernel_rem_pio2+0x56c>
 80053a8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80053ac:	f7fa ff1a 	bl	80001e4 <__adddf3>
 80053b0:	3401      	adds	r4, #1
 80053b2:	e7ca      	b.n	800534a <__kernel_rem_pio2+0x582>
 80053b4:	e9da 8900 	ldrd	r8, r9, [sl]
 80053b8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80053bc:	9b02      	ldr	r3, [sp, #8]
 80053be:	3b01      	subs	r3, #1
 80053c0:	9302      	str	r3, [sp, #8]
 80053c2:	4632      	mov	r2, r6
 80053c4:	463b      	mov	r3, r7
 80053c6:	4640      	mov	r0, r8
 80053c8:	4649      	mov	r1, r9
 80053ca:	f7fa ff0b 	bl	80001e4 <__adddf3>
 80053ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4640      	mov	r0, r8
 80053d8:	4649      	mov	r1, r9
 80053da:	f7fa ff01 	bl	80001e0 <__aeabi_dsub>
 80053de:	4632      	mov	r2, r6
 80053e0:	463b      	mov	r3, r7
 80053e2:	f7fa feff 	bl	80001e4 <__adddf3>
 80053e6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80053ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80053ee:	ed8a 7b00 	vstr	d7, [sl]
 80053f2:	e76e      	b.n	80052d2 <__kernel_rem_pio2+0x50a>
 80053f4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80053f8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80053fc:	4640      	mov	r0, r8
 80053fe:	4632      	mov	r2, r6
 8005400:	463b      	mov	r3, r7
 8005402:	4649      	mov	r1, r9
 8005404:	f7fa feee 	bl	80001e4 <__adddf3>
 8005408:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4640      	mov	r0, r8
 8005412:	4649      	mov	r1, r9
 8005414:	f7fa fee4 	bl	80001e0 <__aeabi_dsub>
 8005418:	4632      	mov	r2, r6
 800541a:	463b      	mov	r3, r7
 800541c:	f7fa fee2 	bl	80001e4 <__adddf3>
 8005420:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005424:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005428:	ed84 7b00 	vstr	d7, [r4]
 800542c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005430:	e755      	b.n	80052de <__kernel_rem_pio2+0x516>
 8005432:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005436:	f7fa fed5 	bl	80001e4 <__adddf3>
 800543a:	3d01      	subs	r5, #1
 800543c:	e759      	b.n	80052f2 <__kernel_rem_pio2+0x52a>
 800543e:	9b01      	ldr	r3, [sp, #4]
 8005440:	9a01      	ldr	r2, [sp, #4]
 8005442:	601d      	str	r5, [r3, #0]
 8005444:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005448:	605c      	str	r4, [r3, #4]
 800544a:	609f      	str	r7, [r3, #8]
 800544c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005450:	60d3      	str	r3, [r2, #12]
 8005452:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005456:	6110      	str	r0, [r2, #16]
 8005458:	6153      	str	r3, [r2, #20]
 800545a:	e728      	b.n	80052ae <__kernel_rem_pio2+0x4e6>
 800545c:	41700000 	.word	0x41700000
 8005460:	3e700000 	.word	0x3e700000
 8005464:	00000000 	.word	0x00000000

08005468 <__kernel_sin>:
 8005468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800546c:	ed2d 8b04 	vpush	{d8-d9}
 8005470:	eeb0 8a41 	vmov.f32	s16, s2
 8005474:	eef0 8a61 	vmov.f32	s17, s3
 8005478:	ec55 4b10 	vmov	r4, r5, d0
 800547c:	b083      	sub	sp, #12
 800547e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005482:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005486:	9001      	str	r0, [sp, #4]
 8005488:	da06      	bge.n	8005498 <__kernel_sin+0x30>
 800548a:	ee10 0a10 	vmov	r0, s0
 800548e:	4629      	mov	r1, r5
 8005490:	f7fb fb0e 	bl	8000ab0 <__aeabi_d2iz>
 8005494:	2800      	cmp	r0, #0
 8005496:	d051      	beq.n	800553c <__kernel_sin+0xd4>
 8005498:	4622      	mov	r2, r4
 800549a:	462b      	mov	r3, r5
 800549c:	4620      	mov	r0, r4
 800549e:	4629      	mov	r1, r5
 80054a0:	f7fb f856 	bl	8000550 <__aeabi_dmul>
 80054a4:	4682      	mov	sl, r0
 80054a6:	468b      	mov	fp, r1
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4620      	mov	r0, r4
 80054ae:	4629      	mov	r1, r5
 80054b0:	f7fb f84e 	bl	8000550 <__aeabi_dmul>
 80054b4:	a341      	add	r3, pc, #260	; (adr r3, 80055bc <__kernel_sin+0x154>)
 80054b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ba:	4680      	mov	r8, r0
 80054bc:	4689      	mov	r9, r1
 80054be:	4650      	mov	r0, sl
 80054c0:	4659      	mov	r1, fp
 80054c2:	f7fb f845 	bl	8000550 <__aeabi_dmul>
 80054c6:	a33f      	add	r3, pc, #252	; (adr r3, 80055c4 <__kernel_sin+0x15c>)
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	f7fa fe88 	bl	80001e0 <__aeabi_dsub>
 80054d0:	4652      	mov	r2, sl
 80054d2:	465b      	mov	r3, fp
 80054d4:	f7fb f83c 	bl	8000550 <__aeabi_dmul>
 80054d8:	a33c      	add	r3, pc, #240	; (adr r3, 80055cc <__kernel_sin+0x164>)
 80054da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054de:	f7fa fe81 	bl	80001e4 <__adddf3>
 80054e2:	4652      	mov	r2, sl
 80054e4:	465b      	mov	r3, fp
 80054e6:	f7fb f833 	bl	8000550 <__aeabi_dmul>
 80054ea:	a33a      	add	r3, pc, #232	; (adr r3, 80055d4 <__kernel_sin+0x16c>)
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	f7fa fe76 	bl	80001e0 <__aeabi_dsub>
 80054f4:	4652      	mov	r2, sl
 80054f6:	465b      	mov	r3, fp
 80054f8:	f7fb f82a 	bl	8000550 <__aeabi_dmul>
 80054fc:	a337      	add	r3, pc, #220	; (adr r3, 80055dc <__kernel_sin+0x174>)
 80054fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005502:	f7fa fe6f 	bl	80001e4 <__adddf3>
 8005506:	9b01      	ldr	r3, [sp, #4]
 8005508:	4606      	mov	r6, r0
 800550a:	460f      	mov	r7, r1
 800550c:	b9eb      	cbnz	r3, 800554a <__kernel_sin+0xe2>
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	4650      	mov	r0, sl
 8005514:	4659      	mov	r1, fp
 8005516:	f7fb f81b 	bl	8000550 <__aeabi_dmul>
 800551a:	a325      	add	r3, pc, #148	; (adr r3, 80055b0 <__kernel_sin+0x148>)
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	f7fa fe5e 	bl	80001e0 <__aeabi_dsub>
 8005524:	4642      	mov	r2, r8
 8005526:	464b      	mov	r3, r9
 8005528:	f7fb f812 	bl	8000550 <__aeabi_dmul>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4620      	mov	r0, r4
 8005532:	4629      	mov	r1, r5
 8005534:	f7fa fe56 	bl	80001e4 <__adddf3>
 8005538:	4604      	mov	r4, r0
 800553a:	460d      	mov	r5, r1
 800553c:	ec45 4b10 	vmov	d0, r4, r5
 8005540:	b003      	add	sp, #12
 8005542:	ecbd 8b04 	vpop	{d8-d9}
 8005546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800554a:	4b1b      	ldr	r3, [pc, #108]	; (80055b8 <__kernel_sin+0x150>)
 800554c:	ec51 0b18 	vmov	r0, r1, d8
 8005550:	2200      	movs	r2, #0
 8005552:	f7fa fffd 	bl	8000550 <__aeabi_dmul>
 8005556:	4632      	mov	r2, r6
 8005558:	ec41 0b19 	vmov	d9, r0, r1
 800555c:	463b      	mov	r3, r7
 800555e:	4640      	mov	r0, r8
 8005560:	4649      	mov	r1, r9
 8005562:	f7fa fff5 	bl	8000550 <__aeabi_dmul>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	ec51 0b19 	vmov	r0, r1, d9
 800556e:	f7fa fe37 	bl	80001e0 <__aeabi_dsub>
 8005572:	4652      	mov	r2, sl
 8005574:	465b      	mov	r3, fp
 8005576:	f7fa ffeb 	bl	8000550 <__aeabi_dmul>
 800557a:	ec53 2b18 	vmov	r2, r3, d8
 800557e:	f7fa fe2f 	bl	80001e0 <__aeabi_dsub>
 8005582:	a30b      	add	r3, pc, #44	; (adr r3, 80055b0 <__kernel_sin+0x148>)
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	4606      	mov	r6, r0
 800558a:	460f      	mov	r7, r1
 800558c:	4640      	mov	r0, r8
 800558e:	4649      	mov	r1, r9
 8005590:	f7fa ffde 	bl	8000550 <__aeabi_dmul>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	4630      	mov	r0, r6
 800559a:	4639      	mov	r1, r7
 800559c:	f7fa fe22 	bl	80001e4 <__adddf3>
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4620      	mov	r0, r4
 80055a6:	4629      	mov	r1, r5
 80055a8:	f7fa fe1a 	bl	80001e0 <__aeabi_dsub>
 80055ac:	e7c4      	b.n	8005538 <__kernel_sin+0xd0>
 80055ae:	bf00      	nop
 80055b0:	55555549 	.word	0x55555549
 80055b4:	3fc55555 	.word	0x3fc55555
 80055b8:	3fe00000 	.word	0x3fe00000
 80055bc:	5acfd57c 	.word	0x5acfd57c
 80055c0:	3de5d93a 	.word	0x3de5d93a
 80055c4:	8a2b9ceb 	.word	0x8a2b9ceb
 80055c8:	3e5ae5e6 	.word	0x3e5ae5e6
 80055cc:	57b1fe7d 	.word	0x57b1fe7d
 80055d0:	3ec71de3 	.word	0x3ec71de3
 80055d4:	19c161d5 	.word	0x19c161d5
 80055d8:	3f2a01a0 	.word	0x3f2a01a0
 80055dc:	1110f8a6 	.word	0x1110f8a6
 80055e0:	3f811111 	.word	0x3f811111

080055e4 <fabs>:
 80055e4:	ec51 0b10 	vmov	r0, r1, d0
 80055e8:	ee10 2a10 	vmov	r2, s0
 80055ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80055f0:	ec43 2b10 	vmov	d0, r2, r3
 80055f4:	4770      	bx	lr
	...

080055f8 <floor>:
 80055f8:	ec51 0b10 	vmov	r0, r1, d0
 80055fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005600:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005604:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005608:	2e13      	cmp	r6, #19
 800560a:	ee10 5a10 	vmov	r5, s0
 800560e:	ee10 8a10 	vmov	r8, s0
 8005612:	460c      	mov	r4, r1
 8005614:	dc32      	bgt.n	800567c <floor+0x84>
 8005616:	2e00      	cmp	r6, #0
 8005618:	da14      	bge.n	8005644 <floor+0x4c>
 800561a:	a333      	add	r3, pc, #204	; (adr r3, 80056e8 <floor+0xf0>)
 800561c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005620:	f7fa fde0 	bl	80001e4 <__adddf3>
 8005624:	2200      	movs	r2, #0
 8005626:	2300      	movs	r3, #0
 8005628:	f7fb fa22 	bl	8000a70 <__aeabi_dcmpgt>
 800562c:	b138      	cbz	r0, 800563e <floor+0x46>
 800562e:	2c00      	cmp	r4, #0
 8005630:	da57      	bge.n	80056e2 <floor+0xea>
 8005632:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005636:	431d      	orrs	r5, r3
 8005638:	d001      	beq.n	800563e <floor+0x46>
 800563a:	4c2d      	ldr	r4, [pc, #180]	; (80056f0 <floor+0xf8>)
 800563c:	2500      	movs	r5, #0
 800563e:	4621      	mov	r1, r4
 8005640:	4628      	mov	r0, r5
 8005642:	e025      	b.n	8005690 <floor+0x98>
 8005644:	4f2b      	ldr	r7, [pc, #172]	; (80056f4 <floor+0xfc>)
 8005646:	4137      	asrs	r7, r6
 8005648:	ea01 0307 	and.w	r3, r1, r7
 800564c:	4303      	orrs	r3, r0
 800564e:	d01f      	beq.n	8005690 <floor+0x98>
 8005650:	a325      	add	r3, pc, #148	; (adr r3, 80056e8 <floor+0xf0>)
 8005652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005656:	f7fa fdc5 	bl	80001e4 <__adddf3>
 800565a:	2200      	movs	r2, #0
 800565c:	2300      	movs	r3, #0
 800565e:	f7fb fa07 	bl	8000a70 <__aeabi_dcmpgt>
 8005662:	2800      	cmp	r0, #0
 8005664:	d0eb      	beq.n	800563e <floor+0x46>
 8005666:	2c00      	cmp	r4, #0
 8005668:	bfbe      	ittt	lt
 800566a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800566e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005672:	19a4      	addlt	r4, r4, r6
 8005674:	ea24 0407 	bic.w	r4, r4, r7
 8005678:	2500      	movs	r5, #0
 800567a:	e7e0      	b.n	800563e <floor+0x46>
 800567c:	2e33      	cmp	r6, #51	; 0x33
 800567e:	dd0b      	ble.n	8005698 <floor+0xa0>
 8005680:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005684:	d104      	bne.n	8005690 <floor+0x98>
 8005686:	ee10 2a10 	vmov	r2, s0
 800568a:	460b      	mov	r3, r1
 800568c:	f7fa fdaa 	bl	80001e4 <__adddf3>
 8005690:	ec41 0b10 	vmov	d0, r0, r1
 8005694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005698:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800569c:	f04f 33ff 	mov.w	r3, #4294967295
 80056a0:	fa23 f707 	lsr.w	r7, r3, r7
 80056a4:	4207      	tst	r7, r0
 80056a6:	d0f3      	beq.n	8005690 <floor+0x98>
 80056a8:	a30f      	add	r3, pc, #60	; (adr r3, 80056e8 <floor+0xf0>)
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	f7fa fd99 	bl	80001e4 <__adddf3>
 80056b2:	2200      	movs	r2, #0
 80056b4:	2300      	movs	r3, #0
 80056b6:	f7fb f9db 	bl	8000a70 <__aeabi_dcmpgt>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d0bf      	beq.n	800563e <floor+0x46>
 80056be:	2c00      	cmp	r4, #0
 80056c0:	da02      	bge.n	80056c8 <floor+0xd0>
 80056c2:	2e14      	cmp	r6, #20
 80056c4:	d103      	bne.n	80056ce <floor+0xd6>
 80056c6:	3401      	adds	r4, #1
 80056c8:	ea25 0507 	bic.w	r5, r5, r7
 80056cc:	e7b7      	b.n	800563e <floor+0x46>
 80056ce:	2301      	movs	r3, #1
 80056d0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80056d4:	fa03 f606 	lsl.w	r6, r3, r6
 80056d8:	4435      	add	r5, r6
 80056da:	4545      	cmp	r5, r8
 80056dc:	bf38      	it	cc
 80056de:	18e4      	addcc	r4, r4, r3
 80056e0:	e7f2      	b.n	80056c8 <floor+0xd0>
 80056e2:	2500      	movs	r5, #0
 80056e4:	462c      	mov	r4, r5
 80056e6:	e7aa      	b.n	800563e <floor+0x46>
 80056e8:	8800759c 	.word	0x8800759c
 80056ec:	7e37e43c 	.word	0x7e37e43c
 80056f0:	bff00000 	.word	0xbff00000
 80056f4:	000fffff 	.word	0x000fffff

080056f8 <scalbn>:
 80056f8:	b570      	push	{r4, r5, r6, lr}
 80056fa:	ec55 4b10 	vmov	r4, r5, d0
 80056fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005702:	4606      	mov	r6, r0
 8005704:	462b      	mov	r3, r5
 8005706:	b99a      	cbnz	r2, 8005730 <scalbn+0x38>
 8005708:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800570c:	4323      	orrs	r3, r4
 800570e:	d036      	beq.n	800577e <scalbn+0x86>
 8005710:	4b39      	ldr	r3, [pc, #228]	; (80057f8 <scalbn+0x100>)
 8005712:	4629      	mov	r1, r5
 8005714:	ee10 0a10 	vmov	r0, s0
 8005718:	2200      	movs	r2, #0
 800571a:	f7fa ff19 	bl	8000550 <__aeabi_dmul>
 800571e:	4b37      	ldr	r3, [pc, #220]	; (80057fc <scalbn+0x104>)
 8005720:	429e      	cmp	r6, r3
 8005722:	4604      	mov	r4, r0
 8005724:	460d      	mov	r5, r1
 8005726:	da10      	bge.n	800574a <scalbn+0x52>
 8005728:	a32b      	add	r3, pc, #172	; (adr r3, 80057d8 <scalbn+0xe0>)
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	e03a      	b.n	80057a6 <scalbn+0xae>
 8005730:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005734:	428a      	cmp	r2, r1
 8005736:	d10c      	bne.n	8005752 <scalbn+0x5a>
 8005738:	ee10 2a10 	vmov	r2, s0
 800573c:	4620      	mov	r0, r4
 800573e:	4629      	mov	r1, r5
 8005740:	f7fa fd50 	bl	80001e4 <__adddf3>
 8005744:	4604      	mov	r4, r0
 8005746:	460d      	mov	r5, r1
 8005748:	e019      	b.n	800577e <scalbn+0x86>
 800574a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800574e:	460b      	mov	r3, r1
 8005750:	3a36      	subs	r2, #54	; 0x36
 8005752:	4432      	add	r2, r6
 8005754:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005758:	428a      	cmp	r2, r1
 800575a:	dd08      	ble.n	800576e <scalbn+0x76>
 800575c:	2d00      	cmp	r5, #0
 800575e:	a120      	add	r1, pc, #128	; (adr r1, 80057e0 <scalbn+0xe8>)
 8005760:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005764:	da1c      	bge.n	80057a0 <scalbn+0xa8>
 8005766:	a120      	add	r1, pc, #128	; (adr r1, 80057e8 <scalbn+0xf0>)
 8005768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800576c:	e018      	b.n	80057a0 <scalbn+0xa8>
 800576e:	2a00      	cmp	r2, #0
 8005770:	dd08      	ble.n	8005784 <scalbn+0x8c>
 8005772:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005776:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800577a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800577e:	ec45 4b10 	vmov	d0, r4, r5
 8005782:	bd70      	pop	{r4, r5, r6, pc}
 8005784:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005788:	da19      	bge.n	80057be <scalbn+0xc6>
 800578a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800578e:	429e      	cmp	r6, r3
 8005790:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005794:	dd0a      	ble.n	80057ac <scalbn+0xb4>
 8005796:	a112      	add	r1, pc, #72	; (adr r1, 80057e0 <scalbn+0xe8>)
 8005798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1e2      	bne.n	8005766 <scalbn+0x6e>
 80057a0:	a30f      	add	r3, pc, #60	; (adr r3, 80057e0 <scalbn+0xe8>)
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	f7fa fed3 	bl	8000550 <__aeabi_dmul>
 80057aa:	e7cb      	b.n	8005744 <scalbn+0x4c>
 80057ac:	a10a      	add	r1, pc, #40	; (adr r1, 80057d8 <scalbn+0xe0>)
 80057ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0b8      	beq.n	8005728 <scalbn+0x30>
 80057b6:	a10e      	add	r1, pc, #56	; (adr r1, 80057f0 <scalbn+0xf8>)
 80057b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057bc:	e7b4      	b.n	8005728 <scalbn+0x30>
 80057be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80057c2:	3236      	adds	r2, #54	; 0x36
 80057c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80057c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80057cc:	4620      	mov	r0, r4
 80057ce:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <scalbn+0x108>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	e7e8      	b.n	80057a6 <scalbn+0xae>
 80057d4:	f3af 8000 	nop.w
 80057d8:	c2f8f359 	.word	0xc2f8f359
 80057dc:	01a56e1f 	.word	0x01a56e1f
 80057e0:	8800759c 	.word	0x8800759c
 80057e4:	7e37e43c 	.word	0x7e37e43c
 80057e8:	8800759c 	.word	0x8800759c
 80057ec:	fe37e43c 	.word	0xfe37e43c
 80057f0:	c2f8f359 	.word	0xc2f8f359
 80057f4:	81a56e1f 	.word	0x81a56e1f
 80057f8:	43500000 	.word	0x43500000
 80057fc:	ffff3cb0 	.word	0xffff3cb0
 8005800:	3c900000 	.word	0x3c900000

08005804 <_init>:
 8005804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005806:	bf00      	nop
 8005808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800580a:	bc08      	pop	{r3}
 800580c:	469e      	mov	lr, r3
 800580e:	4770      	bx	lr

08005810 <_fini>:
 8005810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005812:	bf00      	nop
 8005814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005816:	bc08      	pop	{r3}
 8005818:	469e      	mov	lr, r3
 800581a:	4770      	bx	lr
