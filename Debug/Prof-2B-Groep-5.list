
Prof-2B-Groep-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005604  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  080057a0  080057a0  000157a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b8  080059b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080059b8  080059b8  000159b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059c0  080059c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c0  080059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059c4  080059c4  000159c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080059c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  20000070  08005a38  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  08005a38  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a4b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b2  00000000  00000000  00030aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00032ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  00033aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002130  00000000  00000000  000348e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110ed  00000000  00000000  00036a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009af36  00000000  00000000  00047b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2a3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c4  00000000  00000000  000e2a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005784 	.word	0x08005784

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08005784 	.word	0x08005784

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b974 	b.w	8000ea0 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468e      	mov	lr, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4694      	mov	ip, r2
 8000be2:	d969      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b152      	cbz	r2, 8000c00 <__udivmoddi4+0x30>
 8000bea:	fa01 f302 	lsl.w	r3, r1, r2
 8000bee:	f1c2 0120 	rsb	r1, r2, #32
 8000bf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c04:	0c21      	lsrs	r1, r4, #16
 8000c06:	fbbe f6f8 	udiv	r6, lr, r8
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c16:	fb06 f107 	mul.w	r1, r6, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c26:	f080 811f 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 811c 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 f707 	mul.w	r7, r0, r7
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	f080 810a 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c58:	42a7      	cmp	r7, r4
 8000c5a:	f240 8107 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c66:	1be4      	subs	r4, r4, r7
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80ef 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c84:	2600      	movs	r6, #0
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f683 	clz	r6, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80f9 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	469e      	mov	lr, r3
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000cb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8092 	bne.w	8000dea <__udivmoddi4+0x21a>
 8000cc6:	eba1 010c 	sub.w	r1, r1, ip
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cda:	fb07 1113 	mls	r1, r7, r3, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1110 	mls	r1, r7, r0, r1
 8000d08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d24:	4608      	mov	r0, r1
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79c      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000d30:	f1c6 0720 	rsb	r7, r6, #32
 8000d34:	40b3      	lsls	r3, r6
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d42:	fa01 f306 	lsl.w	r3, r1, r6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	40f9      	lsrs	r1, r7
 8000d4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d56:	0c20      	lsrs	r0, r4, #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	fb08 f00e 	mul.w	r0, r8, lr
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d90:	fb09 1110 	mls	r1, r9, r0, r1
 8000d94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	458e      	cmp	lr, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dba:	eba1 010e 	sub.w	r1, r1, lr
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46a6      	mov	lr, r4
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x212>
 8000dca:	ebb3 0208 	subs.w	r2, r3, r8
 8000dce:	eb61 010e 	sbc.w	r1, r1, lr
 8000dd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dda:	40f1      	lsrs	r1, r6
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	e9c5 7100 	strd	r7, r1, [r5]
 8000de2:	2600      	movs	r6, #0
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa21 f303 	lsr.w	r3, r1, r3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e08:	fb07 3610 	mls	r6, r7, r0, r3
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e12:	fb00 f60e 	mul.w	r6, r0, lr
 8000e16:	429e      	cmp	r6, r3
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	429e      	cmp	r6, r3
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1b9b      	subs	r3, r3, r6
 8000e32:	b289      	uxth	r1, r1
 8000e34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e38:	fb07 3316 	mls	r3, r7, r6, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb06 f30e 	mul.w	r3, r6, lr
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3e02      	subs	r6, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	462e      	mov	r6, r5
 8000e64:	4628      	mov	r0, r5
 8000e66:	e705      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	e6e3      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f8      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4646      	mov	r6, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4620      	mov	r0, r4
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	3b02      	subs	r3, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e709      	b.n	8000cae <__udivmoddi4+0xde>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x156>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	0000      	movs	r0, r0
	...

08000ea8 <dft>:
	  float ImX[buffersize/2];// imaginaire deel van x
	  float AmpX[buffersize/2];// amplitude van x


float dft(int k)
{
 8000ea8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
	for (j=0; j<(buffersize/2);j++)
 8000eb2:	4b9d      	ldr	r3, [pc, #628]	; (8001128 <dft+0x280>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	e014      	b.n	8000ee4 <dft+0x3c>
	{
		ReX[j]=0;
 8000eba:	4b9b      	ldr	r3, [pc, #620]	; (8001128 <dft+0x280>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a9b      	ldr	r2, [pc, #620]	; (800112c <dft+0x284>)
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
		ImX[j]=0;
 8000eca:	4b97      	ldr	r3, [pc, #604]	; (8001128 <dft+0x280>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a98      	ldr	r2, [pc, #608]	; (8001130 <dft+0x288>)
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	f04f 0200 	mov.w	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
	for (j=0; j<(buffersize/2);j++)
 8000eda:	4b93      	ldr	r3, [pc, #588]	; (8001128 <dft+0x280>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a91      	ldr	r2, [pc, #580]	; (8001128 <dft+0x280>)
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4b90      	ldr	r3, [pc, #576]	; (8001128 <dft+0x280>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b3f      	cmp	r3, #63	; 0x3f
 8000eea:	dde6      	ble.n	8000eba <dft+0x12>
	}

		  for (n=0 ; n<(buffersize-1) ; n++)
 8000eec:	4b91      	ldr	r3, [pc, #580]	; (8001134 <dft+0x28c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	e0ae      	b.n	8001052 <dft+0x1aa>
		  {
			  ReX[k] = ReX[k] + buffer[n] * cos(n * k * M_PI * 2 / buffersize);
 8000ef4:	4a8d      	ldr	r2, [pc, #564]	; (800112c <dft+0x284>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff face 	bl	80004a0 <__aeabi_f2d>
 8000f04:	4604      	mov	r4, r0
 8000f06:	460d      	mov	r5, r1
 8000f08:	4b8a      	ldr	r3, [pc, #552]	; (8001134 <dft+0x28c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a8a      	ldr	r2, [pc, #552]	; (8001138 <dft+0x290>)
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fac3 	bl	80004a0 <__aeabi_f2d>
 8000f1a:	4680      	mov	r8, r0
 8000f1c:	4689      	mov	r9, r1
 8000f1e:	4b85      	ldr	r3, [pc, #532]	; (8001134 <dft+0x28c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	fb02 f303 	mul.w	r3, r2, r3
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff faa7 	bl	800047c <__aeabi_i2d>
 8000f2e:	a37c      	add	r3, pc, #496	; (adr r3, 8001120 <dft+0x278>)
 8000f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f34:	f7ff fb0c 	bl	8000550 <__aeabi_dmul>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	f7ff f94e 	bl	80001e4 <__adddf3>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	4b79      	ldr	r3, [pc, #484]	; (800113c <dft+0x294>)
 8000f56:	f7ff fc25 	bl	80007a4 <__aeabi_ddiv>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	ec43 2b17 	vmov	d7, r2, r3
 8000f62:	eeb0 0a47 	vmov.f32	s0, s14
 8000f66:	eef0 0a67 	vmov.f32	s1, s15
 8000f6a:	f003 fa8d 	bl	8004488 <cos>
 8000f6e:	ec53 2b10 	vmov	r2, r3, d0
 8000f72:	4640      	mov	r0, r8
 8000f74:	4649      	mov	r1, r9
 8000f76:	f7ff faeb 	bl	8000550 <__aeabi_dmul>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4620      	mov	r0, r4
 8000f80:	4629      	mov	r1, r5
 8000f82:	f7ff f92f 	bl	80001e4 <__adddf3>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f7ff fdb7 	bl	8000b00 <__aeabi_d2f>
 8000f92:	4602      	mov	r2, r0
 8000f94:	4965      	ldr	r1, [pc, #404]	; (800112c <dft+0x284>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	601a      	str	r2, [r3, #0]
			  ImX[k] = ImX[k] - buffer[n] * sin(n * k * M_PI * 2 / buffersize);
 8000f9e:	4a64      	ldr	r2, [pc, #400]	; (8001130 <dft+0x288>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fa79 	bl	80004a0 <__aeabi_f2d>
 8000fae:	4604      	mov	r4, r0
 8000fb0:	460d      	mov	r5, r1
 8000fb2:	4b60      	ldr	r3, [pc, #384]	; (8001134 <dft+0x28c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a60      	ldr	r2, [pc, #384]	; (8001138 <dft+0x290>)
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fa6e 	bl	80004a0 <__aeabi_f2d>
 8000fc4:	4680      	mov	r8, r0
 8000fc6:	4689      	mov	r9, r1
 8000fc8:	4b5a      	ldr	r3, [pc, #360]	; (8001134 <dft+0x28c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	fb02 f303 	mul.w	r3, r2, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fa52 	bl	800047c <__aeabi_i2d>
 8000fd8:	a351      	add	r3, pc, #324	; (adr r3, 8001120 <dft+0x278>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fab7 	bl	8000550 <__aeabi_dmul>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	f7ff f8f9 	bl	80001e4 <__adddf3>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	4b4f      	ldr	r3, [pc, #316]	; (800113c <dft+0x294>)
 8001000:	f7ff fbd0 	bl	80007a4 <__aeabi_ddiv>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	ec43 2b17 	vmov	d7, r2, r3
 800100c:	eeb0 0a47 	vmov.f32	s0, s14
 8001010:	eef0 0a67 	vmov.f32	s1, s15
 8001014:	f003 fa8c 	bl	8004530 <sin>
 8001018:	ec53 2b10 	vmov	r2, r3, d0
 800101c:	4640      	mov	r0, r8
 800101e:	4649      	mov	r1, r9
 8001020:	f7ff fa96 	bl	8000550 <__aeabi_dmul>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4620      	mov	r0, r4
 800102a:	4629      	mov	r1, r5
 800102c:	f7ff f8d8 	bl	80001e0 <__aeabi_dsub>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff fd62 	bl	8000b00 <__aeabi_d2f>
 800103c:	4602      	mov	r2, r0
 800103e:	493c      	ldr	r1, [pc, #240]	; (8001130 <dft+0x288>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	601a      	str	r2, [r3, #0]
		  for (n=0 ; n<(buffersize-1) ; n++)
 8001048:	4b3a      	ldr	r3, [pc, #232]	; (8001134 <dft+0x28c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	4a39      	ldr	r2, [pc, #228]	; (8001134 <dft+0x28c>)
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	4b38      	ldr	r3, [pc, #224]	; (8001134 <dft+0x28c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b7e      	cmp	r3, #126	; 0x7e
 8001058:	f77f af4c 	ble.w	8000ef4 <dft+0x4c>
		  }

		  ReX[k] /= buffersize/2;
 800105c:	4a33      	ldr	r2, [pc, #204]	; (800112c <dft+0x284>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	ed93 7a00 	vldr	s14, [r3]
 8001068:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001140 <dft+0x298>
 800106c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001070:	4a2e      	ldr	r2, [pc, #184]	; (800112c <dft+0x284>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	edc3 7a00 	vstr	s15, [r3]
		  ImX[k] /= buffersize/2;
 800107c:	4a2c      	ldr	r2, [pc, #176]	; (8001130 <dft+0x288>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	ed93 7a00 	vldr	s14, [r3]
 8001088:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001140 <dft+0x298>
 800108c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001090:	4a27      	ldr	r2, [pc, #156]	; (8001130 <dft+0x288>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	edc3 7a00 	vstr	s15, [r3]

		  AmpX[k] = sqrt(ReX[k]*ReX[k] + ImX[k]*ImX[k]);//sterkte van signal per frequentie van k
 800109c:	4a23      	ldr	r2, [pc, #140]	; (800112c <dft+0x284>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	ed93 7a00 	vldr	s14, [r3]
 80010a8:	4a20      	ldr	r2, [pc, #128]	; (800112c <dft+0x284>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010b8:	4a1d      	ldr	r2, [pc, #116]	; (8001130 <dft+0x288>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	edd3 6a00 	vldr	s13, [r3]
 80010c4:	4a1a      	ldr	r2, [pc, #104]	; (8001130 <dft+0x288>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d8:	ee17 0a90 	vmov	r0, s15
 80010dc:	f7ff f9e0 	bl	80004a0 <__aeabi_f2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	ec43 2b10 	vmov	d0, r2, r3
 80010e8:	f003 fa7a 	bl	80045e0 <sqrt>
 80010ec:	ec53 2b10 	vmov	r2, r3, d0
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f7ff fd04 	bl	8000b00 <__aeabi_d2f>
 80010f8:	4602      	mov	r2, r0
 80010fa:	4912      	ldr	r1, [pc, #72]	; (8001144 <dft+0x29c>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	601a      	str	r2, [r3, #0]
		  return AmpX[k];
 8001104:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <dft+0x29c>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	ee07 3a90 	vmov	s15, r3
}
 8001112:	eeb0 0a67 	vmov.f32	s0, s15
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800111e:	bf00      	nop
 8001120:	54442d18 	.word	0x54442d18
 8001124:	400921fb 	.word	0x400921fb
 8001128:	20000090 	.word	0x20000090
 800112c:	20000094 	.word	0x20000094
 8001130:	20000194 	.word	0x20000194
 8001134:	2000008c 	.word	0x2000008c
 8001138:	200004c0 	.word	0x200004c0
 800113c:	40600000 	.word	0x40600000
 8001140:	42800000 	.word	0x42800000
 8001144:	20000294 	.word	0x20000294

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  char buf5[] = "test\n";
 800114e:	4a70      	ldr	r2, [pc, #448]	; (8001310 <main+0x1c8>)
 8001150:	f107 0320 	add.w	r3, r7, #32
 8001154:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001158:	6018      	str	r0, [r3, #0]
 800115a:	3304      	adds	r3, #4
 800115c:	8019      	strh	r1, [r3, #0]
	HAL_UART_Transmit(&huart2, buf5, sizeof(buf5), HAL_MAX_DELAY);
 800115e:	f107 0120 	add.w	r1, r7, #32
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	2206      	movs	r2, #6
 8001168:	486a      	ldr	r0, [pc, #424]	; (8001314 <main+0x1cc>)
 800116a:	f002 fde6 	bl	8003d3a <HAL_UART_Transmit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116e:	f000 fcc9 	bl	8001b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001172:	f000 f8f1 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001176:	f000 fa55 	bl	8001624 <MX_GPIO_Init>
  MX_TIM2_Init();
 800117a:	f000 f9dd 	bl	8001538 <MX_TIM2_Init>
  MX_ADC1_Init();
 800117e:	f000 f953 	bl	8001428 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001182:	f000 f9a3 	bl	80014cc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001186:	f000 fa23 	bl	80015d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800118a:	4863      	ldr	r0, [pc, #396]	; (8001318 <main+0x1d0>)
 800118c:	f002 f992 	bl	80034b4 <HAL_TIM_Base_Start_IT>
  while (1)
  {



	  if (dft_waarde == 1){
 8001190:	4b62      	ldr	r3, [pc, #392]	; (800131c <main+0x1d4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d1fb      	bne.n	8001190 <main+0x48>
		  f2031hz = dft(12);
 8001198:	200c      	movs	r0, #12
 800119a:	f7ff fe85 	bl	8000ea8 <dft>
 800119e:	eef0 7a40 	vmov.f32	s15, s0
 80011a2:	4b5f      	ldr	r3, [pc, #380]	; (8001320 <main+0x1d8>)
 80011a4:	edc3 7a00 	vstr	s15, [r3]
		  f1000hz = dft(6);
 80011a8:	2006      	movs	r0, #6
 80011aa:	f7ff fe7d 	bl	8000ea8 <dft>
 80011ae:	eef0 7a40 	vmov.f32	s15, s0
 80011b2:	4b5c      	ldr	r3, [pc, #368]	; (8001324 <main+0x1dc>)
 80011b4:	edc3 7a00 	vstr	s15, [r3]
		  f3000hz = dft(21);
 80011b8:	2015      	movs	r0, #21
 80011ba:	f7ff fe75 	bl	8000ea8 <dft>
 80011be:	eef0 7a40 	vmov.f32	s15, s0
 80011c2:	4b59      	ldr	r3, [pc, #356]	; (8001328 <main+0x1e0>)
 80011c4:	edc3 7a00 	vstr	s15, [r3]
		  f4000hz = dft(26);
 80011c8:	201a      	movs	r0, #26
 80011ca:	f7ff fe6d 	bl	8000ea8 <dft>
 80011ce:	eef0 7a40 	vmov.f32	s15, s0
 80011d2:	4b56      	ldr	r3, [pc, #344]	; (800132c <main+0x1e4>)
 80011d4:	edc3 7a00 	vstr	s15, [r3]
		  //for (int g=0; g<buffersize/2;g++) dft(g);
		  dft_waarde = 0;
 80011d8:	4b50      	ldr	r3, [pc, #320]	; (800131c <main+0x1d4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]


		  if (f1000hz >= 200){
 80011de:	4b51      	ldr	r3, [pc, #324]	; (8001324 <main+0x1dc>)
 80011e0:	edd3 7a00 	vldr	s15, [r3]
 80011e4:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001330 <main+0x1e8>
 80011e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f0:	db17      	blt.n	8001222 <main+0xda>
			  if (last1 ==0)
 80011f2:	4b50      	ldr	r3, [pc, #320]	; (8001334 <main+0x1ec>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d116      	bne.n	8001228 <main+0xe0>
			  {
				 char buf1[] = "1kHz\n";
 80011fa:	4a4f      	ldr	r2, [pc, #316]	; (8001338 <main+0x1f0>)
 80011fc:	f107 0318 	add.w	r3, r7, #24
 8001200:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001204:	6018      	str	r0, [r3, #0]
 8001206:	3304      	adds	r3, #4
 8001208:	8019      	strh	r1, [r3, #0]
				 HAL_UART_Transmit(&huart2, buf1, sizeof(buf1), HAL_MAX_DELAY);
 800120a:	f107 0118 	add.w	r1, r7, #24
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	2206      	movs	r2, #6
 8001214:	483f      	ldr	r0, [pc, #252]	; (8001314 <main+0x1cc>)
 8001216:	f002 fd90 	bl	8003d3a <HAL_UART_Transmit>
				 last1 = 1;
 800121a:	4b46      	ldr	r3, [pc, #280]	; (8001334 <main+0x1ec>)
 800121c:	2201      	movs	r2, #1
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	e002      	b.n	8001228 <main+0xe0>
			  }
		  }
		  else last1 = 0;
 8001222:	4b44      	ldr	r3, [pc, #272]	; (8001334 <main+0x1ec>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]



		  if (f2031hz >= 200){
 8001228:	4b3d      	ldr	r3, [pc, #244]	; (8001320 <main+0x1d8>)
 800122a:	edd3 7a00 	vldr	s15, [r3]
 800122e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001330 <main+0x1e8>
 8001232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123a:	db17      	blt.n	800126c <main+0x124>
			  if (last2 == 0)
 800123c:	4b3f      	ldr	r3, [pc, #252]	; (800133c <main+0x1f4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d116      	bne.n	8001272 <main+0x12a>
			  {
				  char buf2[] = "2kHz\n";
 8001244:	4a3e      	ldr	r2, [pc, #248]	; (8001340 <main+0x1f8>)
 8001246:	f107 0310 	add.w	r3, r7, #16
 800124a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800124e:	6018      	str	r0, [r3, #0]
 8001250:	3304      	adds	r3, #4
 8001252:	8019      	strh	r1, [r3, #0]
				  HAL_UART_Transmit(&huart2, buf2, sizeof(buf2), HAL_MAX_DELAY);
 8001254:	f107 0110 	add.w	r1, r7, #16
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	2206      	movs	r2, #6
 800125e:	482d      	ldr	r0, [pc, #180]	; (8001314 <main+0x1cc>)
 8001260:	f002 fd6b 	bl	8003d3a <HAL_UART_Transmit>
				  last2 = 1;
 8001264:	4b35      	ldr	r3, [pc, #212]	; (800133c <main+0x1f4>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	e002      	b.n	8001272 <main+0x12a>
			  }
		  }
		  else last2 = 0;
 800126c:	4b33      	ldr	r3, [pc, #204]	; (800133c <main+0x1f4>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]


		  if (f3000hz >= 200){
 8001272:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <main+0x1e0>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001330 <main+0x1e8>
 800127c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001284:	db1c      	blt.n	80012c0 <main+0x178>
			  if (last3 == 0)
 8001286:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <main+0x1fc>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d11b      	bne.n	80012c6 <main+0x17e>
			  {
				  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800128e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001292:	482d      	ldr	r0, [pc, #180]	; (8001348 <main+0x200>)
 8001294:	f001 fbc3 	bl	8002a1e <HAL_GPIO_TogglePin>
			  	  char buf3[] = "3kHz\n";
 8001298:	4a2c      	ldr	r2, [pc, #176]	; (800134c <main+0x204>)
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012a2:	6018      	str	r0, [r3, #0]
 80012a4:	3304      	adds	r3, #4
 80012a6:	8019      	strh	r1, [r3, #0]
			  	  HAL_UART_Transmit(&huart2, buf3, sizeof(buf3), HAL_MAX_DELAY);
 80012a8:	f107 0108 	add.w	r1, r7, #8
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
 80012b0:	2206      	movs	r2, #6
 80012b2:	4818      	ldr	r0, [pc, #96]	; (8001314 <main+0x1cc>)
 80012b4:	f002 fd41 	bl	8003d3a <HAL_UART_Transmit>
			  	  last3 = 1;
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <main+0x1fc>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	e002      	b.n	80012c6 <main+0x17e>
			  }
		  }
		  else last3 = 0;
 80012c0:	4b20      	ldr	r3, [pc, #128]	; (8001344 <main+0x1fc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]


		  if (f4000hz >= 200){
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <main+0x1e4>)
 80012c8:	edd3 7a00 	vldr	s15, [r3]
 80012cc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001330 <main+0x1e8>
 80012d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d8:	db16      	blt.n	8001308 <main+0x1c0>
			  if (last4 ==0)
 80012da:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <main+0x208>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f47f af56 	bne.w	8001190 <main+0x48>
			  {
				  char buf4[] = "4kHz\n";
 80012e4:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <main+0x20c>)
 80012e6:	463b      	mov	r3, r7
 80012e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ec:	6018      	str	r0, [r3, #0]
 80012ee:	3304      	adds	r3, #4
 80012f0:	8019      	strh	r1, [r3, #0]
				  HAL_UART_Transmit(&huart2, buf4, sizeof(buf4), HAL_MAX_DELAY);
 80012f2:	4639      	mov	r1, r7
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295
 80012f8:	2206      	movs	r2, #6
 80012fa:	4806      	ldr	r0, [pc, #24]	; (8001314 <main+0x1cc>)
 80012fc:	f002 fd1d 	bl	8003d3a <HAL_UART_Transmit>
				  last4 = 1;
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <main+0x208>)
 8001302:	2201      	movs	r2, #1
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e743      	b.n	8001190 <main+0x48>
			  }
		  }
		  else last4 = 0;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <main+0x208>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
	  if (dft_waarde == 1){
 800130e:	e73f      	b.n	8001190 <main+0x48>
 8001310:	080057a0 	.word	0x080057a0
 8001314:	2000047c 	.word	0x2000047c
 8001318:	20000434 	.word	0x20000434
 800131c:	200006c4 	.word	0x200006c4
 8001320:	200006cc 	.word	0x200006cc
 8001324:	200006c8 	.word	0x200006c8
 8001328:	200006d0 	.word	0x200006d0
 800132c:	200006d4 	.word	0x200006d4
 8001330:	43480000 	.word	0x43480000
 8001334:	200006dc 	.word	0x200006dc
 8001338:	080057a8 	.word	0x080057a8
 800133c:	200006e0 	.word	0x200006e0
 8001340:	080057b0 	.word	0x080057b0
 8001344:	200006d8 	.word	0x200006d8
 8001348:	40020c00 	.word	0x40020c00
 800134c:	080057b8 	.word	0x080057b8
 8001350:	200006e4 	.word	0x200006e4
 8001354:	080057c0 	.word	0x080057c0

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b094      	sub	sp, #80	; 0x50
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0320 	add.w	r3, r7, #32
 8001362:	2230      	movs	r2, #48	; 0x30
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f003 f886 	bl	8004478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	4b27      	ldr	r3, [pc, #156]	; (8001420 <SystemClock_Config+0xc8>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	4a26      	ldr	r2, [pc, #152]	; (8001420 <SystemClock_Config+0xc8>)
 8001386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138a:	6413      	str	r3, [r2, #64]	; 0x40
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <SystemClock_Config+0xc8>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	4b21      	ldr	r3, [pc, #132]	; (8001424 <SystemClock_Config+0xcc>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a20      	ldr	r2, [pc, #128]	; (8001424 <SystemClock_Config+0xcc>)
 80013a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <SystemClock_Config+0xcc>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b4:	2302      	movs	r3, #2
 80013b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b8:	2301      	movs	r3, #1
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013bc:	2310      	movs	r3, #16
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c0:	2302      	movs	r3, #2
 80013c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013c4:	2300      	movs	r3, #0
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013c8:	2308      	movs	r3, #8
 80013ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80013cc:	2340      	movs	r3, #64	; 0x40
 80013ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013d4:	2304      	movs	r3, #4
 80013d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	f107 0320 	add.w	r3, r7, #32
 80013dc:	4618      	mov	r0, r3
 80013de:	f001 fb39 	bl	8002a54 <HAL_RCC_OscConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013e8:	f000 f9c2 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ec:	230f      	movs	r3, #15
 80013ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f0:	2302      	movs	r3, #2
 80013f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	2101      	movs	r1, #1
 8001406:	4618      	mov	r0, r3
 8001408:	f001 fd9c 	bl	8002f44 <HAL_RCC_ClockConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001412:	f000 f9ad 	bl	8001770 <Error_Handler>
  }
}
 8001416:	bf00      	nop
 8001418:	3750      	adds	r7, #80	; 0x50
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40007000 	.word	0x40007000

08001428 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800142e:	463b      	mov	r3, r7
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800143a:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <MX_ADC1_Init+0x98>)
 800143c:	4a21      	ldr	r2, [pc, #132]	; (80014c4 <MX_ADC1_Init+0x9c>)
 800143e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001440:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <MX_ADC1_Init+0x98>)
 8001442:	2200      	movs	r2, #0
 8001444:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001446:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <MX_ADC1_Init+0x98>)
 8001448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800144c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <MX_ADC1_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_ADC1_Init+0x98>)
 8001456:	2200      	movs	r2, #0
 8001458:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <MX_ADC1_Init+0x98>)
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001462:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <MX_ADC1_Init+0x98>)
 8001464:	2200      	movs	r2, #0
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <MX_ADC1_Init+0x98>)
 800146a:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <MX_ADC1_Init+0xa0>)
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_ADC1_Init+0x98>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <MX_ADC1_Init+0x98>)
 8001476:	2201      	movs	r2, #1
 8001478:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_ADC1_Init+0x98>)
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_ADC1_Init+0x98>)
 8001484:	2201      	movs	r2, #1
 8001486:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001488:	480d      	ldr	r0, [pc, #52]	; (80014c0 <MX_ADC1_Init+0x98>)
 800148a:	f000 fbad 	bl	8001be8 <HAL_ADC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001494:	f000 f96c 	bl	8001770 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001498:	2300      	movs	r3, #0
 800149a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800149c:	2301      	movs	r3, #1
 800149e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_ADC1_Init+0x98>)
 80014aa:	f000 fdd1 	bl	8002050 <HAL_ADC_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014b4:	f000 f95c 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000394 	.word	0x20000394
 80014c4:	40012000 	.word	0x40012000
 80014c8:	0f000001 	.word	0x0f000001

080014cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <MX_SPI1_Init+0x64>)
 80014d2:	4a18      	ldr	r2, [pc, #96]	; (8001534 <MX_SPI1_Init+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_SPI1_Init+0x64>)
 80014d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_SPI1_Init+0x64>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <MX_SPI1_Init+0x64>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_SPI1_Init+0x64>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_SPI1_Init+0x64>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_SPI1_Init+0x64>)
 80014f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_SPI1_Init+0x64>)
 8001500:	2200      	movs	r2, #0
 8001502:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001504:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <MX_SPI1_Init+0x64>)
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_SPI1_Init+0x64>)
 800150c:	2200      	movs	r2, #0
 800150e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <MX_SPI1_Init+0x64>)
 8001512:	2200      	movs	r2, #0
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_SPI1_Init+0x64>)
 8001518:	220a      	movs	r2, #10
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <MX_SPI1_Init+0x64>)
 800151e:	f001 fef1 	bl	8003304 <HAL_SPI_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001528:	f000 f922 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200003dc 	.word	0x200003dc
 8001534:	40013000 	.word	0x40013000

08001538 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154c:	463b      	mov	r3, r7
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <MX_TIM2_Init+0x94>)
 8001556:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800155a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <MX_TIM2_Init+0x94>)
 800155e:	2220      	movs	r2, #32
 8001560:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <MX_TIM2_Init+0x94>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <MX_TIM2_Init+0x94>)
 800156a:	2232      	movs	r2, #50	; 0x32
 800156c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <MX_TIM2_Init+0x94>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <MX_TIM2_Init+0x94>)
 8001576:	2280      	movs	r2, #128	; 0x80
 8001578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800157a:	4814      	ldr	r0, [pc, #80]	; (80015cc <MX_TIM2_Init+0x94>)
 800157c:	f001 ff4b 	bl	8003416 <HAL_TIM_Base_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001586:	f000 f8f3 	bl	8001770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800158a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	4619      	mov	r1, r3
 8001596:	480d      	ldr	r0, [pc, #52]	; (80015cc <MX_TIM2_Init+0x94>)
 8001598:	f002 f8f6 	bl	8003788 <HAL_TIM_ConfigClockSource>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80015a2:	f000 f8e5 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ae:	463b      	mov	r3, r7
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <MX_TIM2_Init+0x94>)
 80015b4:	f002 faf2 	bl	8003b9c <HAL_TIMEx_MasterConfigSynchronization>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80015be:	f000 f8d7 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000434 	.word	0x20000434

080015d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <MX_USART2_UART_Init+0x50>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_USART2_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_USART2_UART_Init+0x4c>)
 8001608:	f002 fb4a 	bl	8003ca0 <HAL_UART_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001612:	f000 f8ad 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000047c 	.word	0x2000047c
 8001620:	40004400 	.word	0x40004400

08001624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	f107 030c 	add.w	r3, r7, #12
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <MX_GPIO_Init+0xc4>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a29      	ldr	r2, [pc, #164]	; (80016e8 <MX_GPIO_Init+0xc4>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <MX_GPIO_Init+0xc4>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <MX_GPIO_Init+0xc4>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a22      	ldr	r2, [pc, #136]	; (80016e8 <MX_GPIO_Init+0xc4>)
 8001660:	f043 0308 	orr.w	r3, r3, #8
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <MX_GPIO_Init+0xc4>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <MX_GPIO_Init+0xc4>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <MX_GPIO_Init+0xc4>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <MX_GPIO_Init+0xc4>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|BLUELED_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001694:	4815      	ldr	r0, [pc, #84]	; (80016ec <MX_GPIO_Init+0xc8>)
 8001696:	f001 f9a9 	bl	80029ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ldac_Pin|SS1_Pin, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	2190      	movs	r1, #144	; 0x90
 800169e:	4814      	ldr	r0, [pc, #80]	; (80016f0 <MX_GPIO_Init+0xcc>)
 80016a0:	f001 f9a4 	bl	80029ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 BLUELED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|BLUELED_Pin;
 80016a4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	4619      	mov	r1, r3
 80016bc:	480b      	ldr	r0, [pc, #44]	; (80016ec <MX_GPIO_Init+0xc8>)
 80016be:	f001 f811 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ldac_Pin SS1_Pin */
  GPIO_InitStruct.Pin = ldac_Pin|SS1_Pin;
 80016c2:	2390      	movs	r3, #144	; 0x90
 80016c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_GPIO_Init+0xcc>)
 80016da:	f001 f803 	bl	80026e4 <HAL_GPIO_Init>

}
 80016de:	bf00      	nop
 80016e0:	3720      	adds	r7, #32
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020c00 	.word	0x40020c00
 80016f0:	40020400 	.word	0x40020400

080016f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
	{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
		HAL_GPIO_TogglePin(GPIOD, BLUELED_Pin);
 80016fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001700:	4815      	ldr	r0, [pc, #84]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001702:	f001 f98c 	bl	8002a1e <HAL_GPIO_TogglePin>

		if (htim == &htim2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d120      	bne.n	8001750 <HAL_TIM_PeriodElapsedCallback+0x5c>
		{
			pos++;
 800170e:	4b14      	ldr	r3, [pc, #80]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	4a12      	ldr	r2, [pc, #72]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001716:	6013      	str	r3, [r2, #0]
			buffer[(pos-1)] = HAL_ADC_GetValue(&hadc1);
 8001718:	4812      	ldr	r0, [pc, #72]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800171a:	f000 fc6d 	bl	8001ff8 <HAL_ADC_GetValue>
 800171e:	ee07 0a90 	vmov	s15, r0
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3b01      	subs	r3, #1
 8001728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800172c:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	edc3 7a00 	vstr	s15, [r3]
			HAL_ADC_Start(&hadc1);
 8001736:	480b      	ldr	r0, [pc, #44]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001738:	f000 fa9a 	bl	8001c70 <HAL_ADC_Start>
			if (pos > buffersize)
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b80      	cmp	r3, #128	; 0x80
 8001742:	d905      	bls.n	8001750 <HAL_TIM_PeriodElapsedCallback+0x5c>
				{
				dft_waarde = 1;
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]
				pos = 0;
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]

				}

		}
	}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40020c00 	.word	0x40020c00
 800175c:	20000434 	.word	0x20000434
 8001760:	200006c0 	.word	0x200006c0
 8001764:	20000394 	.word	0x20000394
 8001768:	200004c0 	.word	0x200004c0
 800176c:	200006c4 	.word	0x200006c4

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001778:	e7fe      	b.n	8001778 <Error_Handler+0x8>
	...

0800177c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_MspInit+0x4c>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	4a0f      	ldr	r2, [pc, #60]	; (80017c8 <HAL_MspInit+0x4c>)
 800178c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001790:	6453      	str	r3, [r2, #68]	; 0x44
 8001792:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_MspInit+0x4c>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_MspInit+0x4c>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	4a08      	ldr	r2, [pc, #32]	; (80017c8 <HAL_MspInit+0x4c>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ac:	6413      	str	r3, [r2, #64]	; 0x40
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_MspInit+0x4c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800

080017cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a1b      	ldr	r2, [pc, #108]	; (8001858 <HAL_ADC_MspInit+0x8c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d12f      	bne.n	800184e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_ADC_MspInit+0x90>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4a19      	ldr	r2, [pc, #100]	; (800185c <HAL_ADC_MspInit+0x90>)
 80017f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fc:	6453      	str	r3, [r2, #68]	; 0x44
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <HAL_ADC_MspInit+0x90>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <HAL_ADC_MspInit+0x90>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <HAL_ADC_MspInit+0x90>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_ADC_MspInit+0x90>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001826:	2301      	movs	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800182a:	2303      	movs	r3, #3
 800182c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	4809      	ldr	r0, [pc, #36]	; (8001860 <HAL_ADC_MspInit+0x94>)
 800183a:	f000 ff53 	bl	80026e4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	2012      	movs	r0, #18
 8001844:	f000 ff17 	bl	8002676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001848:	2012      	movs	r0, #18
 800184a:	f000 ff30 	bl	80026ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800184e:	bf00      	nop
 8001850:	3728      	adds	r7, #40	; 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40012000 	.word	0x40012000
 800185c:	40023800 	.word	0x40023800
 8001860:	40020000 	.word	0x40020000

08001864 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a28      	ldr	r2, [pc, #160]	; (8001924 <HAL_SPI_MspInit+0xc0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d149      	bne.n	800191a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b27      	ldr	r3, [pc, #156]	; (8001928 <HAL_SPI_MspInit+0xc4>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	4a26      	ldr	r2, [pc, #152]	; (8001928 <HAL_SPI_MspInit+0xc4>)
 8001890:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001894:	6453      	str	r3, [r2, #68]	; 0x44
 8001896:	4b24      	ldr	r3, [pc, #144]	; (8001928 <HAL_SPI_MspInit+0xc4>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_SPI_MspInit+0xc4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a1f      	ldr	r2, [pc, #124]	; (8001928 <HAL_SPI_MspInit+0xc4>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <HAL_SPI_MspInit+0xc4>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_SPI_MspInit+0xc4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a18      	ldr	r2, [pc, #96]	; (8001928 <HAL_SPI_MspInit+0xc4>)
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <HAL_SPI_MspInit+0xc4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018da:	23c0      	movs	r3, #192	; 0xc0
 80018dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018ea:	2305      	movs	r3, #5
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	480d      	ldr	r0, [pc, #52]	; (800192c <HAL_SPI_MspInit+0xc8>)
 80018f6:	f000 fef5 	bl	80026e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018fa:	2308      	movs	r3, #8
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800190a:	2305      	movs	r3, #5
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	4806      	ldr	r0, [pc, #24]	; (8001930 <HAL_SPI_MspInit+0xcc>)
 8001916:	f000 fee5 	bl	80026e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800191a:	bf00      	nop
 800191c:	3728      	adds	r7, #40	; 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40013000 	.word	0x40013000
 8001928:	40023800 	.word	0x40023800
 800192c:	40020000 	.word	0x40020000
 8001930:	40020400 	.word	0x40020400

08001934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001944:	d115      	bne.n	8001972 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_TIM_Base_MspInit+0x48>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <HAL_TIM_Base_MspInit+0x48>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_TIM_Base_MspInit+0x48>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2100      	movs	r1, #0
 8001966:	201c      	movs	r0, #28
 8001968:	f000 fe85 	bl	8002676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800196c:	201c      	movs	r0, #28
 800196e:	f000 fe9e 	bl	80026ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800

08001980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <HAL_UART_MspInit+0x84>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d12b      	bne.n	80019fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_UART_MspInit+0x88>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <HAL_UART_MspInit+0x88>)
 80019ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b0:	6413      	str	r3, [r2, #64]	; 0x40
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_UART_MspInit+0x88>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_UART_MspInit+0x88>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a10      	ldr	r2, [pc, #64]	; (8001a08 <HAL_UART_MspInit+0x88>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <HAL_UART_MspInit+0x88>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019da:	230c      	movs	r3, #12
 80019dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ea:	2307      	movs	r3, #7
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <HAL_UART_MspInit+0x8c>)
 80019f6:	f000 fe75 	bl	80026e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019fa:	bf00      	nop
 80019fc:	3728      	adds	r7, #40	; 0x28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40004400 	.word	0x40004400
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000

08001a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <NMI_Handler+0x4>

08001a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <HardFault_Handler+0x4>

08001a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <MemManage_Handler+0x4>

08001a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <BusFault_Handler+0x4>

08001a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <UsageFault_Handler+0x4>

08001a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5c:	f000 f8a4 	bl	8001ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <ADC_IRQHandler+0x10>)
 8001a6a:	f000 f9b5 	bl	8001dd8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000394 	.word	0x20000394

08001a78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <TIM2_IRQHandler+0x10>)
 8001a7e:	f001 fd7b 	bl	8003578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000434 	.word	0x20000434

08001a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <SystemInit+0x20>)
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a96:	4a05      	ldr	r2, [pc, #20]	; (8001aac <SystemInit+0x20>)
 8001a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ab4:	480d      	ldr	r0, [pc, #52]	; (8001aec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ab6:	490e      	ldr	r1, [pc, #56]	; (8001af0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ab8:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001abc:	e002      	b.n	8001ac4 <LoopCopyDataInit>

08001abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac2:	3304      	adds	r3, #4

08001ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac8:	d3f9      	bcc.n	8001abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aca:	4a0b      	ldr	r2, [pc, #44]	; (8001af8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001acc:	4c0b      	ldr	r4, [pc, #44]	; (8001afc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad0:	e001      	b.n	8001ad6 <LoopFillZerobss>

08001ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad4:	3204      	adds	r2, #4

08001ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad8:	d3fb      	bcc.n	8001ad2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ada:	f7ff ffd7 	bl	8001a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ade:	f002 fca7 	bl	8004430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae2:	f7ff fb31 	bl	8001148 <main>
  bx  lr    
 8001ae6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ae8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001af4:	080059c8 	.word	0x080059c8
  ldr r2, =_sbss
 8001af8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001afc:	200006ec 	.word	0x200006ec

08001b00 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <DMA1_Stream0_IRQHandler>
	...

08001b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <HAL_Init+0x40>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	; (8001b44 <HAL_Init+0x40>)
 8001b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_Init+0x40>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <HAL_Init+0x40>)
 8001b1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <HAL_Init+0x40>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a07      	ldr	r2, [pc, #28]	; (8001b44 <HAL_Init+0x40>)
 8001b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f000 fd97 	bl	8002660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b32:	200f      	movs	r0, #15
 8001b34:	f000 f808 	bl	8001b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b38:	f7ff fe20 	bl	800177c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023c00 	.word	0x40023c00

08001b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_InitTick+0x54>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_InitTick+0x58>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 fdaf 	bl	80026ca <HAL_SYSTICK_Config>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00e      	b.n	8001b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b0f      	cmp	r3, #15
 8001b7a:	d80a      	bhi.n	8001b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f000 fd77 	bl	8002676 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b88:	4a06      	ldr	r2, [pc, #24]	; (8001ba4 <HAL_InitTick+0x5c>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e000      	b.n	8001b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	20000004 	.word	0x20000004

08001ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_IncTick+0x20>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_IncTick+0x24>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <HAL_IncTick+0x24>)
 8001bba:	6013      	str	r3, [r2, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	200006e8 	.word	0x200006e8

08001bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <HAL_GetTick+0x14>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	200006e8 	.word	0x200006e8

08001be8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e033      	b.n	8001c66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fde0 	bl	80017cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d118      	bne.n	8001c58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c2e:	f023 0302 	bic.w	r3, r3, #2
 8001c32:	f043 0202 	orr.w	r2, r3, #2
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fb3a 	bl	80022b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f023 0303 	bic.w	r3, r3, #3
 8001c4e:	f043 0201 	orr.w	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	641a      	str	r2, [r3, #64]	; 0x40
 8001c56:	e001      	b.n	8001c5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d101      	bne.n	8001c8a <HAL_ADC_Start+0x1a>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e097      	b.n	8001dba <HAL_ADC_Start+0x14a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d018      	beq.n	8001cd2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cb0:	4b45      	ldr	r3, [pc, #276]	; (8001dc8 <HAL_ADC_Start+0x158>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a45      	ldr	r2, [pc, #276]	; (8001dcc <HAL_ADC_Start+0x15c>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	0c9a      	lsrs	r2, r3, #18
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001cc4:	e002      	b.n	8001ccc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f9      	bne.n	8001cc6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d15f      	bne.n	8001da0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d007      	beq.n	8001d12 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1e:	d106      	bne.n	8001d2e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	f023 0206 	bic.w	r2, r3, #6
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	645a      	str	r2, [r3, #68]	; 0x44
 8001d2c:	e002      	b.n	8001d34 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_ADC_Start+0x160>)
 8001d3e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d48:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 031f 	and.w	r3, r3, #31
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10f      	bne.n	8001d76 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d129      	bne.n	8001db8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	e020      	b.n	8001db8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a16      	ldr	r2, [pc, #88]	; (8001dd4 <HAL_ADC_Start+0x164>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d11b      	bne.n	8001db8 <HAL_ADC_Start+0x148>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d114      	bne.n	8001db8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	e00b      	b.n	8001db8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f043 0210 	orr.w	r2, r3, #16
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db0:	f043 0201 	orr.w	r2, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	431bde83 	.word	0x431bde83
 8001dd0:	40012300 	.word	0x40012300
 8001dd4:	40012000 	.word	0x40012000

08001dd8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f003 0320 	and.w	r3, r3, #32
 8001e06:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d049      	beq.n	8001ea2 <HAL_ADC_IRQHandler+0xca>
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d046      	beq.n	8001ea2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f003 0310 	and.w	r3, r3, #16
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d105      	bne.n	8001e2c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d12b      	bne.n	8001e92 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d127      	bne.n	8001e92 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d119      	bne.n	8001e92 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0220 	bic.w	r2, r2, #32
 8001e6c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d105      	bne.n	8001e92 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f043 0201 	orr.w	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f8bd 	bl	8002012 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0212 	mvn.w	r2, #18
 8001ea0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d057      	beq.n	8001f68 <HAL_ADC_IRQHandler+0x190>
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d054      	beq.n	8001f68 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d105      	bne.n	8001ed6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d139      	bne.n	8001f58 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d12b      	bne.n	8001f58 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d124      	bne.n	8001f58 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d11d      	bne.n	8001f58 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d119      	bne.n	8001f58 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d105      	bne.n	8001f58 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f043 0201 	orr.w	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 faa7 	bl	80024ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f06f 020c 	mvn.w	r2, #12
 8001f66:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f76:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d017      	beq.n	8001fae <HAL_ADC_IRQHandler+0x1d6>
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d014      	beq.n	8001fae <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d10d      	bne.n	8001fae <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f841 	bl	8002026 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0201 	mvn.w	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fbc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d015      	beq.n	8001ff0 <HAL_ADC_IRQHandler+0x218>
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d012      	beq.n	8001ff0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f043 0202 	orr.w	r2, r3, #2
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f06f 0220 	mvn.w	r2, #32
 8001fde:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f82a 	bl	800203a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f06f 0220 	mvn.w	r2, #32
 8001fee:	601a      	str	r2, [r3, #0]
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_ADC_ConfigChannel+0x1c>
 8002068:	2302      	movs	r3, #2
 800206a:	e113      	b.n	8002294 <HAL_ADC_ConfigChannel+0x244>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b09      	cmp	r3, #9
 800207a:	d925      	bls.n	80020c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68d9      	ldr	r1, [r3, #12]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	3b1e      	subs	r3, #30
 8002092:	2207      	movs	r2, #7
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43da      	mvns	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	400a      	ands	r2, r1
 80020a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68d9      	ldr	r1, [r3, #12]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	4603      	mov	r3, r0
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4403      	add	r3, r0
 80020ba:	3b1e      	subs	r3, #30
 80020bc:	409a      	lsls	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	e022      	b.n	800210e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6919      	ldr	r1, [r3, #16]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	461a      	mov	r2, r3
 80020d6:	4613      	mov	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	2207      	movs	r2, #7
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43da      	mvns	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	400a      	ands	r2, r1
 80020ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6919      	ldr	r1, [r3, #16]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	4618      	mov	r0, r3
 80020fe:	4603      	mov	r3, r0
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4403      	add	r3, r0
 8002104:	409a      	lsls	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b06      	cmp	r3, #6
 8002114:	d824      	bhi.n	8002160 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	3b05      	subs	r3, #5
 8002128:	221f      	movs	r2, #31
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43da      	mvns	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	400a      	ands	r2, r1
 8002136:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	4618      	mov	r0, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	3b05      	subs	r3, #5
 8002152:	fa00 f203 	lsl.w	r2, r0, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	635a      	str	r2, [r3, #52]	; 0x34
 800215e:	e04c      	b.n	80021fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b0c      	cmp	r3, #12
 8002166:	d824      	bhi.n	80021b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	3b23      	subs	r3, #35	; 0x23
 800217a:	221f      	movs	r2, #31
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43da      	mvns	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	400a      	ands	r2, r1
 8002188:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	b29b      	uxth	r3, r3
 8002196:	4618      	mov	r0, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	3b23      	subs	r3, #35	; 0x23
 80021a4:	fa00 f203 	lsl.w	r2, r0, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
 80021b0:	e023      	b.n	80021fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	3b41      	subs	r3, #65	; 0x41
 80021c4:	221f      	movs	r2, #31
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	400a      	ands	r2, r1
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	4618      	mov	r0, r3
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	3b41      	subs	r3, #65	; 0x41
 80021ee:	fa00 f203 	lsl.w	r2, r0, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021fa:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <HAL_ADC_ConfigChannel+0x250>)
 80021fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a28      	ldr	r2, [pc, #160]	; (80022a4 <HAL_ADC_ConfigChannel+0x254>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d10f      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x1d8>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b12      	cmp	r3, #18
 800220e:	d10b      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1d      	ldr	r2, [pc, #116]	; (80022a4 <HAL_ADC_ConfigChannel+0x254>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d12b      	bne.n	800228a <HAL_ADC_ConfigChannel+0x23a>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1c      	ldr	r2, [pc, #112]	; (80022a8 <HAL_ADC_ConfigChannel+0x258>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d003      	beq.n	8002244 <HAL_ADC_ConfigChannel+0x1f4>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b11      	cmp	r3, #17
 8002242:	d122      	bne.n	800228a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a11      	ldr	r2, [pc, #68]	; (80022a8 <HAL_ADC_ConfigChannel+0x258>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d111      	bne.n	800228a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <HAL_ADC_ConfigChannel+0x25c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a11      	ldr	r2, [pc, #68]	; (80022b0 <HAL_ADC_ConfigChannel+0x260>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	0c9a      	lsrs	r2, r3, #18
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800227c:	e002      	b.n	8002284 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	3b01      	subs	r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f9      	bne.n	800227e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	40012300 	.word	0x40012300
 80022a4:	40012000 	.word	0x40012000
 80022a8:	10000012 	.word	0x10000012
 80022ac:	20000000 	.word	0x20000000
 80022b0:	431bde83 	.word	0x431bde83

080022b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022bc:	4b79      	ldr	r3, [pc, #484]	; (80024a4 <ADC_Init+0x1f0>)
 80022be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	431a      	orrs	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	021a      	lsls	r2, r3, #8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800230c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800232e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6899      	ldr	r1, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	4a58      	ldr	r2, [pc, #352]	; (80024a8 <ADC_Init+0x1f4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d022      	beq.n	8002392 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800235a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6899      	ldr	r1, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800237c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6899      	ldr	r1, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	e00f      	b.n	80023b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0202 	bic.w	r2, r2, #2
 80023c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6899      	ldr	r1, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	7e1b      	ldrb	r3, [r3, #24]
 80023cc:	005a      	lsls	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01b      	beq.n	8002418 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6859      	ldr	r1, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	3b01      	subs	r3, #1
 800240c:	035a      	lsls	r2, r3, #13
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	e007      	b.n	8002428 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002426:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	3b01      	subs	r3, #1
 8002444:	051a      	lsls	r2, r3, #20
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800245c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6899      	ldr	r1, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800246a:	025a      	lsls	r2, r3, #9
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002482:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6899      	ldr	r1, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	029a      	lsls	r2, r3, #10
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	609a      	str	r2, [r3, #8]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40012300 	.word	0x40012300
 80024a8:	0f000001 	.word	0x0f000001

080024ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024dc:	4013      	ands	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f2:	4a04      	ldr	r2, [pc, #16]	; (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	60d3      	str	r3, [r2, #12]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <__NVIC_GetPriorityGrouping+0x18>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	f003 0307 	and.w	r3, r3, #7
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	2b00      	cmp	r3, #0
 8002534:	db0b      	blt.n	800254e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	f003 021f 	and.w	r2, r3, #31
 800253c:	4907      	ldr	r1, [pc, #28]	; (800255c <__NVIC_EnableIRQ+0x38>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	2001      	movs	r0, #1
 8002546:	fa00 f202 	lsl.w	r2, r0, r2
 800254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000e100 	.word	0xe000e100

08002560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	2b00      	cmp	r3, #0
 8002572:	db0a      	blt.n	800258a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	490c      	ldr	r1, [pc, #48]	; (80025ac <__NVIC_SetPriority+0x4c>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	0112      	lsls	r2, r2, #4
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	440b      	add	r3, r1
 8002584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002588:	e00a      	b.n	80025a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4908      	ldr	r1, [pc, #32]	; (80025b0 <__NVIC_SetPriority+0x50>)
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	3b04      	subs	r3, #4
 8002598:	0112      	lsls	r2, r2, #4
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	440b      	add	r3, r1
 800259e:	761a      	strb	r2, [r3, #24]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000e100 	.word	0xe000e100
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	; 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f1c3 0307 	rsb	r3, r3, #7
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	bf28      	it	cs
 80025d2:	2304      	movcs	r3, #4
 80025d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3304      	adds	r3, #4
 80025da:	2b06      	cmp	r3, #6
 80025dc:	d902      	bls.n	80025e4 <NVIC_EncodePriority+0x30>
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3b03      	subs	r3, #3
 80025e2:	e000      	b.n	80025e6 <NVIC_EncodePriority+0x32>
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	401a      	ands	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	43d9      	mvns	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	4313      	orrs	r3, r2
         );
}
 800260e:	4618      	mov	r0, r3
 8002610:	3724      	adds	r7, #36	; 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3b01      	subs	r3, #1
 8002628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800262c:	d301      	bcc.n	8002632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800262e:	2301      	movs	r3, #1
 8002630:	e00f      	b.n	8002652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002632:	4a0a      	ldr	r2, [pc, #40]	; (800265c <SysTick_Config+0x40>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800263a:	210f      	movs	r1, #15
 800263c:	f04f 30ff 	mov.w	r0, #4294967295
 8002640:	f7ff ff8e 	bl	8002560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <SysTick_Config+0x40>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800264a:	4b04      	ldr	r3, [pc, #16]	; (800265c <SysTick_Config+0x40>)
 800264c:	2207      	movs	r2, #7
 800264e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	e000e010 	.word	0xe000e010

08002660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ff29 	bl	80024c0 <__NVIC_SetPriorityGrouping>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002676:	b580      	push	{r7, lr}
 8002678:	b086      	sub	sp, #24
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002688:	f7ff ff3e 	bl	8002508 <__NVIC_GetPriorityGrouping>
 800268c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	6978      	ldr	r0, [r7, #20]
 8002694:	f7ff ff8e 	bl	80025b4 <NVIC_EncodePriority>
 8002698:	4602      	mov	r2, r0
 800269a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269e:	4611      	mov	r1, r2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff5d 	bl	8002560 <__NVIC_SetPriority>
}
 80026a6:	bf00      	nop
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4603      	mov	r3, r0
 80026b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff31 	bl	8002524 <__NVIC_EnableIRQ>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ffa2 	bl	800261c <SysTick_Config>
 80026d8:	4603      	mov	r3, r0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	e159      	b.n	80029b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002700:	2201      	movs	r2, #1
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	429a      	cmp	r2, r3
 800271a:	f040 8148 	bne.w	80029ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b01      	cmp	r3, #1
 8002728:	d005      	beq.n	8002736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002732:	2b02      	cmp	r3, #2
 8002734:	d130      	bne.n	8002798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	2203      	movs	r2, #3
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800276c:	2201      	movs	r2, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 0201 	and.w	r2, r3, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d017      	beq.n	80027d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d123      	bne.n	8002828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	08da      	lsrs	r2, r3, #3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3208      	adds	r2, #8
 80027e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	220f      	movs	r2, #15
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	08da      	lsrs	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3208      	adds	r2, #8
 8002822:	69b9      	ldr	r1, [r7, #24]
 8002824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0203 	and.w	r2, r3, #3
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80a2 	beq.w	80029ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	4b57      	ldr	r3, [pc, #348]	; (80029cc <HAL_GPIO_Init+0x2e8>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	4a56      	ldr	r2, [pc, #344]	; (80029cc <HAL_GPIO_Init+0x2e8>)
 8002874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002878:	6453      	str	r3, [r2, #68]	; 0x44
 800287a:	4b54      	ldr	r3, [pc, #336]	; (80029cc <HAL_GPIO_Init+0x2e8>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002886:	4a52      	ldr	r2, [pc, #328]	; (80029d0 <HAL_GPIO_Init+0x2ec>)
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	3302      	adds	r3, #2
 800288e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	220f      	movs	r2, #15
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a49      	ldr	r2, [pc, #292]	; (80029d4 <HAL_GPIO_Init+0x2f0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d019      	beq.n	80028e6 <HAL_GPIO_Init+0x202>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a48      	ldr	r2, [pc, #288]	; (80029d8 <HAL_GPIO_Init+0x2f4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d013      	beq.n	80028e2 <HAL_GPIO_Init+0x1fe>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a47      	ldr	r2, [pc, #284]	; (80029dc <HAL_GPIO_Init+0x2f8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00d      	beq.n	80028de <HAL_GPIO_Init+0x1fa>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a46      	ldr	r2, [pc, #280]	; (80029e0 <HAL_GPIO_Init+0x2fc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d007      	beq.n	80028da <HAL_GPIO_Init+0x1f6>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a45      	ldr	r2, [pc, #276]	; (80029e4 <HAL_GPIO_Init+0x300>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d101      	bne.n	80028d6 <HAL_GPIO_Init+0x1f2>
 80028d2:	2304      	movs	r3, #4
 80028d4:	e008      	b.n	80028e8 <HAL_GPIO_Init+0x204>
 80028d6:	2307      	movs	r3, #7
 80028d8:	e006      	b.n	80028e8 <HAL_GPIO_Init+0x204>
 80028da:	2303      	movs	r3, #3
 80028dc:	e004      	b.n	80028e8 <HAL_GPIO_Init+0x204>
 80028de:	2302      	movs	r3, #2
 80028e0:	e002      	b.n	80028e8 <HAL_GPIO_Init+0x204>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_GPIO_Init+0x204>
 80028e6:	2300      	movs	r3, #0
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	f002 0203 	and.w	r2, r2, #3
 80028ee:	0092      	lsls	r2, r2, #2
 80028f0:	4093      	lsls	r3, r2
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028f8:	4935      	ldr	r1, [pc, #212]	; (80029d0 <HAL_GPIO_Init+0x2ec>)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	3302      	adds	r3, #2
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002906:	4b38      	ldr	r3, [pc, #224]	; (80029e8 <HAL_GPIO_Init+0x304>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800292a:	4a2f      	ldr	r2, [pc, #188]	; (80029e8 <HAL_GPIO_Init+0x304>)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002930:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <HAL_GPIO_Init+0x304>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002954:	4a24      	ldr	r2, [pc, #144]	; (80029e8 <HAL_GPIO_Init+0x304>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800295a:	4b23      	ldr	r3, [pc, #140]	; (80029e8 <HAL_GPIO_Init+0x304>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800297e:	4a1a      	ldr	r2, [pc, #104]	; (80029e8 <HAL_GPIO_Init+0x304>)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002984:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <HAL_GPIO_Init+0x304>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029a8:	4a0f      	ldr	r2, [pc, #60]	; (80029e8 <HAL_GPIO_Init+0x304>)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3301      	adds	r3, #1
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	f67f aea2 	bls.w	8002700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40013800 	.word	0x40013800
 80029d4:	40020000 	.word	0x40020000
 80029d8:	40020400 	.word	0x40020400
 80029dc:	40020800 	.word	0x40020800
 80029e0:	40020c00 	.word	0x40020c00
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40013c00 	.word	0x40013c00

080029ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	807b      	strh	r3, [r7, #2]
 80029f8:	4613      	mov	r3, r2
 80029fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029fc:	787b      	ldrb	r3, [r7, #1]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a02:	887a      	ldrh	r2, [r7, #2]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a08:	e003      	b.n	8002a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a0a:	887b      	ldrh	r3, [r7, #2]
 8002a0c:	041a      	lsls	r2, r3, #16
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	619a      	str	r2, [r3, #24]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	460b      	mov	r3, r1
 8002a28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a30:	887a      	ldrh	r2, [r7, #2]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4013      	ands	r3, r2
 8002a36:	041a      	lsls	r2, r3, #16
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	43d9      	mvns	r1, r3
 8002a3c:	887b      	ldrh	r3, [r7, #2]
 8002a3e:	400b      	ands	r3, r1
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	619a      	str	r2, [r3, #24]
}
 8002a46:	bf00      	nop
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e267      	b.n	8002f36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d075      	beq.n	8002b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a72:	4b88      	ldr	r3, [pc, #544]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d00c      	beq.n	8002a98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7e:	4b85      	ldr	r3, [pc, #532]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d112      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a8a:	4b82      	ldr	r3, [pc, #520]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a96:	d10b      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a98:	4b7e      	ldr	r3, [pc, #504]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d05b      	beq.n	8002b5c <HAL_RCC_OscConfig+0x108>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d157      	bne.n	8002b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e242      	b.n	8002f36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab8:	d106      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x74>
 8002aba:	4b76      	ldr	r3, [pc, #472]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a75      	ldr	r2, [pc, #468]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e01d      	b.n	8002b04 <HAL_RCC_OscConfig+0xb0>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCC_OscConfig+0x98>
 8002ad2:	4b70      	ldr	r3, [pc, #448]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a6f      	ldr	r2, [pc, #444]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b6d      	ldr	r3, [pc, #436]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a6c      	ldr	r2, [pc, #432]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e00b      	b.n	8002b04 <HAL_RCC_OscConfig+0xb0>
 8002aec:	4b69      	ldr	r3, [pc, #420]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a68      	ldr	r2, [pc, #416]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b66      	ldr	r3, [pc, #408]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a65      	ldr	r2, [pc, #404]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d013      	beq.n	8002b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7ff f860 	bl	8001bd0 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b14:	f7ff f85c 	bl	8001bd0 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e207      	b.n	8002f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	4b5b      	ldr	r3, [pc, #364]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0xc0>
 8002b32:	e014      	b.n	8002b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7ff f84c 	bl	8001bd0 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7ff f848 	bl	8001bd0 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e1f3      	b.n	8002f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4e:	4b51      	ldr	r3, [pc, #324]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0xe8>
 8002b5a:	e000      	b.n	8002b5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d063      	beq.n	8002c32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b6a:	4b4a      	ldr	r3, [pc, #296]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00b      	beq.n	8002b8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d11c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b82:	4b44      	ldr	r3, [pc, #272]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d116      	bne.n	8002bbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8e:	4b41      	ldr	r3, [pc, #260]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d005      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x152>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d001      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e1c7      	b.n	8002f36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba6:	4b3b      	ldr	r3, [pc, #236]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4937      	ldr	r1, [pc, #220]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bba:	e03a      	b.n	8002c32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d020      	beq.n	8002c06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc4:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <HAL_RCC_OscConfig+0x244>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bca:	f7ff f801 	bl	8001bd0 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd2:	f7fe fffd 	bl	8001bd0 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e1a8      	b.n	8002f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be4:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf0:	4b28      	ldr	r3, [pc, #160]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4925      	ldr	r1, [pc, #148]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	600b      	str	r3, [r1, #0]
 8002c04:	e015      	b.n	8002c32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_RCC_OscConfig+0x244>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe ffe0 	bl	8001bd0 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c14:	f7fe ffdc 	bl	8001bd0 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e187      	b.n	8002f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c26:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d036      	beq.n	8002cac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d016      	beq.n	8002c74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c46:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <HAL_RCC_OscConfig+0x248>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4c:	f7fe ffc0 	bl	8001bd0 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c54:	f7fe ffbc 	bl	8001bd0 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e167      	b.n	8002f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_RCC_OscConfig+0x240>)
 8002c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0x200>
 8002c72:	e01b      	b.n	8002cac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c74:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <HAL_RCC_OscConfig+0x248>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7a:	f7fe ffa9 	bl	8001bd0 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c80:	e00e      	b.n	8002ca0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c82:	f7fe ffa5 	bl	8001bd0 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d907      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e150      	b.n	8002f36 <HAL_RCC_OscConfig+0x4e2>
 8002c94:	40023800 	.word	0x40023800
 8002c98:	42470000 	.word	0x42470000
 8002c9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca0:	4b88      	ldr	r3, [pc, #544]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1ea      	bne.n	8002c82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 8097 	beq.w	8002de8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cbe:	4b81      	ldr	r3, [pc, #516]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10f      	bne.n	8002cea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	4b7d      	ldr	r3, [pc, #500]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	4a7c      	ldr	r2, [pc, #496]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cda:	4b7a      	ldr	r3, [pc, #488]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cea:	4b77      	ldr	r3, [pc, #476]	; (8002ec8 <HAL_RCC_OscConfig+0x474>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d118      	bne.n	8002d28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf6:	4b74      	ldr	r3, [pc, #464]	; (8002ec8 <HAL_RCC_OscConfig+0x474>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a73      	ldr	r2, [pc, #460]	; (8002ec8 <HAL_RCC_OscConfig+0x474>)
 8002cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d02:	f7fe ff65 	bl	8001bd0 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0a:	f7fe ff61 	bl	8001bd0 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e10c      	b.n	8002f36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1c:	4b6a      	ldr	r3, [pc, #424]	; (8002ec8 <HAL_RCC_OscConfig+0x474>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d106      	bne.n	8002d3e <HAL_RCC_OscConfig+0x2ea>
 8002d30:	4b64      	ldr	r3, [pc, #400]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	4a63      	ldr	r2, [pc, #396]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3c:	e01c      	b.n	8002d78 <HAL_RCC_OscConfig+0x324>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b05      	cmp	r3, #5
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x30c>
 8002d46:	4b5f      	ldr	r3, [pc, #380]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a5e      	ldr	r2, [pc, #376]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002d4c:	f043 0304 	orr.w	r3, r3, #4
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70
 8002d52:	4b5c      	ldr	r3, [pc, #368]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	4a5b      	ldr	r2, [pc, #364]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5e:	e00b      	b.n	8002d78 <HAL_RCC_OscConfig+0x324>
 8002d60:	4b58      	ldr	r3, [pc, #352]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	4a57      	ldr	r2, [pc, #348]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002d66:	f023 0301 	bic.w	r3, r3, #1
 8002d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6c:	4b55      	ldr	r3, [pc, #340]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	4a54      	ldr	r2, [pc, #336]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002d72:	f023 0304 	bic.w	r3, r3, #4
 8002d76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d015      	beq.n	8002dac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d80:	f7fe ff26 	bl	8001bd0 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d86:	e00a      	b.n	8002d9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d88:	f7fe ff22 	bl	8001bd0 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e0cb      	b.n	8002f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9e:	4b49      	ldr	r3, [pc, #292]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0ee      	beq.n	8002d88 <HAL_RCC_OscConfig+0x334>
 8002daa:	e014      	b.n	8002dd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dac:	f7fe ff10 	bl	8001bd0 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db2:	e00a      	b.n	8002dca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db4:	f7fe ff0c 	bl	8001bd0 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e0b5      	b.n	8002f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dca:	4b3e      	ldr	r3, [pc, #248]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1ee      	bne.n	8002db4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dd6:	7dfb      	ldrb	r3, [r7, #23]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d105      	bne.n	8002de8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ddc:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	4a38      	ldr	r2, [pc, #224]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80a1 	beq.w	8002f34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002df2:	4b34      	ldr	r3, [pc, #208]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d05c      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d141      	bne.n	8002e8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e06:	4b31      	ldr	r3, [pc, #196]	; (8002ecc <HAL_RCC_OscConfig+0x478>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7fe fee0 	bl	8001bd0 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e14:	f7fe fedc 	bl	8001bd0 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e087      	b.n	8002f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e26:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69da      	ldr	r2, [r3, #28]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	019b      	lsls	r3, r3, #6
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	085b      	lsrs	r3, r3, #1
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	041b      	lsls	r3, r3, #16
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	061b      	lsls	r3, r3, #24
 8002e56:	491b      	ldr	r1, [pc, #108]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <HAL_RCC_OscConfig+0x478>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e62:	f7fe feb5 	bl	8001bd0 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e6a:	f7fe feb1 	bl	8001bd0 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e05c      	b.n	8002f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7c:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x416>
 8002e88:	e054      	b.n	8002f34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <HAL_RCC_OscConfig+0x478>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7fe fe9e 	bl	8001bd0 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fe fe9a 	bl	8001bd0 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e045      	b.n	8002f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eaa:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_RCC_OscConfig+0x470>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x444>
 8002eb6:	e03d      	b.n	8002f34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d107      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e038      	b.n	8002f36 <HAL_RCC_OscConfig+0x4e2>
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40007000 	.word	0x40007000
 8002ecc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ed0:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <HAL_RCC_OscConfig+0x4ec>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d028      	beq.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d121      	bne.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d11a      	bne.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f00:	4013      	ands	r3, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d111      	bne.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	085b      	lsrs	r3, r3, #1
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d107      	bne.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d001      	beq.n	8002f34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800

08002f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0cc      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f58:	4b68      	ldr	r3, [pc, #416]	; (80030fc <HAL_RCC_ClockConfig+0x1b8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d90c      	bls.n	8002f80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f66:	4b65      	ldr	r3, [pc, #404]	; (80030fc <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b63      	ldr	r3, [pc, #396]	; (80030fc <HAL_RCC_ClockConfig+0x1b8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0b8      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d020      	beq.n	8002fce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f98:	4b59      	ldr	r3, [pc, #356]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	4a58      	ldr	r2, [pc, #352]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fb0:	4b53      	ldr	r3, [pc, #332]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4a52      	ldr	r2, [pc, #328]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fbc:	4b50      	ldr	r3, [pc, #320]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	494d      	ldr	r1, [pc, #308]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d044      	beq.n	8003064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	4b47      	ldr	r3, [pc, #284]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d119      	bne.n	8003022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e07f      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d003      	beq.n	8003002 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d107      	bne.n	8003012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003002:	4b3f      	ldr	r3, [pc, #252]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d109      	bne.n	8003022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e06f      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003012:	4b3b      	ldr	r3, [pc, #236]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e067      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003022:	4b37      	ldr	r3, [pc, #220]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f023 0203 	bic.w	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	4934      	ldr	r1, [pc, #208]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	4313      	orrs	r3, r2
 8003032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003034:	f7fe fdcc 	bl	8001bd0 <HAL_GetTick>
 8003038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303a:	e00a      	b.n	8003052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800303c:	f7fe fdc8 	bl	8001bd0 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	; 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e04f      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003052:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 020c 	and.w	r2, r3, #12
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	429a      	cmp	r2, r3
 8003062:	d1eb      	bne.n	800303c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003064:	4b25      	ldr	r3, [pc, #148]	; (80030fc <HAL_RCC_ClockConfig+0x1b8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d20c      	bcs.n	800308c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003072:	4b22      	ldr	r3, [pc, #136]	; (80030fc <HAL_RCC_ClockConfig+0x1b8>)
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <HAL_RCC_ClockConfig+0x1b8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d001      	beq.n	800308c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e032      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003098:	4b19      	ldr	r3, [pc, #100]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	4916      	ldr	r1, [pc, #88]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d009      	beq.n	80030ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030b6:	4b12      	ldr	r3, [pc, #72]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	490e      	ldr	r1, [pc, #56]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030ca:	f000 f821 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 80030ce:	4602      	mov	r2, r0
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	490a      	ldr	r1, [pc, #40]	; (8003104 <HAL_RCC_ClockConfig+0x1c0>)
 80030dc:	5ccb      	ldrb	r3, [r1, r3]
 80030de:	fa22 f303 	lsr.w	r3, r2, r3
 80030e2:	4a09      	ldr	r2, [pc, #36]	; (8003108 <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030e6:	4b09      	ldr	r3, [pc, #36]	; (800310c <HAL_RCC_ClockConfig+0x1c8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe fd2c 	bl	8001b48 <HAL_InitTick>

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023c00 	.word	0x40023c00
 8003100:	40023800 	.word	0x40023800
 8003104:	080057c8 	.word	0x080057c8
 8003108:	20000000 	.word	0x20000000
 800310c:	20000004 	.word	0x20000004

08003110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003114:	b090      	sub	sp, #64	; 0x40
 8003116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	637b      	str	r3, [r7, #52]	; 0x34
 800311c:	2300      	movs	r3, #0
 800311e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003120:	2300      	movs	r3, #0
 8003122:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003128:	4b59      	ldr	r3, [pc, #356]	; (8003290 <HAL_RCC_GetSysClockFreq+0x180>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	2b08      	cmp	r3, #8
 8003132:	d00d      	beq.n	8003150 <HAL_RCC_GetSysClockFreq+0x40>
 8003134:	2b08      	cmp	r3, #8
 8003136:	f200 80a1 	bhi.w	800327c <HAL_RCC_GetSysClockFreq+0x16c>
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x34>
 800313e:	2b04      	cmp	r3, #4
 8003140:	d003      	beq.n	800314a <HAL_RCC_GetSysClockFreq+0x3a>
 8003142:	e09b      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003144:	4b53      	ldr	r3, [pc, #332]	; (8003294 <HAL_RCC_GetSysClockFreq+0x184>)
 8003146:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003148:	e09b      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800314a:	4b53      	ldr	r3, [pc, #332]	; (8003298 <HAL_RCC_GetSysClockFreq+0x188>)
 800314c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800314e:	e098      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003150:	4b4f      	ldr	r3, [pc, #316]	; (8003290 <HAL_RCC_GetSysClockFreq+0x180>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003158:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800315a:	4b4d      	ldr	r3, [pc, #308]	; (8003290 <HAL_RCC_GetSysClockFreq+0x180>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d028      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003166:	4b4a      	ldr	r3, [pc, #296]	; (8003290 <HAL_RCC_GetSysClockFreq+0x180>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	099b      	lsrs	r3, r3, #6
 800316c:	2200      	movs	r2, #0
 800316e:	623b      	str	r3, [r7, #32]
 8003170:	627a      	str	r2, [r7, #36]	; 0x24
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003178:	2100      	movs	r1, #0
 800317a:	4b47      	ldr	r3, [pc, #284]	; (8003298 <HAL_RCC_GetSysClockFreq+0x188>)
 800317c:	fb03 f201 	mul.w	r2, r3, r1
 8003180:	2300      	movs	r3, #0
 8003182:	fb00 f303 	mul.w	r3, r0, r3
 8003186:	4413      	add	r3, r2
 8003188:	4a43      	ldr	r2, [pc, #268]	; (8003298 <HAL_RCC_GetSysClockFreq+0x188>)
 800318a:	fba0 1202 	umull	r1, r2, r0, r2
 800318e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003190:	460a      	mov	r2, r1
 8003192:	62ba      	str	r2, [r7, #40]	; 0x28
 8003194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003196:	4413      	add	r3, r2
 8003198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800319a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319c:	2200      	movs	r2, #0
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	61fa      	str	r2, [r7, #28]
 80031a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031aa:	f7fd fcf9 	bl	8000ba0 <__aeabi_uldivmod>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4613      	mov	r3, r2
 80031b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b6:	e053      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b8:	4b35      	ldr	r3, [pc, #212]	; (8003290 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	099b      	lsrs	r3, r3, #6
 80031be:	2200      	movs	r2, #0
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	617a      	str	r2, [r7, #20]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031ca:	f04f 0b00 	mov.w	fp, #0
 80031ce:	4652      	mov	r2, sl
 80031d0:	465b      	mov	r3, fp
 80031d2:	f04f 0000 	mov.w	r0, #0
 80031d6:	f04f 0100 	mov.w	r1, #0
 80031da:	0159      	lsls	r1, r3, #5
 80031dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031e0:	0150      	lsls	r0, r2, #5
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	ebb2 080a 	subs.w	r8, r2, sl
 80031ea:	eb63 090b 	sbc.w	r9, r3, fp
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003202:	ebb2 0408 	subs.w	r4, r2, r8
 8003206:	eb63 0509 	sbc.w	r5, r3, r9
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	00eb      	lsls	r3, r5, #3
 8003214:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003218:	00e2      	lsls	r2, r4, #3
 800321a:	4614      	mov	r4, r2
 800321c:	461d      	mov	r5, r3
 800321e:	eb14 030a 	adds.w	r3, r4, sl
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	eb45 030b 	adc.w	r3, r5, fp
 8003228:	607b      	str	r3, [r7, #4]
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003236:	4629      	mov	r1, r5
 8003238:	028b      	lsls	r3, r1, #10
 800323a:	4621      	mov	r1, r4
 800323c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003240:	4621      	mov	r1, r4
 8003242:	028a      	lsls	r2, r1, #10
 8003244:	4610      	mov	r0, r2
 8003246:	4619      	mov	r1, r3
 8003248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324a:	2200      	movs	r2, #0
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	60fa      	str	r2, [r7, #12]
 8003250:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003254:	f7fd fca4 	bl	8000ba0 <__aeabi_uldivmod>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4613      	mov	r3, r2
 800325e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_RCC_GetSysClockFreq+0x180>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	0c1b      	lsrs	r3, r3, #16
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	3301      	adds	r3, #1
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003270:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800327a:	e002      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_RCC_GetSysClockFreq+0x184>)
 800327e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003284:	4618      	mov	r0, r3
 8003286:	3740      	adds	r7, #64	; 0x40
 8003288:	46bd      	mov	sp, r7
 800328a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800
 8003294:	00f42400 	.word	0x00f42400
 8003298:	017d7840 	.word	0x017d7840

0800329c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032a2:	681b      	ldr	r3, [r3, #0]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20000000 	.word	0x20000000

080032b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032b8:	f7ff fff0 	bl	800329c <HAL_RCC_GetHCLKFreq>
 80032bc:	4602      	mov	r2, r0
 80032be:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	0a9b      	lsrs	r3, r3, #10
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	4903      	ldr	r1, [pc, #12]	; (80032d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ca:	5ccb      	ldrb	r3, [r1, r3]
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40023800 	.word	0x40023800
 80032d8:	080057d8 	.word	0x080057d8

080032dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032e0:	f7ff ffdc 	bl	800329c <HAL_RCC_GetHCLKFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b05      	ldr	r3, [pc, #20]	; (80032fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	0b5b      	lsrs	r3, r3, #13
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	4903      	ldr	r1, [pc, #12]	; (8003300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40023800 	.word	0x40023800
 8003300:	080057d8 	.word	0x080057d8

08003304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e07b      	b.n	800340e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	2b00      	cmp	r3, #0
 800331c:	d108      	bne.n	8003330 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003326:	d009      	beq.n	800333c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	61da      	str	r2, [r3, #28]
 800332e:	e005      	b.n	800333c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fe fa84 	bl	8001864 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003372:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c0:	ea42 0103 	orr.w	r1, r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	0c1b      	lsrs	r3, r3, #16
 80033da:	f003 0104 	and.w	r1, r3, #4
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	f003 0210 	and.w	r2, r3, #16
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69da      	ldr	r2, [r3, #28]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e041      	b.n	80034ac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d106      	bne.n	8003442 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7fe fa79 	bl	8001934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2202      	movs	r2, #2
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3304      	adds	r3, #4
 8003452:	4619      	mov	r1, r3
 8003454:	4610      	mov	r0, r2
 8003456:	f000 fa87 	bl	8003968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d001      	beq.n	80034cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e044      	b.n	8003556 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1e      	ldr	r2, [pc, #120]	; (8003564 <HAL_TIM_Base_Start_IT+0xb0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d018      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x6c>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f6:	d013      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x6c>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1a      	ldr	r2, [pc, #104]	; (8003568 <HAL_TIM_Base_Start_IT+0xb4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00e      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x6c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a19      	ldr	r2, [pc, #100]	; (800356c <HAL_TIM_Base_Start_IT+0xb8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d009      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x6c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a17      	ldr	r2, [pc, #92]	; (8003570 <HAL_TIM_Base_Start_IT+0xbc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d004      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x6c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a16      	ldr	r2, [pc, #88]	; (8003574 <HAL_TIM_Base_Start_IT+0xc0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d111      	bne.n	8003544 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b06      	cmp	r3, #6
 8003530:	d010      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0201 	orr.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003542:	e007      	b.n	8003554 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40010000 	.word	0x40010000
 8003568:	40000400 	.word	0x40000400
 800356c:	40000800 	.word	0x40000800
 8003570:	40000c00 	.word	0x40000c00
 8003574:	40014000 	.word	0x40014000

08003578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b02      	cmp	r3, #2
 800358c:	d122      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b02      	cmp	r3, #2
 800359a:	d11b      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0202 	mvn.w	r2, #2
 80035a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f9b5 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 80035c0:	e005      	b.n	80035ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f9a7 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f9b8 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d122      	bne.n	8003628 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d11b      	bne.n	8003628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0204 	mvn.w	r2, #4
 80035f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2202      	movs	r2, #2
 80035fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f98b 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 8003614:	e005      	b.n	8003622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f97d 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f98e 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b08      	cmp	r3, #8
 8003634:	d122      	bne.n	800367c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b08      	cmp	r3, #8
 8003642:	d11b      	bne.n	800367c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0208 	mvn.w	r2, #8
 800364c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2204      	movs	r2, #4
 8003652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f961 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 8003668:	e005      	b.n	8003676 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f953 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f964 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b10      	cmp	r3, #16
 8003688:	d122      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b10      	cmp	r3, #16
 8003696:	d11b      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0210 	mvn.w	r2, #16
 80036a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2208      	movs	r2, #8
 80036a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f937 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 80036bc:	e005      	b.n	80036ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f929 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f93a 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d10e      	bne.n	80036fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d107      	bne.n	80036fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0201 	mvn.w	r2, #1
 80036f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fd fffc 	bl	80016f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003706:	2b80      	cmp	r3, #128	; 0x80
 8003708:	d10e      	bne.n	8003728 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b80      	cmp	r3, #128	; 0x80
 8003716:	d107      	bne.n	8003728 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fab2 	bl	8003c8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	d10e      	bne.n	8003754 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d107      	bne.n	8003754 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800374c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f8ff 	bl	8003952 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b20      	cmp	r3, #32
 8003760:	d10e      	bne.n	8003780 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b20      	cmp	r3, #32
 800376e:	d107      	bne.n	8003780 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0220 	mvn.w	r2, #32
 8003778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fa7c 	bl	8003c78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_TIM_ConfigClockSource+0x1c>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e0b4      	b.n	800390e <HAL_TIM_ConfigClockSource+0x186>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037dc:	d03e      	beq.n	800385c <HAL_TIM_ConfigClockSource+0xd4>
 80037de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e2:	f200 8087 	bhi.w	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 80037e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ea:	f000 8086 	beq.w	80038fa <HAL_TIM_ConfigClockSource+0x172>
 80037ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f2:	d87f      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 80037f4:	2b70      	cmp	r3, #112	; 0x70
 80037f6:	d01a      	beq.n	800382e <HAL_TIM_ConfigClockSource+0xa6>
 80037f8:	2b70      	cmp	r3, #112	; 0x70
 80037fa:	d87b      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 80037fc:	2b60      	cmp	r3, #96	; 0x60
 80037fe:	d050      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003800:	2b60      	cmp	r3, #96	; 0x60
 8003802:	d877      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003804:	2b50      	cmp	r3, #80	; 0x50
 8003806:	d03c      	beq.n	8003882 <HAL_TIM_ConfigClockSource+0xfa>
 8003808:	2b50      	cmp	r3, #80	; 0x50
 800380a:	d873      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d058      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d86f      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003814:	2b30      	cmp	r3, #48	; 0x30
 8003816:	d064      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003818:	2b30      	cmp	r3, #48	; 0x30
 800381a:	d86b      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 800381c:	2b20      	cmp	r3, #32
 800381e:	d060      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003820:	2b20      	cmp	r3, #32
 8003822:	d867      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d05c      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003828:	2b10      	cmp	r3, #16
 800382a:	d05a      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 800382c:	e062      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6899      	ldr	r1, [r3, #8]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f000 f98d 	bl	8003b5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003850:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	609a      	str	r2, [r3, #8]
      break;
 800385a:	e04f      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	6899      	ldr	r1, [r3, #8]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f000 f976 	bl	8003b5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800387e:	609a      	str	r2, [r3, #8]
      break;
 8003880:	e03c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6859      	ldr	r1, [r3, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	461a      	mov	r2, r3
 8003890:	f000 f8ea 	bl	8003a68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2150      	movs	r1, #80	; 0x50
 800389a:	4618      	mov	r0, r3
 800389c:	f000 f943 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 80038a0:	e02c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6859      	ldr	r1, [r3, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	461a      	mov	r2, r3
 80038b0:	f000 f909 	bl	8003ac6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2160      	movs	r1, #96	; 0x60
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f933 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 80038c0:	e01c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6859      	ldr	r1, [r3, #4]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f000 f8ca 	bl	8003a68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2140      	movs	r1, #64	; 0x40
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f923 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 80038e0:	e00c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4619      	mov	r1, r3
 80038ec:	4610      	mov	r0, r2
 80038ee:	f000 f91a 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 80038f2:	e003      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      break;
 80038f8:	e000      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800390c:	7bfb      	ldrb	r3, [r7, #15]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a34      	ldr	r2, [pc, #208]	; (8003a4c <TIM_Base_SetConfig+0xe4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d00f      	beq.n	80039a0 <TIM_Base_SetConfig+0x38>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003986:	d00b      	beq.n	80039a0 <TIM_Base_SetConfig+0x38>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a31      	ldr	r2, [pc, #196]	; (8003a50 <TIM_Base_SetConfig+0xe8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d007      	beq.n	80039a0 <TIM_Base_SetConfig+0x38>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a30      	ldr	r2, [pc, #192]	; (8003a54 <TIM_Base_SetConfig+0xec>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <TIM_Base_SetConfig+0x38>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a2f      	ldr	r2, [pc, #188]	; (8003a58 <TIM_Base_SetConfig+0xf0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d108      	bne.n	80039b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a25      	ldr	r2, [pc, #148]	; (8003a4c <TIM_Base_SetConfig+0xe4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d01b      	beq.n	80039f2 <TIM_Base_SetConfig+0x8a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d017      	beq.n	80039f2 <TIM_Base_SetConfig+0x8a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a22      	ldr	r2, [pc, #136]	; (8003a50 <TIM_Base_SetConfig+0xe8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <TIM_Base_SetConfig+0x8a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a21      	ldr	r2, [pc, #132]	; (8003a54 <TIM_Base_SetConfig+0xec>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00f      	beq.n	80039f2 <TIM_Base_SetConfig+0x8a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a20      	ldr	r2, [pc, #128]	; (8003a58 <TIM_Base_SetConfig+0xf0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00b      	beq.n	80039f2 <TIM_Base_SetConfig+0x8a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a1f      	ldr	r2, [pc, #124]	; (8003a5c <TIM_Base_SetConfig+0xf4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d007      	beq.n	80039f2 <TIM_Base_SetConfig+0x8a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a1e      	ldr	r2, [pc, #120]	; (8003a60 <TIM_Base_SetConfig+0xf8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d003      	beq.n	80039f2 <TIM_Base_SetConfig+0x8a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a1d      	ldr	r2, [pc, #116]	; (8003a64 <TIM_Base_SetConfig+0xfc>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d108      	bne.n	8003a04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a08      	ldr	r2, [pc, #32]	; (8003a4c <TIM_Base_SetConfig+0xe4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d103      	bne.n	8003a38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	615a      	str	r2, [r3, #20]
}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40010000 	.word	0x40010000
 8003a50:	40000400 	.word	0x40000400
 8003a54:	40000800 	.word	0x40000800
 8003a58:	40000c00 	.word	0x40000c00
 8003a5c:	40014000 	.word	0x40014000
 8003a60:	40014400 	.word	0x40014400
 8003a64:	40014800 	.word	0x40014800

08003a68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	f023 0201 	bic.w	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f023 030a 	bic.w	r3, r3, #10
 8003aa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	621a      	str	r2, [r3, #32]
}
 8003aba:	bf00      	nop
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b087      	sub	sp, #28
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	f023 0210 	bic.w	r2, r3, #16
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003af0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	031b      	lsls	r3, r3, #12
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	621a      	str	r2, [r3, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b085      	sub	sp, #20
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f043 0307 	orr.w	r3, r3, #7
 8003b48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	609a      	str	r2, [r3, #8]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	021a      	lsls	r2, r3, #8
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	609a      	str	r2, [r3, #8]
}
 8003b90:	bf00      	nop
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e050      	b.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a1c      	ldr	r2, [pc, #112]	; (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d018      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c00:	d013      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d00e      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a16      	ldr	r2, [pc, #88]	; (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d009      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a15      	ldr	r2, [pc, #84]	; (8003c70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d004      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a13      	ldr	r2, [pc, #76]	; (8003c74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d10c      	bne.n	8003c44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40010000 	.word	0x40010000
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	40000800 	.word	0x40000800
 8003c70:	40000c00 	.word	0x40000c00
 8003c74:	40014000 	.word	0x40014000

08003c78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e03f      	b.n	8003d32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fd fe5a 	bl	8001980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2224      	movs	r2, #36	; 0x24
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ce2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f929 	bl	8003f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b08a      	sub	sp, #40	; 0x28
 8003d3e:	af02      	add	r7, sp, #8
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d17c      	bne.n	8003e54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <HAL_UART_Transmit+0x2c>
 8003d60:	88fb      	ldrh	r3, [r7, #6]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e075      	b.n	8003e56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_UART_Transmit+0x3e>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e06e      	b.n	8003e56 <HAL_UART_Transmit+0x11c>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2221      	movs	r2, #33	; 0x21
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d8e:	f7fd ff1f 	bl	8001bd0 <HAL_GetTick>
 8003d92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	88fa      	ldrh	r2, [r7, #6]
 8003d98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	88fa      	ldrh	r2, [r7, #6]
 8003d9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da8:	d108      	bne.n	8003dbc <HAL_UART_Transmit+0x82>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d104      	bne.n	8003dbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	e003      	b.n	8003dc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003dcc:	e02a      	b.n	8003e24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2180      	movs	r1, #128	; 0x80
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f840 	bl	8003e5e <UART_WaitOnFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e036      	b.n	8003e56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10b      	bne.n	8003e06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	3302      	adds	r3, #2
 8003e02:	61bb      	str	r3, [r7, #24]
 8003e04:	e007      	b.n	8003e16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	781a      	ldrb	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	3301      	adds	r3, #1
 8003e14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1cf      	bne.n	8003dce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2200      	movs	r2, #0
 8003e36:	2140      	movs	r1, #64	; 0x40
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f810 	bl	8003e5e <UART_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e006      	b.n	8003e56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	e000      	b.n	8003e56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e54:	2302      	movs	r3, #2
  }
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3720      	adds	r7, #32
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b090      	sub	sp, #64	; 0x40
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	603b      	str	r3, [r7, #0]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6e:	e050      	b.n	8003f12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e76:	d04c      	beq.n	8003f12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x30>
 8003e7e:	f7fd fea7 	bl	8001bd0 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d241      	bcs.n	8003f12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	330c      	adds	r3, #12
 8003e94:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	330c      	adds	r3, #12
 8003eac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003eae:	637a      	str	r2, [r7, #52]	; 0x34
 8003eb0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e5      	bne.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3314      	adds	r3, #20
 8003ec8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3314      	adds	r3, #20
 8003ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ee2:	623a      	str	r2, [r7, #32]
 8003ee4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	69f9      	ldr	r1, [r7, #28]
 8003ee8:	6a3a      	ldr	r2, [r7, #32]
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e5      	bne.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e00f      	b.n	8003f32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	bf0c      	ite	eq
 8003f22:	2301      	moveq	r3, #1
 8003f24:	2300      	movne	r3, #0
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d09f      	beq.n	8003e70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3740      	adds	r7, #64	; 0x40
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f40:	b0c0      	sub	sp, #256	; 0x100
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f58:	68d9      	ldr	r1, [r3, #12]
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	ea40 0301 	orr.w	r3, r0, r1
 8003f64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f94:	f021 010c 	bic.w	r1, r1, #12
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb6:	6999      	ldr	r1, [r3, #24]
 8003fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	ea40 0301 	orr.w	r3, r0, r1
 8003fc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4b8f      	ldr	r3, [pc, #572]	; (8004208 <UART_SetConfig+0x2cc>)
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d005      	beq.n	8003fdc <UART_SetConfig+0xa0>
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	4b8d      	ldr	r3, [pc, #564]	; (800420c <UART_SetConfig+0x2d0>)
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d104      	bne.n	8003fe6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fdc:	f7ff f97e 	bl	80032dc <HAL_RCC_GetPCLK2Freq>
 8003fe0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003fe4:	e003      	b.n	8003fee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fe6:	f7ff f965 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 8003fea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff8:	f040 810c 	bne.w	8004214 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004000:	2200      	movs	r2, #0
 8004002:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004006:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800400a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800400e:	4622      	mov	r2, r4
 8004010:	462b      	mov	r3, r5
 8004012:	1891      	adds	r1, r2, r2
 8004014:	65b9      	str	r1, [r7, #88]	; 0x58
 8004016:	415b      	adcs	r3, r3
 8004018:	65fb      	str	r3, [r7, #92]	; 0x5c
 800401a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800401e:	4621      	mov	r1, r4
 8004020:	eb12 0801 	adds.w	r8, r2, r1
 8004024:	4629      	mov	r1, r5
 8004026:	eb43 0901 	adc.w	r9, r3, r1
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800403a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800403e:	4690      	mov	r8, r2
 8004040:	4699      	mov	r9, r3
 8004042:	4623      	mov	r3, r4
 8004044:	eb18 0303 	adds.w	r3, r8, r3
 8004048:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800404c:	462b      	mov	r3, r5
 800404e:	eb49 0303 	adc.w	r3, r9, r3
 8004052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004062:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004066:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800406a:	460b      	mov	r3, r1
 800406c:	18db      	adds	r3, r3, r3
 800406e:	653b      	str	r3, [r7, #80]	; 0x50
 8004070:	4613      	mov	r3, r2
 8004072:	eb42 0303 	adc.w	r3, r2, r3
 8004076:	657b      	str	r3, [r7, #84]	; 0x54
 8004078:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800407c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004080:	f7fc fd8e 	bl	8000ba0 <__aeabi_uldivmod>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4b61      	ldr	r3, [pc, #388]	; (8004210 <UART_SetConfig+0x2d4>)
 800408a:	fba3 2302 	umull	r2, r3, r3, r2
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	011c      	lsls	r4, r3, #4
 8004092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004096:	2200      	movs	r2, #0
 8004098:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800409c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040a4:	4642      	mov	r2, r8
 80040a6:	464b      	mov	r3, r9
 80040a8:	1891      	adds	r1, r2, r2
 80040aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80040ac:	415b      	adcs	r3, r3
 80040ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040b4:	4641      	mov	r1, r8
 80040b6:	eb12 0a01 	adds.w	sl, r2, r1
 80040ba:	4649      	mov	r1, r9
 80040bc:	eb43 0b01 	adc.w	fp, r3, r1
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040d4:	4692      	mov	sl, r2
 80040d6:	469b      	mov	fp, r3
 80040d8:	4643      	mov	r3, r8
 80040da:	eb1a 0303 	adds.w	r3, sl, r3
 80040de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040e2:	464b      	mov	r3, r9
 80040e4:	eb4b 0303 	adc.w	r3, fp, r3
 80040e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004100:	460b      	mov	r3, r1
 8004102:	18db      	adds	r3, r3, r3
 8004104:	643b      	str	r3, [r7, #64]	; 0x40
 8004106:	4613      	mov	r3, r2
 8004108:	eb42 0303 	adc.w	r3, r2, r3
 800410c:	647b      	str	r3, [r7, #68]	; 0x44
 800410e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004112:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004116:	f7fc fd43 	bl	8000ba0 <__aeabi_uldivmod>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4611      	mov	r1, r2
 8004120:	4b3b      	ldr	r3, [pc, #236]	; (8004210 <UART_SetConfig+0x2d4>)
 8004122:	fba3 2301 	umull	r2, r3, r3, r1
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	2264      	movs	r2, #100	; 0x64
 800412a:	fb02 f303 	mul.w	r3, r2, r3
 800412e:	1acb      	subs	r3, r1, r3
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004136:	4b36      	ldr	r3, [pc, #216]	; (8004210 <UART_SetConfig+0x2d4>)
 8004138:	fba3 2302 	umull	r2, r3, r3, r2
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004144:	441c      	add	r4, r3
 8004146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800414a:	2200      	movs	r2, #0
 800414c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004150:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004154:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004158:	4642      	mov	r2, r8
 800415a:	464b      	mov	r3, r9
 800415c:	1891      	adds	r1, r2, r2
 800415e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004160:	415b      	adcs	r3, r3
 8004162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004164:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004168:	4641      	mov	r1, r8
 800416a:	1851      	adds	r1, r2, r1
 800416c:	6339      	str	r1, [r7, #48]	; 0x30
 800416e:	4649      	mov	r1, r9
 8004170:	414b      	adcs	r3, r1
 8004172:	637b      	str	r3, [r7, #52]	; 0x34
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004180:	4659      	mov	r1, fp
 8004182:	00cb      	lsls	r3, r1, #3
 8004184:	4651      	mov	r1, sl
 8004186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800418a:	4651      	mov	r1, sl
 800418c:	00ca      	lsls	r2, r1, #3
 800418e:	4610      	mov	r0, r2
 8004190:	4619      	mov	r1, r3
 8004192:	4603      	mov	r3, r0
 8004194:	4642      	mov	r2, r8
 8004196:	189b      	adds	r3, r3, r2
 8004198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800419c:	464b      	mov	r3, r9
 800419e:	460a      	mov	r2, r1
 80041a0:	eb42 0303 	adc.w	r3, r2, r3
 80041a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041bc:	460b      	mov	r3, r1
 80041be:	18db      	adds	r3, r3, r3
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041c2:	4613      	mov	r3, r2
 80041c4:	eb42 0303 	adc.w	r3, r2, r3
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041d2:	f7fc fce5 	bl	8000ba0 <__aeabi_uldivmod>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <UART_SetConfig+0x2d4>)
 80041dc:	fba3 1302 	umull	r1, r3, r3, r2
 80041e0:	095b      	lsrs	r3, r3, #5
 80041e2:	2164      	movs	r1, #100	; 0x64
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	3332      	adds	r3, #50	; 0x32
 80041ee:	4a08      	ldr	r2, [pc, #32]	; (8004210 <UART_SetConfig+0x2d4>)
 80041f0:	fba2 2303 	umull	r2, r3, r2, r3
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	f003 0207 	and.w	r2, r3, #7
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4422      	add	r2, r4
 8004202:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004204:	e105      	b.n	8004412 <UART_SetConfig+0x4d6>
 8004206:	bf00      	nop
 8004208:	40011000 	.word	0x40011000
 800420c:	40011400 	.word	0x40011400
 8004210:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004218:	2200      	movs	r2, #0
 800421a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800421e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004222:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004226:	4642      	mov	r2, r8
 8004228:	464b      	mov	r3, r9
 800422a:	1891      	adds	r1, r2, r2
 800422c:	6239      	str	r1, [r7, #32]
 800422e:	415b      	adcs	r3, r3
 8004230:	627b      	str	r3, [r7, #36]	; 0x24
 8004232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004236:	4641      	mov	r1, r8
 8004238:	1854      	adds	r4, r2, r1
 800423a:	4649      	mov	r1, r9
 800423c:	eb43 0501 	adc.w	r5, r3, r1
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	00eb      	lsls	r3, r5, #3
 800424a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800424e:	00e2      	lsls	r2, r4, #3
 8004250:	4614      	mov	r4, r2
 8004252:	461d      	mov	r5, r3
 8004254:	4643      	mov	r3, r8
 8004256:	18e3      	adds	r3, r4, r3
 8004258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800425c:	464b      	mov	r3, r9
 800425e:	eb45 0303 	adc.w	r3, r5, r3
 8004262:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004272:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004282:	4629      	mov	r1, r5
 8004284:	008b      	lsls	r3, r1, #2
 8004286:	4621      	mov	r1, r4
 8004288:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800428c:	4621      	mov	r1, r4
 800428e:	008a      	lsls	r2, r1, #2
 8004290:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004294:	f7fc fc84 	bl	8000ba0 <__aeabi_uldivmod>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4b60      	ldr	r3, [pc, #384]	; (8004420 <UART_SetConfig+0x4e4>)
 800429e:	fba3 2302 	umull	r2, r3, r3, r2
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	011c      	lsls	r4, r3, #4
 80042a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042b8:	4642      	mov	r2, r8
 80042ba:	464b      	mov	r3, r9
 80042bc:	1891      	adds	r1, r2, r2
 80042be:	61b9      	str	r1, [r7, #24]
 80042c0:	415b      	adcs	r3, r3
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042c8:	4641      	mov	r1, r8
 80042ca:	1851      	adds	r1, r2, r1
 80042cc:	6139      	str	r1, [r7, #16]
 80042ce:	4649      	mov	r1, r9
 80042d0:	414b      	adcs	r3, r1
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042e0:	4659      	mov	r1, fp
 80042e2:	00cb      	lsls	r3, r1, #3
 80042e4:	4651      	mov	r1, sl
 80042e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ea:	4651      	mov	r1, sl
 80042ec:	00ca      	lsls	r2, r1, #3
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	4603      	mov	r3, r0
 80042f4:	4642      	mov	r2, r8
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042fc:	464b      	mov	r3, r9
 80042fe:	460a      	mov	r2, r1
 8004300:	eb42 0303 	adc.w	r3, r2, r3
 8004304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	67bb      	str	r3, [r7, #120]	; 0x78
 8004312:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004320:	4649      	mov	r1, r9
 8004322:	008b      	lsls	r3, r1, #2
 8004324:	4641      	mov	r1, r8
 8004326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800432a:	4641      	mov	r1, r8
 800432c:	008a      	lsls	r2, r1, #2
 800432e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004332:	f7fc fc35 	bl	8000ba0 <__aeabi_uldivmod>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4b39      	ldr	r3, [pc, #228]	; (8004420 <UART_SetConfig+0x4e4>)
 800433c:	fba3 1302 	umull	r1, r3, r3, r2
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	2164      	movs	r1, #100	; 0x64
 8004344:	fb01 f303 	mul.w	r3, r1, r3
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	3332      	adds	r3, #50	; 0x32
 800434e:	4a34      	ldr	r2, [pc, #208]	; (8004420 <UART_SetConfig+0x4e4>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800435a:	441c      	add	r4, r3
 800435c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004360:	2200      	movs	r2, #0
 8004362:	673b      	str	r3, [r7, #112]	; 0x70
 8004364:	677a      	str	r2, [r7, #116]	; 0x74
 8004366:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800436a:	4642      	mov	r2, r8
 800436c:	464b      	mov	r3, r9
 800436e:	1891      	adds	r1, r2, r2
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	415b      	adcs	r3, r3
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800437a:	4641      	mov	r1, r8
 800437c:	1851      	adds	r1, r2, r1
 800437e:	6039      	str	r1, [r7, #0]
 8004380:	4649      	mov	r1, r9
 8004382:	414b      	adcs	r3, r1
 8004384:	607b      	str	r3, [r7, #4]
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004392:	4659      	mov	r1, fp
 8004394:	00cb      	lsls	r3, r1, #3
 8004396:	4651      	mov	r1, sl
 8004398:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800439c:	4651      	mov	r1, sl
 800439e:	00ca      	lsls	r2, r1, #3
 80043a0:	4610      	mov	r0, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	4603      	mov	r3, r0
 80043a6:	4642      	mov	r2, r8
 80043a8:	189b      	adds	r3, r3, r2
 80043aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80043ac:	464b      	mov	r3, r9
 80043ae:	460a      	mov	r2, r1
 80043b0:	eb42 0303 	adc.w	r3, r2, r3
 80043b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	663b      	str	r3, [r7, #96]	; 0x60
 80043c0:	667a      	str	r2, [r7, #100]	; 0x64
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043ce:	4649      	mov	r1, r9
 80043d0:	008b      	lsls	r3, r1, #2
 80043d2:	4641      	mov	r1, r8
 80043d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043d8:	4641      	mov	r1, r8
 80043da:	008a      	lsls	r2, r1, #2
 80043dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043e0:	f7fc fbde 	bl	8000ba0 <__aeabi_uldivmod>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <UART_SetConfig+0x4e4>)
 80043ea:	fba3 1302 	umull	r1, r3, r3, r2
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	2164      	movs	r1, #100	; 0x64
 80043f2:	fb01 f303 	mul.w	r3, r1, r3
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	3332      	adds	r3, #50	; 0x32
 80043fc:	4a08      	ldr	r2, [pc, #32]	; (8004420 <UART_SetConfig+0x4e4>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	f003 020f 	and.w	r2, r3, #15
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4422      	add	r2, r4
 8004410:	609a      	str	r2, [r3, #8]
}
 8004412:	bf00      	nop
 8004414:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004418:	46bd      	mov	sp, r7
 800441a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800441e:	bf00      	nop
 8004420:	51eb851f 	.word	0x51eb851f

08004424 <__errno>:
 8004424:	4b01      	ldr	r3, [pc, #4]	; (800442c <__errno+0x8>)
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	2000000c 	.word	0x2000000c

08004430 <__libc_init_array>:
 8004430:	b570      	push	{r4, r5, r6, lr}
 8004432:	4d0d      	ldr	r5, [pc, #52]	; (8004468 <__libc_init_array+0x38>)
 8004434:	4c0d      	ldr	r4, [pc, #52]	; (800446c <__libc_init_array+0x3c>)
 8004436:	1b64      	subs	r4, r4, r5
 8004438:	10a4      	asrs	r4, r4, #2
 800443a:	2600      	movs	r6, #0
 800443c:	42a6      	cmp	r6, r4
 800443e:	d109      	bne.n	8004454 <__libc_init_array+0x24>
 8004440:	4d0b      	ldr	r5, [pc, #44]	; (8004470 <__libc_init_array+0x40>)
 8004442:	4c0c      	ldr	r4, [pc, #48]	; (8004474 <__libc_init_array+0x44>)
 8004444:	f001 f99e 	bl	8005784 <_init>
 8004448:	1b64      	subs	r4, r4, r5
 800444a:	10a4      	asrs	r4, r4, #2
 800444c:	2600      	movs	r6, #0
 800444e:	42a6      	cmp	r6, r4
 8004450:	d105      	bne.n	800445e <__libc_init_array+0x2e>
 8004452:	bd70      	pop	{r4, r5, r6, pc}
 8004454:	f855 3b04 	ldr.w	r3, [r5], #4
 8004458:	4798      	blx	r3
 800445a:	3601      	adds	r6, #1
 800445c:	e7ee      	b.n	800443c <__libc_init_array+0xc>
 800445e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004462:	4798      	blx	r3
 8004464:	3601      	adds	r6, #1
 8004466:	e7f2      	b.n	800444e <__libc_init_array+0x1e>
 8004468:	080059c0 	.word	0x080059c0
 800446c:	080059c0 	.word	0x080059c0
 8004470:	080059c0 	.word	0x080059c0
 8004474:	080059c4 	.word	0x080059c4

08004478 <memset>:
 8004478:	4402      	add	r2, r0
 800447a:	4603      	mov	r3, r0
 800447c:	4293      	cmp	r3, r2
 800447e:	d100      	bne.n	8004482 <memset+0xa>
 8004480:	4770      	bx	lr
 8004482:	f803 1b01 	strb.w	r1, [r3], #1
 8004486:	e7f9      	b.n	800447c <memset+0x4>

08004488 <cos>:
 8004488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800448a:	ec53 2b10 	vmov	r2, r3, d0
 800448e:	4826      	ldr	r0, [pc, #152]	; (8004528 <cos+0xa0>)
 8004490:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004494:	4281      	cmp	r1, r0
 8004496:	dc06      	bgt.n	80044a6 <cos+0x1e>
 8004498:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8004520 <cos+0x98>
 800449c:	b005      	add	sp, #20
 800449e:	f85d eb04 	ldr.w	lr, [sp], #4
 80044a2:	f000 bb89 	b.w	8004bb8 <__kernel_cos>
 80044a6:	4821      	ldr	r0, [pc, #132]	; (800452c <cos+0xa4>)
 80044a8:	4281      	cmp	r1, r0
 80044aa:	dd09      	ble.n	80044c0 <cos+0x38>
 80044ac:	ee10 0a10 	vmov	r0, s0
 80044b0:	4619      	mov	r1, r3
 80044b2:	f7fb fe95 	bl	80001e0 <__aeabi_dsub>
 80044b6:	ec41 0b10 	vmov	d0, r0, r1
 80044ba:	b005      	add	sp, #20
 80044bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80044c0:	4668      	mov	r0, sp
 80044c2:	f000 f8b9 	bl	8004638 <__ieee754_rem_pio2>
 80044c6:	f000 0003 	and.w	r0, r0, #3
 80044ca:	2801      	cmp	r0, #1
 80044cc:	d00b      	beq.n	80044e6 <cos+0x5e>
 80044ce:	2802      	cmp	r0, #2
 80044d0:	d016      	beq.n	8004500 <cos+0x78>
 80044d2:	b9e0      	cbnz	r0, 800450e <cos+0x86>
 80044d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80044d8:	ed9d 0b00 	vldr	d0, [sp]
 80044dc:	f000 fb6c 	bl	8004bb8 <__kernel_cos>
 80044e0:	ec51 0b10 	vmov	r0, r1, d0
 80044e4:	e7e7      	b.n	80044b6 <cos+0x2e>
 80044e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80044ea:	ed9d 0b00 	vldr	d0, [sp]
 80044ee:	f000 ff7b 	bl	80053e8 <__kernel_sin>
 80044f2:	ec53 2b10 	vmov	r2, r3, d0
 80044f6:	ee10 0a10 	vmov	r0, s0
 80044fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80044fe:	e7da      	b.n	80044b6 <cos+0x2e>
 8004500:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004504:	ed9d 0b00 	vldr	d0, [sp]
 8004508:	f000 fb56 	bl	8004bb8 <__kernel_cos>
 800450c:	e7f1      	b.n	80044f2 <cos+0x6a>
 800450e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004512:	ed9d 0b00 	vldr	d0, [sp]
 8004516:	2001      	movs	r0, #1
 8004518:	f000 ff66 	bl	80053e8 <__kernel_sin>
 800451c:	e7e0      	b.n	80044e0 <cos+0x58>
 800451e:	bf00      	nop
	...
 8004528:	3fe921fb 	.word	0x3fe921fb
 800452c:	7fefffff 	.word	0x7fefffff

08004530 <sin>:
 8004530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004532:	ec53 2b10 	vmov	r2, r3, d0
 8004536:	4828      	ldr	r0, [pc, #160]	; (80045d8 <sin+0xa8>)
 8004538:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800453c:	4281      	cmp	r1, r0
 800453e:	dc07      	bgt.n	8004550 <sin+0x20>
 8004540:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80045d0 <sin+0xa0>
 8004544:	2000      	movs	r0, #0
 8004546:	b005      	add	sp, #20
 8004548:	f85d eb04 	ldr.w	lr, [sp], #4
 800454c:	f000 bf4c 	b.w	80053e8 <__kernel_sin>
 8004550:	4822      	ldr	r0, [pc, #136]	; (80045dc <sin+0xac>)
 8004552:	4281      	cmp	r1, r0
 8004554:	dd09      	ble.n	800456a <sin+0x3a>
 8004556:	ee10 0a10 	vmov	r0, s0
 800455a:	4619      	mov	r1, r3
 800455c:	f7fb fe40 	bl	80001e0 <__aeabi_dsub>
 8004560:	ec41 0b10 	vmov	d0, r0, r1
 8004564:	b005      	add	sp, #20
 8004566:	f85d fb04 	ldr.w	pc, [sp], #4
 800456a:	4668      	mov	r0, sp
 800456c:	f000 f864 	bl	8004638 <__ieee754_rem_pio2>
 8004570:	f000 0003 	and.w	r0, r0, #3
 8004574:	2801      	cmp	r0, #1
 8004576:	d00c      	beq.n	8004592 <sin+0x62>
 8004578:	2802      	cmp	r0, #2
 800457a:	d011      	beq.n	80045a0 <sin+0x70>
 800457c:	b9f0      	cbnz	r0, 80045bc <sin+0x8c>
 800457e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004582:	ed9d 0b00 	vldr	d0, [sp]
 8004586:	2001      	movs	r0, #1
 8004588:	f000 ff2e 	bl	80053e8 <__kernel_sin>
 800458c:	ec51 0b10 	vmov	r0, r1, d0
 8004590:	e7e6      	b.n	8004560 <sin+0x30>
 8004592:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004596:	ed9d 0b00 	vldr	d0, [sp]
 800459a:	f000 fb0d 	bl	8004bb8 <__kernel_cos>
 800459e:	e7f5      	b.n	800458c <sin+0x5c>
 80045a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80045a4:	ed9d 0b00 	vldr	d0, [sp]
 80045a8:	2001      	movs	r0, #1
 80045aa:	f000 ff1d 	bl	80053e8 <__kernel_sin>
 80045ae:	ec53 2b10 	vmov	r2, r3, d0
 80045b2:	ee10 0a10 	vmov	r0, s0
 80045b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80045ba:	e7d1      	b.n	8004560 <sin+0x30>
 80045bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80045c0:	ed9d 0b00 	vldr	d0, [sp]
 80045c4:	f000 faf8 	bl	8004bb8 <__kernel_cos>
 80045c8:	e7f1      	b.n	80045ae <sin+0x7e>
 80045ca:	bf00      	nop
 80045cc:	f3af 8000 	nop.w
	...
 80045d8:	3fe921fb 	.word	0x3fe921fb
 80045dc:	7fefffff 	.word	0x7fefffff

080045e0 <sqrt>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	ed2d 8b02 	vpush	{d8}
 80045e6:	ec55 4b10 	vmov	r4, r5, d0
 80045ea:	f000 fa31 	bl	8004a50 <__ieee754_sqrt>
 80045ee:	4622      	mov	r2, r4
 80045f0:	462b      	mov	r3, r5
 80045f2:	4620      	mov	r0, r4
 80045f4:	4629      	mov	r1, r5
 80045f6:	eeb0 8a40 	vmov.f32	s16, s0
 80045fa:	eef0 8a60 	vmov.f32	s17, s1
 80045fe:	f7fc fa41 	bl	8000a84 <__aeabi_dcmpun>
 8004602:	b990      	cbnz	r0, 800462a <sqrt+0x4a>
 8004604:	2200      	movs	r2, #0
 8004606:	2300      	movs	r3, #0
 8004608:	4620      	mov	r0, r4
 800460a:	4629      	mov	r1, r5
 800460c:	f7fc fa12 	bl	8000a34 <__aeabi_dcmplt>
 8004610:	b158      	cbz	r0, 800462a <sqrt+0x4a>
 8004612:	f7ff ff07 	bl	8004424 <__errno>
 8004616:	2321      	movs	r3, #33	; 0x21
 8004618:	6003      	str	r3, [r0, #0]
 800461a:	2200      	movs	r2, #0
 800461c:	2300      	movs	r3, #0
 800461e:	4610      	mov	r0, r2
 8004620:	4619      	mov	r1, r3
 8004622:	f7fc f8bf 	bl	80007a4 <__aeabi_ddiv>
 8004626:	ec41 0b18 	vmov	d8, r0, r1
 800462a:	eeb0 0a48 	vmov.f32	s0, s16
 800462e:	eef0 0a68 	vmov.f32	s1, s17
 8004632:	ecbd 8b02 	vpop	{d8}
 8004636:	bd38      	pop	{r3, r4, r5, pc}

08004638 <__ieee754_rem_pio2>:
 8004638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800463c:	ed2d 8b02 	vpush	{d8}
 8004640:	ec55 4b10 	vmov	r4, r5, d0
 8004644:	4bca      	ldr	r3, [pc, #808]	; (8004970 <__ieee754_rem_pio2+0x338>)
 8004646:	b08b      	sub	sp, #44	; 0x2c
 8004648:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800464c:	4598      	cmp	r8, r3
 800464e:	4682      	mov	sl, r0
 8004650:	9502      	str	r5, [sp, #8]
 8004652:	dc08      	bgt.n	8004666 <__ieee754_rem_pio2+0x2e>
 8004654:	2200      	movs	r2, #0
 8004656:	2300      	movs	r3, #0
 8004658:	ed80 0b00 	vstr	d0, [r0]
 800465c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004660:	f04f 0b00 	mov.w	fp, #0
 8004664:	e028      	b.n	80046b8 <__ieee754_rem_pio2+0x80>
 8004666:	4bc3      	ldr	r3, [pc, #780]	; (8004974 <__ieee754_rem_pio2+0x33c>)
 8004668:	4598      	cmp	r8, r3
 800466a:	dc78      	bgt.n	800475e <__ieee754_rem_pio2+0x126>
 800466c:	9b02      	ldr	r3, [sp, #8]
 800466e:	4ec2      	ldr	r6, [pc, #776]	; (8004978 <__ieee754_rem_pio2+0x340>)
 8004670:	2b00      	cmp	r3, #0
 8004672:	ee10 0a10 	vmov	r0, s0
 8004676:	a3b0      	add	r3, pc, #704	; (adr r3, 8004938 <__ieee754_rem_pio2+0x300>)
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	4629      	mov	r1, r5
 800467e:	dd39      	ble.n	80046f4 <__ieee754_rem_pio2+0xbc>
 8004680:	f7fb fdae 	bl	80001e0 <__aeabi_dsub>
 8004684:	45b0      	cmp	r8, r6
 8004686:	4604      	mov	r4, r0
 8004688:	460d      	mov	r5, r1
 800468a:	d01b      	beq.n	80046c4 <__ieee754_rem_pio2+0x8c>
 800468c:	a3ac      	add	r3, pc, #688	; (adr r3, 8004940 <__ieee754_rem_pio2+0x308>)
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f7fb fda5 	bl	80001e0 <__aeabi_dsub>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	e9ca 2300 	strd	r2, r3, [sl]
 800469e:	4620      	mov	r0, r4
 80046a0:	4629      	mov	r1, r5
 80046a2:	f7fb fd9d 	bl	80001e0 <__aeabi_dsub>
 80046a6:	a3a6      	add	r3, pc, #664	; (adr r3, 8004940 <__ieee754_rem_pio2+0x308>)
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f7fb fd98 	bl	80001e0 <__aeabi_dsub>
 80046b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80046b4:	f04f 0b01 	mov.w	fp, #1
 80046b8:	4658      	mov	r0, fp
 80046ba:	b00b      	add	sp, #44	; 0x2c
 80046bc:	ecbd 8b02 	vpop	{d8}
 80046c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c4:	a3a0      	add	r3, pc, #640	; (adr r3, 8004948 <__ieee754_rem_pio2+0x310>)
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	f7fb fd89 	bl	80001e0 <__aeabi_dsub>
 80046ce:	a3a0      	add	r3, pc, #640	; (adr r3, 8004950 <__ieee754_rem_pio2+0x318>)
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	4604      	mov	r4, r0
 80046d6:	460d      	mov	r5, r1
 80046d8:	f7fb fd82 	bl	80001e0 <__aeabi_dsub>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	e9ca 2300 	strd	r2, r3, [sl]
 80046e4:	4620      	mov	r0, r4
 80046e6:	4629      	mov	r1, r5
 80046e8:	f7fb fd7a 	bl	80001e0 <__aeabi_dsub>
 80046ec:	a398      	add	r3, pc, #608	; (adr r3, 8004950 <__ieee754_rem_pio2+0x318>)
 80046ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f2:	e7db      	b.n	80046ac <__ieee754_rem_pio2+0x74>
 80046f4:	f7fb fd76 	bl	80001e4 <__adddf3>
 80046f8:	45b0      	cmp	r8, r6
 80046fa:	4604      	mov	r4, r0
 80046fc:	460d      	mov	r5, r1
 80046fe:	d016      	beq.n	800472e <__ieee754_rem_pio2+0xf6>
 8004700:	a38f      	add	r3, pc, #572	; (adr r3, 8004940 <__ieee754_rem_pio2+0x308>)
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	f7fb fd6d 	bl	80001e4 <__adddf3>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	e9ca 2300 	strd	r2, r3, [sl]
 8004712:	4620      	mov	r0, r4
 8004714:	4629      	mov	r1, r5
 8004716:	f7fb fd63 	bl	80001e0 <__aeabi_dsub>
 800471a:	a389      	add	r3, pc, #548	; (adr r3, 8004940 <__ieee754_rem_pio2+0x308>)
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	f7fb fd60 	bl	80001e4 <__adddf3>
 8004724:	f04f 3bff 	mov.w	fp, #4294967295
 8004728:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800472c:	e7c4      	b.n	80046b8 <__ieee754_rem_pio2+0x80>
 800472e:	a386      	add	r3, pc, #536	; (adr r3, 8004948 <__ieee754_rem_pio2+0x310>)
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	f7fb fd56 	bl	80001e4 <__adddf3>
 8004738:	a385      	add	r3, pc, #532	; (adr r3, 8004950 <__ieee754_rem_pio2+0x318>)
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	4604      	mov	r4, r0
 8004740:	460d      	mov	r5, r1
 8004742:	f7fb fd4f 	bl	80001e4 <__adddf3>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	e9ca 2300 	strd	r2, r3, [sl]
 800474e:	4620      	mov	r0, r4
 8004750:	4629      	mov	r1, r5
 8004752:	f7fb fd45 	bl	80001e0 <__aeabi_dsub>
 8004756:	a37e      	add	r3, pc, #504	; (adr r3, 8004950 <__ieee754_rem_pio2+0x318>)
 8004758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475c:	e7e0      	b.n	8004720 <__ieee754_rem_pio2+0xe8>
 800475e:	4b87      	ldr	r3, [pc, #540]	; (800497c <__ieee754_rem_pio2+0x344>)
 8004760:	4598      	cmp	r8, r3
 8004762:	f300 80d9 	bgt.w	8004918 <__ieee754_rem_pio2+0x2e0>
 8004766:	f000 fefd 	bl	8005564 <fabs>
 800476a:	ec55 4b10 	vmov	r4, r5, d0
 800476e:	ee10 0a10 	vmov	r0, s0
 8004772:	a379      	add	r3, pc, #484	; (adr r3, 8004958 <__ieee754_rem_pio2+0x320>)
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	4629      	mov	r1, r5
 800477a:	f7fb fee9 	bl	8000550 <__aeabi_dmul>
 800477e:	4b80      	ldr	r3, [pc, #512]	; (8004980 <__ieee754_rem_pio2+0x348>)
 8004780:	2200      	movs	r2, #0
 8004782:	f7fb fd2f 	bl	80001e4 <__adddf3>
 8004786:	f7fc f993 	bl	8000ab0 <__aeabi_d2iz>
 800478a:	4683      	mov	fp, r0
 800478c:	f7fb fe76 	bl	800047c <__aeabi_i2d>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	ec43 2b18 	vmov	d8, r2, r3
 8004798:	a367      	add	r3, pc, #412	; (adr r3, 8004938 <__ieee754_rem_pio2+0x300>)
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	f7fb fed7 	bl	8000550 <__aeabi_dmul>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4620      	mov	r0, r4
 80047a8:	4629      	mov	r1, r5
 80047aa:	f7fb fd19 	bl	80001e0 <__aeabi_dsub>
 80047ae:	a364      	add	r3, pc, #400	; (adr r3, 8004940 <__ieee754_rem_pio2+0x308>)
 80047b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b4:	4606      	mov	r6, r0
 80047b6:	460f      	mov	r7, r1
 80047b8:	ec51 0b18 	vmov	r0, r1, d8
 80047bc:	f7fb fec8 	bl	8000550 <__aeabi_dmul>
 80047c0:	f1bb 0f1f 	cmp.w	fp, #31
 80047c4:	4604      	mov	r4, r0
 80047c6:	460d      	mov	r5, r1
 80047c8:	dc0d      	bgt.n	80047e6 <__ieee754_rem_pio2+0x1ae>
 80047ca:	4b6e      	ldr	r3, [pc, #440]	; (8004984 <__ieee754_rem_pio2+0x34c>)
 80047cc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80047d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d4:	4543      	cmp	r3, r8
 80047d6:	d006      	beq.n	80047e6 <__ieee754_rem_pio2+0x1ae>
 80047d8:	4622      	mov	r2, r4
 80047da:	462b      	mov	r3, r5
 80047dc:	4630      	mov	r0, r6
 80047de:	4639      	mov	r1, r7
 80047e0:	f7fb fcfe 	bl	80001e0 <__aeabi_dsub>
 80047e4:	e00f      	b.n	8004806 <__ieee754_rem_pio2+0x1ce>
 80047e6:	462b      	mov	r3, r5
 80047e8:	4622      	mov	r2, r4
 80047ea:	4630      	mov	r0, r6
 80047ec:	4639      	mov	r1, r7
 80047ee:	f7fb fcf7 	bl	80001e0 <__aeabi_dsub>
 80047f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80047f6:	9303      	str	r3, [sp, #12]
 80047f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80047fc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004800:	f1b8 0f10 	cmp.w	r8, #16
 8004804:	dc02      	bgt.n	800480c <__ieee754_rem_pio2+0x1d4>
 8004806:	e9ca 0100 	strd	r0, r1, [sl]
 800480a:	e039      	b.n	8004880 <__ieee754_rem_pio2+0x248>
 800480c:	a34e      	add	r3, pc, #312	; (adr r3, 8004948 <__ieee754_rem_pio2+0x310>)
 800480e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004812:	ec51 0b18 	vmov	r0, r1, d8
 8004816:	f7fb fe9b 	bl	8000550 <__aeabi_dmul>
 800481a:	4604      	mov	r4, r0
 800481c:	460d      	mov	r5, r1
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4630      	mov	r0, r6
 8004824:	4639      	mov	r1, r7
 8004826:	f7fb fcdb 	bl	80001e0 <__aeabi_dsub>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4680      	mov	r8, r0
 8004830:	4689      	mov	r9, r1
 8004832:	4630      	mov	r0, r6
 8004834:	4639      	mov	r1, r7
 8004836:	f7fb fcd3 	bl	80001e0 <__aeabi_dsub>
 800483a:	4622      	mov	r2, r4
 800483c:	462b      	mov	r3, r5
 800483e:	f7fb fccf 	bl	80001e0 <__aeabi_dsub>
 8004842:	a343      	add	r3, pc, #268	; (adr r3, 8004950 <__ieee754_rem_pio2+0x318>)
 8004844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004848:	4604      	mov	r4, r0
 800484a:	460d      	mov	r5, r1
 800484c:	ec51 0b18 	vmov	r0, r1, d8
 8004850:	f7fb fe7e 	bl	8000550 <__aeabi_dmul>
 8004854:	4622      	mov	r2, r4
 8004856:	462b      	mov	r3, r5
 8004858:	f7fb fcc2 	bl	80001e0 <__aeabi_dsub>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4604      	mov	r4, r0
 8004862:	460d      	mov	r5, r1
 8004864:	4640      	mov	r0, r8
 8004866:	4649      	mov	r1, r9
 8004868:	f7fb fcba 	bl	80001e0 <__aeabi_dsub>
 800486c:	9a03      	ldr	r2, [sp, #12]
 800486e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b31      	cmp	r3, #49	; 0x31
 8004876:	dc24      	bgt.n	80048c2 <__ieee754_rem_pio2+0x28a>
 8004878:	e9ca 0100 	strd	r0, r1, [sl]
 800487c:	4646      	mov	r6, r8
 800487e:	464f      	mov	r7, r9
 8004880:	e9da 8900 	ldrd	r8, r9, [sl]
 8004884:	4630      	mov	r0, r6
 8004886:	4642      	mov	r2, r8
 8004888:	464b      	mov	r3, r9
 800488a:	4639      	mov	r1, r7
 800488c:	f7fb fca8 	bl	80001e0 <__aeabi_dsub>
 8004890:	462b      	mov	r3, r5
 8004892:	4622      	mov	r2, r4
 8004894:	f7fb fca4 	bl	80001e0 <__aeabi_dsub>
 8004898:	9b02      	ldr	r3, [sp, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80048a0:	f6bf af0a 	bge.w	80046b8 <__ieee754_rem_pio2+0x80>
 80048a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80048a8:	f8ca 3004 	str.w	r3, [sl, #4]
 80048ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80048b0:	f8ca 8000 	str.w	r8, [sl]
 80048b4:	f8ca 0008 	str.w	r0, [sl, #8]
 80048b8:	f8ca 300c 	str.w	r3, [sl, #12]
 80048bc:	f1cb 0b00 	rsb	fp, fp, #0
 80048c0:	e6fa      	b.n	80046b8 <__ieee754_rem_pio2+0x80>
 80048c2:	a327      	add	r3, pc, #156	; (adr r3, 8004960 <__ieee754_rem_pio2+0x328>)
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	ec51 0b18 	vmov	r0, r1, d8
 80048cc:	f7fb fe40 	bl	8000550 <__aeabi_dmul>
 80048d0:	4604      	mov	r4, r0
 80048d2:	460d      	mov	r5, r1
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4640      	mov	r0, r8
 80048da:	4649      	mov	r1, r9
 80048dc:	f7fb fc80 	bl	80001e0 <__aeabi_dsub>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4606      	mov	r6, r0
 80048e6:	460f      	mov	r7, r1
 80048e8:	4640      	mov	r0, r8
 80048ea:	4649      	mov	r1, r9
 80048ec:	f7fb fc78 	bl	80001e0 <__aeabi_dsub>
 80048f0:	4622      	mov	r2, r4
 80048f2:	462b      	mov	r3, r5
 80048f4:	f7fb fc74 	bl	80001e0 <__aeabi_dsub>
 80048f8:	a31b      	add	r3, pc, #108	; (adr r3, 8004968 <__ieee754_rem_pio2+0x330>)
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	4604      	mov	r4, r0
 8004900:	460d      	mov	r5, r1
 8004902:	ec51 0b18 	vmov	r0, r1, d8
 8004906:	f7fb fe23 	bl	8000550 <__aeabi_dmul>
 800490a:	4622      	mov	r2, r4
 800490c:	462b      	mov	r3, r5
 800490e:	f7fb fc67 	bl	80001e0 <__aeabi_dsub>
 8004912:	4604      	mov	r4, r0
 8004914:	460d      	mov	r5, r1
 8004916:	e75f      	b.n	80047d8 <__ieee754_rem_pio2+0x1a0>
 8004918:	4b1b      	ldr	r3, [pc, #108]	; (8004988 <__ieee754_rem_pio2+0x350>)
 800491a:	4598      	cmp	r8, r3
 800491c:	dd36      	ble.n	800498c <__ieee754_rem_pio2+0x354>
 800491e:	ee10 2a10 	vmov	r2, s0
 8004922:	462b      	mov	r3, r5
 8004924:	4620      	mov	r0, r4
 8004926:	4629      	mov	r1, r5
 8004928:	f7fb fc5a 	bl	80001e0 <__aeabi_dsub>
 800492c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004930:	e9ca 0100 	strd	r0, r1, [sl]
 8004934:	e694      	b.n	8004660 <__ieee754_rem_pio2+0x28>
 8004936:	bf00      	nop
 8004938:	54400000 	.word	0x54400000
 800493c:	3ff921fb 	.word	0x3ff921fb
 8004940:	1a626331 	.word	0x1a626331
 8004944:	3dd0b461 	.word	0x3dd0b461
 8004948:	1a600000 	.word	0x1a600000
 800494c:	3dd0b461 	.word	0x3dd0b461
 8004950:	2e037073 	.word	0x2e037073
 8004954:	3ba3198a 	.word	0x3ba3198a
 8004958:	6dc9c883 	.word	0x6dc9c883
 800495c:	3fe45f30 	.word	0x3fe45f30
 8004960:	2e000000 	.word	0x2e000000
 8004964:	3ba3198a 	.word	0x3ba3198a
 8004968:	252049c1 	.word	0x252049c1
 800496c:	397b839a 	.word	0x397b839a
 8004970:	3fe921fb 	.word	0x3fe921fb
 8004974:	4002d97b 	.word	0x4002d97b
 8004978:	3ff921fb 	.word	0x3ff921fb
 800497c:	413921fb 	.word	0x413921fb
 8004980:	3fe00000 	.word	0x3fe00000
 8004984:	080057e0 	.word	0x080057e0
 8004988:	7fefffff 	.word	0x7fefffff
 800498c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004990:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004994:	ee10 0a10 	vmov	r0, s0
 8004998:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800499c:	ee10 6a10 	vmov	r6, s0
 80049a0:	460f      	mov	r7, r1
 80049a2:	f7fc f885 	bl	8000ab0 <__aeabi_d2iz>
 80049a6:	f7fb fd69 	bl	800047c <__aeabi_i2d>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4630      	mov	r0, r6
 80049b0:	4639      	mov	r1, r7
 80049b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80049b6:	f7fb fc13 	bl	80001e0 <__aeabi_dsub>
 80049ba:	4b23      	ldr	r3, [pc, #140]	; (8004a48 <__ieee754_rem_pio2+0x410>)
 80049bc:	2200      	movs	r2, #0
 80049be:	f7fb fdc7 	bl	8000550 <__aeabi_dmul>
 80049c2:	460f      	mov	r7, r1
 80049c4:	4606      	mov	r6, r0
 80049c6:	f7fc f873 	bl	8000ab0 <__aeabi_d2iz>
 80049ca:	f7fb fd57 	bl	800047c <__aeabi_i2d>
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	4630      	mov	r0, r6
 80049d4:	4639      	mov	r1, r7
 80049d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80049da:	f7fb fc01 	bl	80001e0 <__aeabi_dsub>
 80049de:	4b1a      	ldr	r3, [pc, #104]	; (8004a48 <__ieee754_rem_pio2+0x410>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	f7fb fdb5 	bl	8000550 <__aeabi_dmul>
 80049e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80049ea:	ad04      	add	r5, sp, #16
 80049ec:	f04f 0803 	mov.w	r8, #3
 80049f0:	46a9      	mov	r9, r5
 80049f2:	2600      	movs	r6, #0
 80049f4:	2700      	movs	r7, #0
 80049f6:	4632      	mov	r2, r6
 80049f8:	463b      	mov	r3, r7
 80049fa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80049fe:	46c3      	mov	fp, r8
 8004a00:	3d08      	subs	r5, #8
 8004a02:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a06:	f7fc f80b 	bl	8000a20 <__aeabi_dcmpeq>
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	d1f3      	bne.n	80049f6 <__ieee754_rem_pio2+0x3be>
 8004a0e:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <__ieee754_rem_pio2+0x414>)
 8004a10:	9301      	str	r3, [sp, #4]
 8004a12:	2302      	movs	r3, #2
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	4622      	mov	r2, r4
 8004a18:	465b      	mov	r3, fp
 8004a1a:	4651      	mov	r1, sl
 8004a1c:	4648      	mov	r0, r9
 8004a1e:	f000 f993 	bl	8004d48 <__kernel_rem_pio2>
 8004a22:	9b02      	ldr	r3, [sp, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	4683      	mov	fp, r0
 8004a28:	f6bf ae46 	bge.w	80046b8 <__ieee754_rem_pio2+0x80>
 8004a2c:	e9da 2100 	ldrd	r2, r1, [sl]
 8004a30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a34:	e9ca 2300 	strd	r2, r3, [sl]
 8004a38:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004a3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a40:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004a44:	e73a      	b.n	80048bc <__ieee754_rem_pio2+0x284>
 8004a46:	bf00      	nop
 8004a48:	41700000 	.word	0x41700000
 8004a4c:	08005860 	.word	0x08005860

08004a50 <__ieee754_sqrt>:
 8004a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a54:	ec55 4b10 	vmov	r4, r5, d0
 8004a58:	4e55      	ldr	r6, [pc, #340]	; (8004bb0 <__ieee754_sqrt+0x160>)
 8004a5a:	43ae      	bics	r6, r5
 8004a5c:	ee10 0a10 	vmov	r0, s0
 8004a60:	ee10 3a10 	vmov	r3, s0
 8004a64:	462a      	mov	r2, r5
 8004a66:	4629      	mov	r1, r5
 8004a68:	d110      	bne.n	8004a8c <__ieee754_sqrt+0x3c>
 8004a6a:	ee10 2a10 	vmov	r2, s0
 8004a6e:	462b      	mov	r3, r5
 8004a70:	f7fb fd6e 	bl	8000550 <__aeabi_dmul>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4620      	mov	r0, r4
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	f7fb fbb2 	bl	80001e4 <__adddf3>
 8004a80:	4604      	mov	r4, r0
 8004a82:	460d      	mov	r5, r1
 8004a84:	ec45 4b10 	vmov	d0, r4, r5
 8004a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a8c:	2d00      	cmp	r5, #0
 8004a8e:	dc10      	bgt.n	8004ab2 <__ieee754_sqrt+0x62>
 8004a90:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004a94:	4330      	orrs	r0, r6
 8004a96:	d0f5      	beq.n	8004a84 <__ieee754_sqrt+0x34>
 8004a98:	b15d      	cbz	r5, 8004ab2 <__ieee754_sqrt+0x62>
 8004a9a:	ee10 2a10 	vmov	r2, s0
 8004a9e:	462b      	mov	r3, r5
 8004aa0:	ee10 0a10 	vmov	r0, s0
 8004aa4:	f7fb fb9c 	bl	80001e0 <__aeabi_dsub>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	f7fb fe7a 	bl	80007a4 <__aeabi_ddiv>
 8004ab0:	e7e6      	b.n	8004a80 <__ieee754_sqrt+0x30>
 8004ab2:	1512      	asrs	r2, r2, #20
 8004ab4:	d074      	beq.n	8004ba0 <__ieee754_sqrt+0x150>
 8004ab6:	07d4      	lsls	r4, r2, #31
 8004ab8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004abc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004ac0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004ac4:	bf5e      	ittt	pl
 8004ac6:	0fda      	lsrpl	r2, r3, #31
 8004ac8:	005b      	lslpl	r3, r3, #1
 8004aca:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004ace:	2400      	movs	r4, #0
 8004ad0:	0fda      	lsrs	r2, r3, #31
 8004ad2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004ad6:	107f      	asrs	r7, r7, #1
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	2516      	movs	r5, #22
 8004adc:	4620      	mov	r0, r4
 8004ade:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004ae2:	1886      	adds	r6, r0, r2
 8004ae4:	428e      	cmp	r6, r1
 8004ae6:	bfde      	ittt	le
 8004ae8:	1b89      	suble	r1, r1, r6
 8004aea:	18b0      	addle	r0, r6, r2
 8004aec:	18a4      	addle	r4, r4, r2
 8004aee:	0049      	lsls	r1, r1, #1
 8004af0:	3d01      	subs	r5, #1
 8004af2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004af6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004afa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004afe:	d1f0      	bne.n	8004ae2 <__ieee754_sqrt+0x92>
 8004b00:	462a      	mov	r2, r5
 8004b02:	f04f 0e20 	mov.w	lr, #32
 8004b06:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004b0a:	4281      	cmp	r1, r0
 8004b0c:	eb06 0c05 	add.w	ip, r6, r5
 8004b10:	dc02      	bgt.n	8004b18 <__ieee754_sqrt+0xc8>
 8004b12:	d113      	bne.n	8004b3c <__ieee754_sqrt+0xec>
 8004b14:	459c      	cmp	ip, r3
 8004b16:	d811      	bhi.n	8004b3c <__ieee754_sqrt+0xec>
 8004b18:	f1bc 0f00 	cmp.w	ip, #0
 8004b1c:	eb0c 0506 	add.w	r5, ip, r6
 8004b20:	da43      	bge.n	8004baa <__ieee754_sqrt+0x15a>
 8004b22:	2d00      	cmp	r5, #0
 8004b24:	db41      	blt.n	8004baa <__ieee754_sqrt+0x15a>
 8004b26:	f100 0801 	add.w	r8, r0, #1
 8004b2a:	1a09      	subs	r1, r1, r0
 8004b2c:	459c      	cmp	ip, r3
 8004b2e:	bf88      	it	hi
 8004b30:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004b34:	eba3 030c 	sub.w	r3, r3, ip
 8004b38:	4432      	add	r2, r6
 8004b3a:	4640      	mov	r0, r8
 8004b3c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004b40:	f1be 0e01 	subs.w	lr, lr, #1
 8004b44:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8004b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b4c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004b50:	d1db      	bne.n	8004b0a <__ieee754_sqrt+0xba>
 8004b52:	430b      	orrs	r3, r1
 8004b54:	d006      	beq.n	8004b64 <__ieee754_sqrt+0x114>
 8004b56:	1c50      	adds	r0, r2, #1
 8004b58:	bf13      	iteet	ne
 8004b5a:	3201      	addne	r2, #1
 8004b5c:	3401      	addeq	r4, #1
 8004b5e:	4672      	moveq	r2, lr
 8004b60:	f022 0201 	bicne.w	r2, r2, #1
 8004b64:	1063      	asrs	r3, r4, #1
 8004b66:	0852      	lsrs	r2, r2, #1
 8004b68:	07e1      	lsls	r1, r4, #31
 8004b6a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004b6e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004b72:	bf48      	it	mi
 8004b74:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004b78:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	e781      	b.n	8004a84 <__ieee754_sqrt+0x34>
 8004b80:	0ad9      	lsrs	r1, r3, #11
 8004b82:	3815      	subs	r0, #21
 8004b84:	055b      	lsls	r3, r3, #21
 8004b86:	2900      	cmp	r1, #0
 8004b88:	d0fa      	beq.n	8004b80 <__ieee754_sqrt+0x130>
 8004b8a:	02cd      	lsls	r5, r1, #11
 8004b8c:	d50a      	bpl.n	8004ba4 <__ieee754_sqrt+0x154>
 8004b8e:	f1c2 0420 	rsb	r4, r2, #32
 8004b92:	fa23 f404 	lsr.w	r4, r3, r4
 8004b96:	1e55      	subs	r5, r2, #1
 8004b98:	4093      	lsls	r3, r2
 8004b9a:	4321      	orrs	r1, r4
 8004b9c:	1b42      	subs	r2, r0, r5
 8004b9e:	e78a      	b.n	8004ab6 <__ieee754_sqrt+0x66>
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	e7f0      	b.n	8004b86 <__ieee754_sqrt+0x136>
 8004ba4:	0049      	lsls	r1, r1, #1
 8004ba6:	3201      	adds	r2, #1
 8004ba8:	e7ef      	b.n	8004b8a <__ieee754_sqrt+0x13a>
 8004baa:	4680      	mov	r8, r0
 8004bac:	e7bd      	b.n	8004b2a <__ieee754_sqrt+0xda>
 8004bae:	bf00      	nop
 8004bb0:	7ff00000 	.word	0x7ff00000
 8004bb4:	00000000 	.word	0x00000000

08004bb8 <__kernel_cos>:
 8004bb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bbc:	ec57 6b10 	vmov	r6, r7, d0
 8004bc0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004bc4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004bc8:	ed8d 1b00 	vstr	d1, [sp]
 8004bcc:	da07      	bge.n	8004bde <__kernel_cos+0x26>
 8004bce:	ee10 0a10 	vmov	r0, s0
 8004bd2:	4639      	mov	r1, r7
 8004bd4:	f7fb ff6c 	bl	8000ab0 <__aeabi_d2iz>
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	f000 8088 	beq.w	8004cee <__kernel_cos+0x136>
 8004bde:	4632      	mov	r2, r6
 8004be0:	463b      	mov	r3, r7
 8004be2:	4630      	mov	r0, r6
 8004be4:	4639      	mov	r1, r7
 8004be6:	f7fb fcb3 	bl	8000550 <__aeabi_dmul>
 8004bea:	4b51      	ldr	r3, [pc, #324]	; (8004d30 <__kernel_cos+0x178>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	4604      	mov	r4, r0
 8004bf0:	460d      	mov	r5, r1
 8004bf2:	f7fb fcad 	bl	8000550 <__aeabi_dmul>
 8004bf6:	a340      	add	r3, pc, #256	; (adr r3, 8004cf8 <__kernel_cos+0x140>)
 8004bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfc:	4682      	mov	sl, r0
 8004bfe:	468b      	mov	fp, r1
 8004c00:	4620      	mov	r0, r4
 8004c02:	4629      	mov	r1, r5
 8004c04:	f7fb fca4 	bl	8000550 <__aeabi_dmul>
 8004c08:	a33d      	add	r3, pc, #244	; (adr r3, 8004d00 <__kernel_cos+0x148>)
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	f7fb fae9 	bl	80001e4 <__adddf3>
 8004c12:	4622      	mov	r2, r4
 8004c14:	462b      	mov	r3, r5
 8004c16:	f7fb fc9b 	bl	8000550 <__aeabi_dmul>
 8004c1a:	a33b      	add	r3, pc, #236	; (adr r3, 8004d08 <__kernel_cos+0x150>)
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	f7fb fade 	bl	80001e0 <__aeabi_dsub>
 8004c24:	4622      	mov	r2, r4
 8004c26:	462b      	mov	r3, r5
 8004c28:	f7fb fc92 	bl	8000550 <__aeabi_dmul>
 8004c2c:	a338      	add	r3, pc, #224	; (adr r3, 8004d10 <__kernel_cos+0x158>)
 8004c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c32:	f7fb fad7 	bl	80001e4 <__adddf3>
 8004c36:	4622      	mov	r2, r4
 8004c38:	462b      	mov	r3, r5
 8004c3a:	f7fb fc89 	bl	8000550 <__aeabi_dmul>
 8004c3e:	a336      	add	r3, pc, #216	; (adr r3, 8004d18 <__kernel_cos+0x160>)
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	f7fb facc 	bl	80001e0 <__aeabi_dsub>
 8004c48:	4622      	mov	r2, r4
 8004c4a:	462b      	mov	r3, r5
 8004c4c:	f7fb fc80 	bl	8000550 <__aeabi_dmul>
 8004c50:	a333      	add	r3, pc, #204	; (adr r3, 8004d20 <__kernel_cos+0x168>)
 8004c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c56:	f7fb fac5 	bl	80001e4 <__adddf3>
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	462b      	mov	r3, r5
 8004c5e:	f7fb fc77 	bl	8000550 <__aeabi_dmul>
 8004c62:	4622      	mov	r2, r4
 8004c64:	462b      	mov	r3, r5
 8004c66:	f7fb fc73 	bl	8000550 <__aeabi_dmul>
 8004c6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c6e:	4604      	mov	r4, r0
 8004c70:	460d      	mov	r5, r1
 8004c72:	4630      	mov	r0, r6
 8004c74:	4639      	mov	r1, r7
 8004c76:	f7fb fc6b 	bl	8000550 <__aeabi_dmul>
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	4629      	mov	r1, r5
 8004c80:	4620      	mov	r0, r4
 8004c82:	f7fb faad 	bl	80001e0 <__aeabi_dsub>
 8004c86:	4b2b      	ldr	r3, [pc, #172]	; (8004d34 <__kernel_cos+0x17c>)
 8004c88:	4598      	cmp	r8, r3
 8004c8a:	4606      	mov	r6, r0
 8004c8c:	460f      	mov	r7, r1
 8004c8e:	dc10      	bgt.n	8004cb2 <__kernel_cos+0xfa>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4650      	mov	r0, sl
 8004c96:	4659      	mov	r1, fp
 8004c98:	f7fb faa2 	bl	80001e0 <__aeabi_dsub>
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4926      	ldr	r1, [pc, #152]	; (8004d38 <__kernel_cos+0x180>)
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	f7fb fa9c 	bl	80001e0 <__aeabi_dsub>
 8004ca8:	ec41 0b10 	vmov	d0, r0, r1
 8004cac:	b003      	add	sp, #12
 8004cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cb2:	4b22      	ldr	r3, [pc, #136]	; (8004d3c <__kernel_cos+0x184>)
 8004cb4:	4920      	ldr	r1, [pc, #128]	; (8004d38 <__kernel_cos+0x180>)
 8004cb6:	4598      	cmp	r8, r3
 8004cb8:	bfcc      	ite	gt
 8004cba:	4d21      	ldrgt	r5, [pc, #132]	; (8004d40 <__kernel_cos+0x188>)
 8004cbc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004cc0:	2400      	movs	r4, #0
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	462b      	mov	r3, r5
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	f7fb fa8a 	bl	80001e0 <__aeabi_dsub>
 8004ccc:	4622      	mov	r2, r4
 8004cce:	4680      	mov	r8, r0
 8004cd0:	4689      	mov	r9, r1
 8004cd2:	462b      	mov	r3, r5
 8004cd4:	4650      	mov	r0, sl
 8004cd6:	4659      	mov	r1, fp
 8004cd8:	f7fb fa82 	bl	80001e0 <__aeabi_dsub>
 8004cdc:	4632      	mov	r2, r6
 8004cde:	463b      	mov	r3, r7
 8004ce0:	f7fb fa7e 	bl	80001e0 <__aeabi_dsub>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4640      	mov	r0, r8
 8004cea:	4649      	mov	r1, r9
 8004cec:	e7da      	b.n	8004ca4 <__kernel_cos+0xec>
 8004cee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004d28 <__kernel_cos+0x170>
 8004cf2:	e7db      	b.n	8004cac <__kernel_cos+0xf4>
 8004cf4:	f3af 8000 	nop.w
 8004cf8:	be8838d4 	.word	0xbe8838d4
 8004cfc:	bda8fae9 	.word	0xbda8fae9
 8004d00:	bdb4b1c4 	.word	0xbdb4b1c4
 8004d04:	3e21ee9e 	.word	0x3e21ee9e
 8004d08:	809c52ad 	.word	0x809c52ad
 8004d0c:	3e927e4f 	.word	0x3e927e4f
 8004d10:	19cb1590 	.word	0x19cb1590
 8004d14:	3efa01a0 	.word	0x3efa01a0
 8004d18:	16c15177 	.word	0x16c15177
 8004d1c:	3f56c16c 	.word	0x3f56c16c
 8004d20:	5555554c 	.word	0x5555554c
 8004d24:	3fa55555 	.word	0x3fa55555
 8004d28:	00000000 	.word	0x00000000
 8004d2c:	3ff00000 	.word	0x3ff00000
 8004d30:	3fe00000 	.word	0x3fe00000
 8004d34:	3fd33332 	.word	0x3fd33332
 8004d38:	3ff00000 	.word	0x3ff00000
 8004d3c:	3fe90000 	.word	0x3fe90000
 8004d40:	3fd20000 	.word	0x3fd20000
 8004d44:	00000000 	.word	0x00000000

08004d48 <__kernel_rem_pio2>:
 8004d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d4c:	ed2d 8b02 	vpush	{d8}
 8004d50:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004d54:	f112 0f14 	cmn.w	r2, #20
 8004d58:	9308      	str	r3, [sp, #32]
 8004d5a:	9101      	str	r1, [sp, #4]
 8004d5c:	4bc4      	ldr	r3, [pc, #784]	; (8005070 <__kernel_rem_pio2+0x328>)
 8004d5e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004d60:	900b      	str	r0, [sp, #44]	; 0x2c
 8004d62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004d66:	9302      	str	r3, [sp, #8]
 8004d68:	9b08      	ldr	r3, [sp, #32]
 8004d6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d6e:	bfa8      	it	ge
 8004d70:	1ed4      	subge	r4, r2, #3
 8004d72:	9306      	str	r3, [sp, #24]
 8004d74:	bfb2      	itee	lt
 8004d76:	2400      	movlt	r4, #0
 8004d78:	2318      	movge	r3, #24
 8004d7a:	fb94 f4f3 	sdivge	r4, r4, r3
 8004d7e:	f06f 0317 	mvn.w	r3, #23
 8004d82:	fb04 3303 	mla	r3, r4, r3, r3
 8004d86:	eb03 0a02 	add.w	sl, r3, r2
 8004d8a:	9b02      	ldr	r3, [sp, #8]
 8004d8c:	9a06      	ldr	r2, [sp, #24]
 8004d8e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005060 <__kernel_rem_pio2+0x318>
 8004d92:	eb03 0802 	add.w	r8, r3, r2
 8004d96:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004d98:	1aa7      	subs	r7, r4, r2
 8004d9a:	ae22      	add	r6, sp, #136	; 0x88
 8004d9c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004da0:	2500      	movs	r5, #0
 8004da2:	4545      	cmp	r5, r8
 8004da4:	dd13      	ble.n	8004dce <__kernel_rem_pio2+0x86>
 8004da6:	9b08      	ldr	r3, [sp, #32]
 8004da8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8005060 <__kernel_rem_pio2+0x318>
 8004dac:	aa22      	add	r2, sp, #136	; 0x88
 8004dae:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004db2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8004db6:	f04f 0800 	mov.w	r8, #0
 8004dba:	9b02      	ldr	r3, [sp, #8]
 8004dbc:	4598      	cmp	r8, r3
 8004dbe:	dc2f      	bgt.n	8004e20 <__kernel_rem_pio2+0xd8>
 8004dc0:	ed8d 8b04 	vstr	d8, [sp, #16]
 8004dc4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004dc8:	462f      	mov	r7, r5
 8004dca:	2600      	movs	r6, #0
 8004dcc:	e01b      	b.n	8004e06 <__kernel_rem_pio2+0xbe>
 8004dce:	42ef      	cmn	r7, r5
 8004dd0:	d407      	bmi.n	8004de2 <__kernel_rem_pio2+0x9a>
 8004dd2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004dd6:	f7fb fb51 	bl	800047c <__aeabi_i2d>
 8004dda:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004dde:	3501      	adds	r5, #1
 8004de0:	e7df      	b.n	8004da2 <__kernel_rem_pio2+0x5a>
 8004de2:	ec51 0b18 	vmov	r0, r1, d8
 8004de6:	e7f8      	b.n	8004dda <__kernel_rem_pio2+0x92>
 8004de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004df0:	f7fb fbae 	bl	8000550 <__aeabi_dmul>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dfc:	f7fb f9f2 	bl	80001e4 <__adddf3>
 8004e00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e04:	3601      	adds	r6, #1
 8004e06:	9b06      	ldr	r3, [sp, #24]
 8004e08:	429e      	cmp	r6, r3
 8004e0a:	f1a7 0708 	sub.w	r7, r7, #8
 8004e0e:	ddeb      	ble.n	8004de8 <__kernel_rem_pio2+0xa0>
 8004e10:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004e14:	f108 0801 	add.w	r8, r8, #1
 8004e18:	ecab 7b02 	vstmia	fp!, {d7}
 8004e1c:	3508      	adds	r5, #8
 8004e1e:	e7cc      	b.n	8004dba <__kernel_rem_pio2+0x72>
 8004e20:	9b02      	ldr	r3, [sp, #8]
 8004e22:	aa0e      	add	r2, sp, #56	; 0x38
 8004e24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004e28:	930d      	str	r3, [sp, #52]	; 0x34
 8004e2a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004e2c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004e30:	9c02      	ldr	r4, [sp, #8]
 8004e32:	930c      	str	r3, [sp, #48]	; 0x30
 8004e34:	00e3      	lsls	r3, r4, #3
 8004e36:	930a      	str	r3, [sp, #40]	; 0x28
 8004e38:	ab9a      	add	r3, sp, #616	; 0x268
 8004e3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e3e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004e42:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8004e46:	ab72      	add	r3, sp, #456	; 0x1c8
 8004e48:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8004e4c:	46c3      	mov	fp, r8
 8004e4e:	46a1      	mov	r9, r4
 8004e50:	f1b9 0f00 	cmp.w	r9, #0
 8004e54:	f1a5 0508 	sub.w	r5, r5, #8
 8004e58:	dc77      	bgt.n	8004f4a <__kernel_rem_pio2+0x202>
 8004e5a:	ec47 6b10 	vmov	d0, r6, r7
 8004e5e:	4650      	mov	r0, sl
 8004e60:	f000 fc0a 	bl	8005678 <scalbn>
 8004e64:	ec57 6b10 	vmov	r6, r7, d0
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004e6e:	ee10 0a10 	vmov	r0, s0
 8004e72:	4639      	mov	r1, r7
 8004e74:	f7fb fb6c 	bl	8000550 <__aeabi_dmul>
 8004e78:	ec41 0b10 	vmov	d0, r0, r1
 8004e7c:	f000 fb7c 	bl	8005578 <floor>
 8004e80:	4b7c      	ldr	r3, [pc, #496]	; (8005074 <__kernel_rem_pio2+0x32c>)
 8004e82:	ec51 0b10 	vmov	r0, r1, d0
 8004e86:	2200      	movs	r2, #0
 8004e88:	f7fb fb62 	bl	8000550 <__aeabi_dmul>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4630      	mov	r0, r6
 8004e92:	4639      	mov	r1, r7
 8004e94:	f7fb f9a4 	bl	80001e0 <__aeabi_dsub>
 8004e98:	460f      	mov	r7, r1
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	f7fb fe08 	bl	8000ab0 <__aeabi_d2iz>
 8004ea0:	9004      	str	r0, [sp, #16]
 8004ea2:	f7fb faeb 	bl	800047c <__aeabi_i2d>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4630      	mov	r0, r6
 8004eac:	4639      	mov	r1, r7
 8004eae:	f7fb f997 	bl	80001e0 <__aeabi_dsub>
 8004eb2:	f1ba 0f00 	cmp.w	sl, #0
 8004eb6:	4606      	mov	r6, r0
 8004eb8:	460f      	mov	r7, r1
 8004eba:	dd6d      	ble.n	8004f98 <__kernel_rem_pio2+0x250>
 8004ebc:	1e62      	subs	r2, r4, #1
 8004ebe:	ab0e      	add	r3, sp, #56	; 0x38
 8004ec0:	9d04      	ldr	r5, [sp, #16]
 8004ec2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004ec6:	f1ca 0118 	rsb	r1, sl, #24
 8004eca:	fa40 f301 	asr.w	r3, r0, r1
 8004ece:	441d      	add	r5, r3
 8004ed0:	408b      	lsls	r3, r1
 8004ed2:	1ac0      	subs	r0, r0, r3
 8004ed4:	ab0e      	add	r3, sp, #56	; 0x38
 8004ed6:	9504      	str	r5, [sp, #16]
 8004ed8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004edc:	f1ca 0317 	rsb	r3, sl, #23
 8004ee0:	fa40 fb03 	asr.w	fp, r0, r3
 8004ee4:	f1bb 0f00 	cmp.w	fp, #0
 8004ee8:	dd65      	ble.n	8004fb6 <__kernel_rem_pio2+0x26e>
 8004eea:	9b04      	ldr	r3, [sp, #16]
 8004eec:	2200      	movs	r2, #0
 8004eee:	3301      	adds	r3, #1
 8004ef0:	9304      	str	r3, [sp, #16]
 8004ef2:	4615      	mov	r5, r2
 8004ef4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004ef8:	4294      	cmp	r4, r2
 8004efa:	f300 809c 	bgt.w	8005036 <__kernel_rem_pio2+0x2ee>
 8004efe:	f1ba 0f00 	cmp.w	sl, #0
 8004f02:	dd07      	ble.n	8004f14 <__kernel_rem_pio2+0x1cc>
 8004f04:	f1ba 0f01 	cmp.w	sl, #1
 8004f08:	f000 80c0 	beq.w	800508c <__kernel_rem_pio2+0x344>
 8004f0c:	f1ba 0f02 	cmp.w	sl, #2
 8004f10:	f000 80c6 	beq.w	80050a0 <__kernel_rem_pio2+0x358>
 8004f14:	f1bb 0f02 	cmp.w	fp, #2
 8004f18:	d14d      	bne.n	8004fb6 <__kernel_rem_pio2+0x26e>
 8004f1a:	4632      	mov	r2, r6
 8004f1c:	463b      	mov	r3, r7
 8004f1e:	4956      	ldr	r1, [pc, #344]	; (8005078 <__kernel_rem_pio2+0x330>)
 8004f20:	2000      	movs	r0, #0
 8004f22:	f7fb f95d 	bl	80001e0 <__aeabi_dsub>
 8004f26:	4606      	mov	r6, r0
 8004f28:	460f      	mov	r7, r1
 8004f2a:	2d00      	cmp	r5, #0
 8004f2c:	d043      	beq.n	8004fb6 <__kernel_rem_pio2+0x26e>
 8004f2e:	4650      	mov	r0, sl
 8004f30:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8005068 <__kernel_rem_pio2+0x320>
 8004f34:	f000 fba0 	bl	8005678 <scalbn>
 8004f38:	4630      	mov	r0, r6
 8004f3a:	4639      	mov	r1, r7
 8004f3c:	ec53 2b10 	vmov	r2, r3, d0
 8004f40:	f7fb f94e 	bl	80001e0 <__aeabi_dsub>
 8004f44:	4606      	mov	r6, r0
 8004f46:	460f      	mov	r7, r1
 8004f48:	e035      	b.n	8004fb6 <__kernel_rem_pio2+0x26e>
 8004f4a:	4b4c      	ldr	r3, [pc, #304]	; (800507c <__kernel_rem_pio2+0x334>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	4630      	mov	r0, r6
 8004f50:	4639      	mov	r1, r7
 8004f52:	f7fb fafd 	bl	8000550 <__aeabi_dmul>
 8004f56:	f7fb fdab 	bl	8000ab0 <__aeabi_d2iz>
 8004f5a:	f7fb fa8f 	bl	800047c <__aeabi_i2d>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	ec43 2b18 	vmov	d8, r2, r3
 8004f66:	4b46      	ldr	r3, [pc, #280]	; (8005080 <__kernel_rem_pio2+0x338>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f7fb faf1 	bl	8000550 <__aeabi_dmul>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4630      	mov	r0, r6
 8004f74:	4639      	mov	r1, r7
 8004f76:	f7fb f933 	bl	80001e0 <__aeabi_dsub>
 8004f7a:	f7fb fd99 	bl	8000ab0 <__aeabi_d2iz>
 8004f7e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f82:	f84b 0b04 	str.w	r0, [fp], #4
 8004f86:	ec51 0b18 	vmov	r0, r1, d8
 8004f8a:	f7fb f92b 	bl	80001e4 <__adddf3>
 8004f8e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004f92:	4606      	mov	r6, r0
 8004f94:	460f      	mov	r7, r1
 8004f96:	e75b      	b.n	8004e50 <__kernel_rem_pio2+0x108>
 8004f98:	d106      	bne.n	8004fa8 <__kernel_rem_pio2+0x260>
 8004f9a:	1e63      	subs	r3, r4, #1
 8004f9c:	aa0e      	add	r2, sp, #56	; 0x38
 8004f9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004fa2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8004fa6:	e79d      	b.n	8004ee4 <__kernel_rem_pio2+0x19c>
 8004fa8:	4b36      	ldr	r3, [pc, #216]	; (8005084 <__kernel_rem_pio2+0x33c>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	f7fb fd56 	bl	8000a5c <__aeabi_dcmpge>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	d13d      	bne.n	8005030 <__kernel_rem_pio2+0x2e8>
 8004fb4:	4683      	mov	fp, r0
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2300      	movs	r3, #0
 8004fba:	4630      	mov	r0, r6
 8004fbc:	4639      	mov	r1, r7
 8004fbe:	f7fb fd2f 	bl	8000a20 <__aeabi_dcmpeq>
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	f000 80c0 	beq.w	8005148 <__kernel_rem_pio2+0x400>
 8004fc8:	1e65      	subs	r5, r4, #1
 8004fca:	462b      	mov	r3, r5
 8004fcc:	2200      	movs	r2, #0
 8004fce:	9902      	ldr	r1, [sp, #8]
 8004fd0:	428b      	cmp	r3, r1
 8004fd2:	da6c      	bge.n	80050ae <__kernel_rem_pio2+0x366>
 8004fd4:	2a00      	cmp	r2, #0
 8004fd6:	f000 8089 	beq.w	80050ec <__kernel_rem_pio2+0x3a4>
 8004fda:	ab0e      	add	r3, sp, #56	; 0x38
 8004fdc:	f1aa 0a18 	sub.w	sl, sl, #24
 8004fe0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 80ad 	beq.w	8005144 <__kernel_rem_pio2+0x3fc>
 8004fea:	4650      	mov	r0, sl
 8004fec:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8005068 <__kernel_rem_pio2+0x320>
 8004ff0:	f000 fb42 	bl	8005678 <scalbn>
 8004ff4:	ab9a      	add	r3, sp, #616	; 0x268
 8004ff6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004ffa:	ec57 6b10 	vmov	r6, r7, d0
 8004ffe:	00ec      	lsls	r4, r5, #3
 8005000:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8005004:	46aa      	mov	sl, r5
 8005006:	f1ba 0f00 	cmp.w	sl, #0
 800500a:	f280 80d6 	bge.w	80051ba <__kernel_rem_pio2+0x472>
 800500e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8005060 <__kernel_rem_pio2+0x318>
 8005012:	462e      	mov	r6, r5
 8005014:	2e00      	cmp	r6, #0
 8005016:	f2c0 8104 	blt.w	8005222 <__kernel_rem_pio2+0x4da>
 800501a:	ab72      	add	r3, sp, #456	; 0x1c8
 800501c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8005020:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005088 <__kernel_rem_pio2+0x340>
 8005024:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005028:	f04f 0800 	mov.w	r8, #0
 800502c:	1baf      	subs	r7, r5, r6
 800502e:	e0ea      	b.n	8005206 <__kernel_rem_pio2+0x4be>
 8005030:	f04f 0b02 	mov.w	fp, #2
 8005034:	e759      	b.n	8004eea <__kernel_rem_pio2+0x1a2>
 8005036:	f8d8 3000 	ldr.w	r3, [r8]
 800503a:	b955      	cbnz	r5, 8005052 <__kernel_rem_pio2+0x30a>
 800503c:	b123      	cbz	r3, 8005048 <__kernel_rem_pio2+0x300>
 800503e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005042:	f8c8 3000 	str.w	r3, [r8]
 8005046:	2301      	movs	r3, #1
 8005048:	3201      	adds	r2, #1
 800504a:	f108 0804 	add.w	r8, r8, #4
 800504e:	461d      	mov	r5, r3
 8005050:	e752      	b.n	8004ef8 <__kernel_rem_pio2+0x1b0>
 8005052:	1acb      	subs	r3, r1, r3
 8005054:	f8c8 3000 	str.w	r3, [r8]
 8005058:	462b      	mov	r3, r5
 800505a:	e7f5      	b.n	8005048 <__kernel_rem_pio2+0x300>
 800505c:	f3af 8000 	nop.w
	...
 800506c:	3ff00000 	.word	0x3ff00000
 8005070:	080059a8 	.word	0x080059a8
 8005074:	40200000 	.word	0x40200000
 8005078:	3ff00000 	.word	0x3ff00000
 800507c:	3e700000 	.word	0x3e700000
 8005080:	41700000 	.word	0x41700000
 8005084:	3fe00000 	.word	0x3fe00000
 8005088:	08005968 	.word	0x08005968
 800508c:	1e62      	subs	r2, r4, #1
 800508e:	ab0e      	add	r3, sp, #56	; 0x38
 8005090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005094:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005098:	a90e      	add	r1, sp, #56	; 0x38
 800509a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800509e:	e739      	b.n	8004f14 <__kernel_rem_pio2+0x1cc>
 80050a0:	1e62      	subs	r2, r4, #1
 80050a2:	ab0e      	add	r3, sp, #56	; 0x38
 80050a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80050ac:	e7f4      	b.n	8005098 <__kernel_rem_pio2+0x350>
 80050ae:	a90e      	add	r1, sp, #56	; 0x38
 80050b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	430a      	orrs	r2, r1
 80050b8:	e789      	b.n	8004fce <__kernel_rem_pio2+0x286>
 80050ba:	3301      	adds	r3, #1
 80050bc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80050c0:	2900      	cmp	r1, #0
 80050c2:	d0fa      	beq.n	80050ba <__kernel_rem_pio2+0x372>
 80050c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050c6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80050ca:	446a      	add	r2, sp
 80050cc:	3a98      	subs	r2, #152	; 0x98
 80050ce:	920a      	str	r2, [sp, #40]	; 0x28
 80050d0:	9a08      	ldr	r2, [sp, #32]
 80050d2:	18e3      	adds	r3, r4, r3
 80050d4:	18a5      	adds	r5, r4, r2
 80050d6:	aa22      	add	r2, sp, #136	; 0x88
 80050d8:	f104 0801 	add.w	r8, r4, #1
 80050dc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80050e0:	9304      	str	r3, [sp, #16]
 80050e2:	9b04      	ldr	r3, [sp, #16]
 80050e4:	4543      	cmp	r3, r8
 80050e6:	da04      	bge.n	80050f2 <__kernel_rem_pio2+0x3aa>
 80050e8:	461c      	mov	r4, r3
 80050ea:	e6a3      	b.n	8004e34 <__kernel_rem_pio2+0xec>
 80050ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80050ee:	2301      	movs	r3, #1
 80050f0:	e7e4      	b.n	80050bc <__kernel_rem_pio2+0x374>
 80050f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050f4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80050f8:	f7fb f9c0 	bl	800047c <__aeabi_i2d>
 80050fc:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005102:	46ab      	mov	fp, r5
 8005104:	461c      	mov	r4, r3
 8005106:	f04f 0900 	mov.w	r9, #0
 800510a:	2600      	movs	r6, #0
 800510c:	2700      	movs	r7, #0
 800510e:	9b06      	ldr	r3, [sp, #24]
 8005110:	4599      	cmp	r9, r3
 8005112:	dd06      	ble.n	8005122 <__kernel_rem_pio2+0x3da>
 8005114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005116:	e8e3 6702 	strd	r6, r7, [r3], #8
 800511a:	f108 0801 	add.w	r8, r8, #1
 800511e:	930a      	str	r3, [sp, #40]	; 0x28
 8005120:	e7df      	b.n	80050e2 <__kernel_rem_pio2+0x39a>
 8005122:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005126:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800512a:	f7fb fa11 	bl	8000550 <__aeabi_dmul>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	4630      	mov	r0, r6
 8005134:	4639      	mov	r1, r7
 8005136:	f7fb f855 	bl	80001e4 <__adddf3>
 800513a:	f109 0901 	add.w	r9, r9, #1
 800513e:	4606      	mov	r6, r0
 8005140:	460f      	mov	r7, r1
 8005142:	e7e4      	b.n	800510e <__kernel_rem_pio2+0x3c6>
 8005144:	3d01      	subs	r5, #1
 8005146:	e748      	b.n	8004fda <__kernel_rem_pio2+0x292>
 8005148:	ec47 6b10 	vmov	d0, r6, r7
 800514c:	f1ca 0000 	rsb	r0, sl, #0
 8005150:	f000 fa92 	bl	8005678 <scalbn>
 8005154:	ec57 6b10 	vmov	r6, r7, d0
 8005158:	4ba0      	ldr	r3, [pc, #640]	; (80053dc <__kernel_rem_pio2+0x694>)
 800515a:	ee10 0a10 	vmov	r0, s0
 800515e:	2200      	movs	r2, #0
 8005160:	4639      	mov	r1, r7
 8005162:	f7fb fc7b 	bl	8000a5c <__aeabi_dcmpge>
 8005166:	b1f8      	cbz	r0, 80051a8 <__kernel_rem_pio2+0x460>
 8005168:	4b9d      	ldr	r3, [pc, #628]	; (80053e0 <__kernel_rem_pio2+0x698>)
 800516a:	2200      	movs	r2, #0
 800516c:	4630      	mov	r0, r6
 800516e:	4639      	mov	r1, r7
 8005170:	f7fb f9ee 	bl	8000550 <__aeabi_dmul>
 8005174:	f7fb fc9c 	bl	8000ab0 <__aeabi_d2iz>
 8005178:	4680      	mov	r8, r0
 800517a:	f7fb f97f 	bl	800047c <__aeabi_i2d>
 800517e:	4b97      	ldr	r3, [pc, #604]	; (80053dc <__kernel_rem_pio2+0x694>)
 8005180:	2200      	movs	r2, #0
 8005182:	f7fb f9e5 	bl	8000550 <__aeabi_dmul>
 8005186:	460b      	mov	r3, r1
 8005188:	4602      	mov	r2, r0
 800518a:	4639      	mov	r1, r7
 800518c:	4630      	mov	r0, r6
 800518e:	f7fb f827 	bl	80001e0 <__aeabi_dsub>
 8005192:	f7fb fc8d 	bl	8000ab0 <__aeabi_d2iz>
 8005196:	1c65      	adds	r5, r4, #1
 8005198:	ab0e      	add	r3, sp, #56	; 0x38
 800519a:	f10a 0a18 	add.w	sl, sl, #24
 800519e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80051a2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80051a6:	e720      	b.n	8004fea <__kernel_rem_pio2+0x2a2>
 80051a8:	4630      	mov	r0, r6
 80051aa:	4639      	mov	r1, r7
 80051ac:	f7fb fc80 	bl	8000ab0 <__aeabi_d2iz>
 80051b0:	ab0e      	add	r3, sp, #56	; 0x38
 80051b2:	4625      	mov	r5, r4
 80051b4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80051b8:	e717      	b.n	8004fea <__kernel_rem_pio2+0x2a2>
 80051ba:	ab0e      	add	r3, sp, #56	; 0x38
 80051bc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80051c0:	f7fb f95c 	bl	800047c <__aeabi_i2d>
 80051c4:	4632      	mov	r2, r6
 80051c6:	463b      	mov	r3, r7
 80051c8:	f7fb f9c2 	bl	8000550 <__aeabi_dmul>
 80051cc:	4b84      	ldr	r3, [pc, #528]	; (80053e0 <__kernel_rem_pio2+0x698>)
 80051ce:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80051d2:	2200      	movs	r2, #0
 80051d4:	4630      	mov	r0, r6
 80051d6:	4639      	mov	r1, r7
 80051d8:	f7fb f9ba 	bl	8000550 <__aeabi_dmul>
 80051dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051e0:	4606      	mov	r6, r0
 80051e2:	460f      	mov	r7, r1
 80051e4:	e70f      	b.n	8005006 <__kernel_rem_pio2+0x2be>
 80051e6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80051ea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80051ee:	f7fb f9af 	bl	8000550 <__aeabi_dmul>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051fa:	f7fa fff3 	bl	80001e4 <__adddf3>
 80051fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005202:	f108 0801 	add.w	r8, r8, #1
 8005206:	9b02      	ldr	r3, [sp, #8]
 8005208:	4598      	cmp	r8, r3
 800520a:	dc01      	bgt.n	8005210 <__kernel_rem_pio2+0x4c8>
 800520c:	45b8      	cmp	r8, r7
 800520e:	ddea      	ble.n	80051e6 <__kernel_rem_pio2+0x49e>
 8005210:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005214:	ab4a      	add	r3, sp, #296	; 0x128
 8005216:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800521a:	ed87 7b00 	vstr	d7, [r7]
 800521e:	3e01      	subs	r6, #1
 8005220:	e6f8      	b.n	8005014 <__kernel_rem_pio2+0x2cc>
 8005222:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005224:	2b02      	cmp	r3, #2
 8005226:	dc0b      	bgt.n	8005240 <__kernel_rem_pio2+0x4f8>
 8005228:	2b00      	cmp	r3, #0
 800522a:	dc35      	bgt.n	8005298 <__kernel_rem_pio2+0x550>
 800522c:	d059      	beq.n	80052e2 <__kernel_rem_pio2+0x59a>
 800522e:	9b04      	ldr	r3, [sp, #16]
 8005230:	f003 0007 	and.w	r0, r3, #7
 8005234:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005238:	ecbd 8b02 	vpop	{d8}
 800523c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005240:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005242:	2b03      	cmp	r3, #3
 8005244:	d1f3      	bne.n	800522e <__kernel_rem_pio2+0x4e6>
 8005246:	ab4a      	add	r3, sp, #296	; 0x128
 8005248:	4423      	add	r3, r4
 800524a:	9306      	str	r3, [sp, #24]
 800524c:	461c      	mov	r4, r3
 800524e:	469a      	mov	sl, r3
 8005250:	9502      	str	r5, [sp, #8]
 8005252:	9b02      	ldr	r3, [sp, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	f1aa 0a08 	sub.w	sl, sl, #8
 800525a:	dc6b      	bgt.n	8005334 <__kernel_rem_pio2+0x5ec>
 800525c:	46aa      	mov	sl, r5
 800525e:	f1ba 0f01 	cmp.w	sl, #1
 8005262:	f1a4 0408 	sub.w	r4, r4, #8
 8005266:	f300 8085 	bgt.w	8005374 <__kernel_rem_pio2+0x62c>
 800526a:	9c06      	ldr	r4, [sp, #24]
 800526c:	2000      	movs	r0, #0
 800526e:	3408      	adds	r4, #8
 8005270:	2100      	movs	r1, #0
 8005272:	2d01      	cmp	r5, #1
 8005274:	f300 809d 	bgt.w	80053b2 <__kernel_rem_pio2+0x66a>
 8005278:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800527c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005280:	f1bb 0f00 	cmp.w	fp, #0
 8005284:	f040 809b 	bne.w	80053be <__kernel_rem_pio2+0x676>
 8005288:	9b01      	ldr	r3, [sp, #4]
 800528a:	e9c3 5600 	strd	r5, r6, [r3]
 800528e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005292:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005296:	e7ca      	b.n	800522e <__kernel_rem_pio2+0x4e6>
 8005298:	3408      	adds	r4, #8
 800529a:	ab4a      	add	r3, sp, #296	; 0x128
 800529c:	441c      	add	r4, r3
 800529e:	462e      	mov	r6, r5
 80052a0:	2000      	movs	r0, #0
 80052a2:	2100      	movs	r1, #0
 80052a4:	2e00      	cmp	r6, #0
 80052a6:	da36      	bge.n	8005316 <__kernel_rem_pio2+0x5ce>
 80052a8:	f1bb 0f00 	cmp.w	fp, #0
 80052ac:	d039      	beq.n	8005322 <__kernel_rem_pio2+0x5da>
 80052ae:	4602      	mov	r2, r0
 80052b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052b4:	9c01      	ldr	r4, [sp, #4]
 80052b6:	e9c4 2300 	strd	r2, r3, [r4]
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80052c2:	f7fa ff8d 	bl	80001e0 <__aeabi_dsub>
 80052c6:	ae4c      	add	r6, sp, #304	; 0x130
 80052c8:	2401      	movs	r4, #1
 80052ca:	42a5      	cmp	r5, r4
 80052cc:	da2c      	bge.n	8005328 <__kernel_rem_pio2+0x5e0>
 80052ce:	f1bb 0f00 	cmp.w	fp, #0
 80052d2:	d002      	beq.n	80052da <__kernel_rem_pio2+0x592>
 80052d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052d8:	4619      	mov	r1, r3
 80052da:	9b01      	ldr	r3, [sp, #4]
 80052dc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80052e0:	e7a5      	b.n	800522e <__kernel_rem_pio2+0x4e6>
 80052e2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80052e6:	eb0d 0403 	add.w	r4, sp, r3
 80052ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80052ee:	2000      	movs	r0, #0
 80052f0:	2100      	movs	r1, #0
 80052f2:	2d00      	cmp	r5, #0
 80052f4:	da09      	bge.n	800530a <__kernel_rem_pio2+0x5c2>
 80052f6:	f1bb 0f00 	cmp.w	fp, #0
 80052fa:	d002      	beq.n	8005302 <__kernel_rem_pio2+0x5ba>
 80052fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005300:	4619      	mov	r1, r3
 8005302:	9b01      	ldr	r3, [sp, #4]
 8005304:	e9c3 0100 	strd	r0, r1, [r3]
 8005308:	e791      	b.n	800522e <__kernel_rem_pio2+0x4e6>
 800530a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800530e:	f7fa ff69 	bl	80001e4 <__adddf3>
 8005312:	3d01      	subs	r5, #1
 8005314:	e7ed      	b.n	80052f2 <__kernel_rem_pio2+0x5aa>
 8005316:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800531a:	f7fa ff63 	bl	80001e4 <__adddf3>
 800531e:	3e01      	subs	r6, #1
 8005320:	e7c0      	b.n	80052a4 <__kernel_rem_pio2+0x55c>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	e7c5      	b.n	80052b4 <__kernel_rem_pio2+0x56c>
 8005328:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800532c:	f7fa ff5a 	bl	80001e4 <__adddf3>
 8005330:	3401      	adds	r4, #1
 8005332:	e7ca      	b.n	80052ca <__kernel_rem_pio2+0x582>
 8005334:	e9da 8900 	ldrd	r8, r9, [sl]
 8005338:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800533c:	9b02      	ldr	r3, [sp, #8]
 800533e:	3b01      	subs	r3, #1
 8005340:	9302      	str	r3, [sp, #8]
 8005342:	4632      	mov	r2, r6
 8005344:	463b      	mov	r3, r7
 8005346:	4640      	mov	r0, r8
 8005348:	4649      	mov	r1, r9
 800534a:	f7fa ff4b 	bl	80001e4 <__adddf3>
 800534e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	4640      	mov	r0, r8
 8005358:	4649      	mov	r1, r9
 800535a:	f7fa ff41 	bl	80001e0 <__aeabi_dsub>
 800535e:	4632      	mov	r2, r6
 8005360:	463b      	mov	r3, r7
 8005362:	f7fa ff3f 	bl	80001e4 <__adddf3>
 8005366:	ed9d 7b08 	vldr	d7, [sp, #32]
 800536a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800536e:	ed8a 7b00 	vstr	d7, [sl]
 8005372:	e76e      	b.n	8005252 <__kernel_rem_pio2+0x50a>
 8005374:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005378:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800537c:	4640      	mov	r0, r8
 800537e:	4632      	mov	r2, r6
 8005380:	463b      	mov	r3, r7
 8005382:	4649      	mov	r1, r9
 8005384:	f7fa ff2e 	bl	80001e4 <__adddf3>
 8005388:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4640      	mov	r0, r8
 8005392:	4649      	mov	r1, r9
 8005394:	f7fa ff24 	bl	80001e0 <__aeabi_dsub>
 8005398:	4632      	mov	r2, r6
 800539a:	463b      	mov	r3, r7
 800539c:	f7fa ff22 	bl	80001e4 <__adddf3>
 80053a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80053a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80053a8:	ed84 7b00 	vstr	d7, [r4]
 80053ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053b0:	e755      	b.n	800525e <__kernel_rem_pio2+0x516>
 80053b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80053b6:	f7fa ff15 	bl	80001e4 <__adddf3>
 80053ba:	3d01      	subs	r5, #1
 80053bc:	e759      	b.n	8005272 <__kernel_rem_pio2+0x52a>
 80053be:	9b01      	ldr	r3, [sp, #4]
 80053c0:	9a01      	ldr	r2, [sp, #4]
 80053c2:	601d      	str	r5, [r3, #0]
 80053c4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80053c8:	605c      	str	r4, [r3, #4]
 80053ca:	609f      	str	r7, [r3, #8]
 80053cc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80053d0:	60d3      	str	r3, [r2, #12]
 80053d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053d6:	6110      	str	r0, [r2, #16]
 80053d8:	6153      	str	r3, [r2, #20]
 80053da:	e728      	b.n	800522e <__kernel_rem_pio2+0x4e6>
 80053dc:	41700000 	.word	0x41700000
 80053e0:	3e700000 	.word	0x3e700000
 80053e4:	00000000 	.word	0x00000000

080053e8 <__kernel_sin>:
 80053e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ec:	ed2d 8b04 	vpush	{d8-d9}
 80053f0:	eeb0 8a41 	vmov.f32	s16, s2
 80053f4:	eef0 8a61 	vmov.f32	s17, s3
 80053f8:	ec55 4b10 	vmov	r4, r5, d0
 80053fc:	b083      	sub	sp, #12
 80053fe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005402:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005406:	9001      	str	r0, [sp, #4]
 8005408:	da06      	bge.n	8005418 <__kernel_sin+0x30>
 800540a:	ee10 0a10 	vmov	r0, s0
 800540e:	4629      	mov	r1, r5
 8005410:	f7fb fb4e 	bl	8000ab0 <__aeabi_d2iz>
 8005414:	2800      	cmp	r0, #0
 8005416:	d051      	beq.n	80054bc <__kernel_sin+0xd4>
 8005418:	4622      	mov	r2, r4
 800541a:	462b      	mov	r3, r5
 800541c:	4620      	mov	r0, r4
 800541e:	4629      	mov	r1, r5
 8005420:	f7fb f896 	bl	8000550 <__aeabi_dmul>
 8005424:	4682      	mov	sl, r0
 8005426:	468b      	mov	fp, r1
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4620      	mov	r0, r4
 800542e:	4629      	mov	r1, r5
 8005430:	f7fb f88e 	bl	8000550 <__aeabi_dmul>
 8005434:	a341      	add	r3, pc, #260	; (adr r3, 800553c <__kernel_sin+0x154>)
 8005436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543a:	4680      	mov	r8, r0
 800543c:	4689      	mov	r9, r1
 800543e:	4650      	mov	r0, sl
 8005440:	4659      	mov	r1, fp
 8005442:	f7fb f885 	bl	8000550 <__aeabi_dmul>
 8005446:	a33f      	add	r3, pc, #252	; (adr r3, 8005544 <__kernel_sin+0x15c>)
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	f7fa fec8 	bl	80001e0 <__aeabi_dsub>
 8005450:	4652      	mov	r2, sl
 8005452:	465b      	mov	r3, fp
 8005454:	f7fb f87c 	bl	8000550 <__aeabi_dmul>
 8005458:	a33c      	add	r3, pc, #240	; (adr r3, 800554c <__kernel_sin+0x164>)
 800545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545e:	f7fa fec1 	bl	80001e4 <__adddf3>
 8005462:	4652      	mov	r2, sl
 8005464:	465b      	mov	r3, fp
 8005466:	f7fb f873 	bl	8000550 <__aeabi_dmul>
 800546a:	a33a      	add	r3, pc, #232	; (adr r3, 8005554 <__kernel_sin+0x16c>)
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	f7fa feb6 	bl	80001e0 <__aeabi_dsub>
 8005474:	4652      	mov	r2, sl
 8005476:	465b      	mov	r3, fp
 8005478:	f7fb f86a 	bl	8000550 <__aeabi_dmul>
 800547c:	a337      	add	r3, pc, #220	; (adr r3, 800555c <__kernel_sin+0x174>)
 800547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005482:	f7fa feaf 	bl	80001e4 <__adddf3>
 8005486:	9b01      	ldr	r3, [sp, #4]
 8005488:	4606      	mov	r6, r0
 800548a:	460f      	mov	r7, r1
 800548c:	b9eb      	cbnz	r3, 80054ca <__kernel_sin+0xe2>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4650      	mov	r0, sl
 8005494:	4659      	mov	r1, fp
 8005496:	f7fb f85b 	bl	8000550 <__aeabi_dmul>
 800549a:	a325      	add	r3, pc, #148	; (adr r3, 8005530 <__kernel_sin+0x148>)
 800549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a0:	f7fa fe9e 	bl	80001e0 <__aeabi_dsub>
 80054a4:	4642      	mov	r2, r8
 80054a6:	464b      	mov	r3, r9
 80054a8:	f7fb f852 	bl	8000550 <__aeabi_dmul>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4620      	mov	r0, r4
 80054b2:	4629      	mov	r1, r5
 80054b4:	f7fa fe96 	bl	80001e4 <__adddf3>
 80054b8:	4604      	mov	r4, r0
 80054ba:	460d      	mov	r5, r1
 80054bc:	ec45 4b10 	vmov	d0, r4, r5
 80054c0:	b003      	add	sp, #12
 80054c2:	ecbd 8b04 	vpop	{d8-d9}
 80054c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ca:	4b1b      	ldr	r3, [pc, #108]	; (8005538 <__kernel_sin+0x150>)
 80054cc:	ec51 0b18 	vmov	r0, r1, d8
 80054d0:	2200      	movs	r2, #0
 80054d2:	f7fb f83d 	bl	8000550 <__aeabi_dmul>
 80054d6:	4632      	mov	r2, r6
 80054d8:	ec41 0b19 	vmov	d9, r0, r1
 80054dc:	463b      	mov	r3, r7
 80054de:	4640      	mov	r0, r8
 80054e0:	4649      	mov	r1, r9
 80054e2:	f7fb f835 	bl	8000550 <__aeabi_dmul>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	ec51 0b19 	vmov	r0, r1, d9
 80054ee:	f7fa fe77 	bl	80001e0 <__aeabi_dsub>
 80054f2:	4652      	mov	r2, sl
 80054f4:	465b      	mov	r3, fp
 80054f6:	f7fb f82b 	bl	8000550 <__aeabi_dmul>
 80054fa:	ec53 2b18 	vmov	r2, r3, d8
 80054fe:	f7fa fe6f 	bl	80001e0 <__aeabi_dsub>
 8005502:	a30b      	add	r3, pc, #44	; (adr r3, 8005530 <__kernel_sin+0x148>)
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	4606      	mov	r6, r0
 800550a:	460f      	mov	r7, r1
 800550c:	4640      	mov	r0, r8
 800550e:	4649      	mov	r1, r9
 8005510:	f7fb f81e 	bl	8000550 <__aeabi_dmul>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4630      	mov	r0, r6
 800551a:	4639      	mov	r1, r7
 800551c:	f7fa fe62 	bl	80001e4 <__adddf3>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	4620      	mov	r0, r4
 8005526:	4629      	mov	r1, r5
 8005528:	f7fa fe5a 	bl	80001e0 <__aeabi_dsub>
 800552c:	e7c4      	b.n	80054b8 <__kernel_sin+0xd0>
 800552e:	bf00      	nop
 8005530:	55555549 	.word	0x55555549
 8005534:	3fc55555 	.word	0x3fc55555
 8005538:	3fe00000 	.word	0x3fe00000
 800553c:	5acfd57c 	.word	0x5acfd57c
 8005540:	3de5d93a 	.word	0x3de5d93a
 8005544:	8a2b9ceb 	.word	0x8a2b9ceb
 8005548:	3e5ae5e6 	.word	0x3e5ae5e6
 800554c:	57b1fe7d 	.word	0x57b1fe7d
 8005550:	3ec71de3 	.word	0x3ec71de3
 8005554:	19c161d5 	.word	0x19c161d5
 8005558:	3f2a01a0 	.word	0x3f2a01a0
 800555c:	1110f8a6 	.word	0x1110f8a6
 8005560:	3f811111 	.word	0x3f811111

08005564 <fabs>:
 8005564:	ec51 0b10 	vmov	r0, r1, d0
 8005568:	ee10 2a10 	vmov	r2, s0
 800556c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005570:	ec43 2b10 	vmov	d0, r2, r3
 8005574:	4770      	bx	lr
	...

08005578 <floor>:
 8005578:	ec51 0b10 	vmov	r0, r1, d0
 800557c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005580:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005584:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005588:	2e13      	cmp	r6, #19
 800558a:	ee10 5a10 	vmov	r5, s0
 800558e:	ee10 8a10 	vmov	r8, s0
 8005592:	460c      	mov	r4, r1
 8005594:	dc32      	bgt.n	80055fc <floor+0x84>
 8005596:	2e00      	cmp	r6, #0
 8005598:	da14      	bge.n	80055c4 <floor+0x4c>
 800559a:	a333      	add	r3, pc, #204	; (adr r3, 8005668 <floor+0xf0>)
 800559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a0:	f7fa fe20 	bl	80001e4 <__adddf3>
 80055a4:	2200      	movs	r2, #0
 80055a6:	2300      	movs	r3, #0
 80055a8:	f7fb fa62 	bl	8000a70 <__aeabi_dcmpgt>
 80055ac:	b138      	cbz	r0, 80055be <floor+0x46>
 80055ae:	2c00      	cmp	r4, #0
 80055b0:	da57      	bge.n	8005662 <floor+0xea>
 80055b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80055b6:	431d      	orrs	r5, r3
 80055b8:	d001      	beq.n	80055be <floor+0x46>
 80055ba:	4c2d      	ldr	r4, [pc, #180]	; (8005670 <floor+0xf8>)
 80055bc:	2500      	movs	r5, #0
 80055be:	4621      	mov	r1, r4
 80055c0:	4628      	mov	r0, r5
 80055c2:	e025      	b.n	8005610 <floor+0x98>
 80055c4:	4f2b      	ldr	r7, [pc, #172]	; (8005674 <floor+0xfc>)
 80055c6:	4137      	asrs	r7, r6
 80055c8:	ea01 0307 	and.w	r3, r1, r7
 80055cc:	4303      	orrs	r3, r0
 80055ce:	d01f      	beq.n	8005610 <floor+0x98>
 80055d0:	a325      	add	r3, pc, #148	; (adr r3, 8005668 <floor+0xf0>)
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f7fa fe05 	bl	80001e4 <__adddf3>
 80055da:	2200      	movs	r2, #0
 80055dc:	2300      	movs	r3, #0
 80055de:	f7fb fa47 	bl	8000a70 <__aeabi_dcmpgt>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	d0eb      	beq.n	80055be <floor+0x46>
 80055e6:	2c00      	cmp	r4, #0
 80055e8:	bfbe      	ittt	lt
 80055ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80055ee:	fa43 f606 	asrlt.w	r6, r3, r6
 80055f2:	19a4      	addlt	r4, r4, r6
 80055f4:	ea24 0407 	bic.w	r4, r4, r7
 80055f8:	2500      	movs	r5, #0
 80055fa:	e7e0      	b.n	80055be <floor+0x46>
 80055fc:	2e33      	cmp	r6, #51	; 0x33
 80055fe:	dd0b      	ble.n	8005618 <floor+0xa0>
 8005600:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005604:	d104      	bne.n	8005610 <floor+0x98>
 8005606:	ee10 2a10 	vmov	r2, s0
 800560a:	460b      	mov	r3, r1
 800560c:	f7fa fdea 	bl	80001e4 <__adddf3>
 8005610:	ec41 0b10 	vmov	d0, r0, r1
 8005614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005618:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800561c:	f04f 33ff 	mov.w	r3, #4294967295
 8005620:	fa23 f707 	lsr.w	r7, r3, r7
 8005624:	4207      	tst	r7, r0
 8005626:	d0f3      	beq.n	8005610 <floor+0x98>
 8005628:	a30f      	add	r3, pc, #60	; (adr r3, 8005668 <floor+0xf0>)
 800562a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562e:	f7fa fdd9 	bl	80001e4 <__adddf3>
 8005632:	2200      	movs	r2, #0
 8005634:	2300      	movs	r3, #0
 8005636:	f7fb fa1b 	bl	8000a70 <__aeabi_dcmpgt>
 800563a:	2800      	cmp	r0, #0
 800563c:	d0bf      	beq.n	80055be <floor+0x46>
 800563e:	2c00      	cmp	r4, #0
 8005640:	da02      	bge.n	8005648 <floor+0xd0>
 8005642:	2e14      	cmp	r6, #20
 8005644:	d103      	bne.n	800564e <floor+0xd6>
 8005646:	3401      	adds	r4, #1
 8005648:	ea25 0507 	bic.w	r5, r5, r7
 800564c:	e7b7      	b.n	80055be <floor+0x46>
 800564e:	2301      	movs	r3, #1
 8005650:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005654:	fa03 f606 	lsl.w	r6, r3, r6
 8005658:	4435      	add	r5, r6
 800565a:	4545      	cmp	r5, r8
 800565c:	bf38      	it	cc
 800565e:	18e4      	addcc	r4, r4, r3
 8005660:	e7f2      	b.n	8005648 <floor+0xd0>
 8005662:	2500      	movs	r5, #0
 8005664:	462c      	mov	r4, r5
 8005666:	e7aa      	b.n	80055be <floor+0x46>
 8005668:	8800759c 	.word	0x8800759c
 800566c:	7e37e43c 	.word	0x7e37e43c
 8005670:	bff00000 	.word	0xbff00000
 8005674:	000fffff 	.word	0x000fffff

08005678 <scalbn>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	ec55 4b10 	vmov	r4, r5, d0
 800567e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005682:	4606      	mov	r6, r0
 8005684:	462b      	mov	r3, r5
 8005686:	b99a      	cbnz	r2, 80056b0 <scalbn+0x38>
 8005688:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800568c:	4323      	orrs	r3, r4
 800568e:	d036      	beq.n	80056fe <scalbn+0x86>
 8005690:	4b39      	ldr	r3, [pc, #228]	; (8005778 <scalbn+0x100>)
 8005692:	4629      	mov	r1, r5
 8005694:	ee10 0a10 	vmov	r0, s0
 8005698:	2200      	movs	r2, #0
 800569a:	f7fa ff59 	bl	8000550 <__aeabi_dmul>
 800569e:	4b37      	ldr	r3, [pc, #220]	; (800577c <scalbn+0x104>)
 80056a0:	429e      	cmp	r6, r3
 80056a2:	4604      	mov	r4, r0
 80056a4:	460d      	mov	r5, r1
 80056a6:	da10      	bge.n	80056ca <scalbn+0x52>
 80056a8:	a32b      	add	r3, pc, #172	; (adr r3, 8005758 <scalbn+0xe0>)
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	e03a      	b.n	8005726 <scalbn+0xae>
 80056b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80056b4:	428a      	cmp	r2, r1
 80056b6:	d10c      	bne.n	80056d2 <scalbn+0x5a>
 80056b8:	ee10 2a10 	vmov	r2, s0
 80056bc:	4620      	mov	r0, r4
 80056be:	4629      	mov	r1, r5
 80056c0:	f7fa fd90 	bl	80001e4 <__adddf3>
 80056c4:	4604      	mov	r4, r0
 80056c6:	460d      	mov	r5, r1
 80056c8:	e019      	b.n	80056fe <scalbn+0x86>
 80056ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80056ce:	460b      	mov	r3, r1
 80056d0:	3a36      	subs	r2, #54	; 0x36
 80056d2:	4432      	add	r2, r6
 80056d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80056d8:	428a      	cmp	r2, r1
 80056da:	dd08      	ble.n	80056ee <scalbn+0x76>
 80056dc:	2d00      	cmp	r5, #0
 80056de:	a120      	add	r1, pc, #128	; (adr r1, 8005760 <scalbn+0xe8>)
 80056e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056e4:	da1c      	bge.n	8005720 <scalbn+0xa8>
 80056e6:	a120      	add	r1, pc, #128	; (adr r1, 8005768 <scalbn+0xf0>)
 80056e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056ec:	e018      	b.n	8005720 <scalbn+0xa8>
 80056ee:	2a00      	cmp	r2, #0
 80056f0:	dd08      	ble.n	8005704 <scalbn+0x8c>
 80056f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80056f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80056fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80056fe:	ec45 4b10 	vmov	d0, r4, r5
 8005702:	bd70      	pop	{r4, r5, r6, pc}
 8005704:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005708:	da19      	bge.n	800573e <scalbn+0xc6>
 800570a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800570e:	429e      	cmp	r6, r3
 8005710:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005714:	dd0a      	ble.n	800572c <scalbn+0xb4>
 8005716:	a112      	add	r1, pc, #72	; (adr r1, 8005760 <scalbn+0xe8>)
 8005718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e2      	bne.n	80056e6 <scalbn+0x6e>
 8005720:	a30f      	add	r3, pc, #60	; (adr r3, 8005760 <scalbn+0xe8>)
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	f7fa ff13 	bl	8000550 <__aeabi_dmul>
 800572a:	e7cb      	b.n	80056c4 <scalbn+0x4c>
 800572c:	a10a      	add	r1, pc, #40	; (adr r1, 8005758 <scalbn+0xe0>)
 800572e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0b8      	beq.n	80056a8 <scalbn+0x30>
 8005736:	a10e      	add	r1, pc, #56	; (adr r1, 8005770 <scalbn+0xf8>)
 8005738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800573c:	e7b4      	b.n	80056a8 <scalbn+0x30>
 800573e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005742:	3236      	adds	r2, #54	; 0x36
 8005744:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005748:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800574c:	4620      	mov	r0, r4
 800574e:	4b0c      	ldr	r3, [pc, #48]	; (8005780 <scalbn+0x108>)
 8005750:	2200      	movs	r2, #0
 8005752:	e7e8      	b.n	8005726 <scalbn+0xae>
 8005754:	f3af 8000 	nop.w
 8005758:	c2f8f359 	.word	0xc2f8f359
 800575c:	01a56e1f 	.word	0x01a56e1f
 8005760:	8800759c 	.word	0x8800759c
 8005764:	7e37e43c 	.word	0x7e37e43c
 8005768:	8800759c 	.word	0x8800759c
 800576c:	fe37e43c 	.word	0xfe37e43c
 8005770:	c2f8f359 	.word	0xc2f8f359
 8005774:	81a56e1f 	.word	0x81a56e1f
 8005778:	43500000 	.word	0x43500000
 800577c:	ffff3cb0 	.word	0xffff3cb0
 8005780:	3c900000 	.word	0x3c900000

08005784 <_init>:
 8005784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005786:	bf00      	nop
 8005788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578a:	bc08      	pop	{r3}
 800578c:	469e      	mov	lr, r3
 800578e:	4770      	bx	lr

08005790 <_fini>:
 8005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005792:	bf00      	nop
 8005794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005796:	bc08      	pop	{r3}
 8005798:	469e      	mov	lr, r3
 800579a:	4770      	bx	lr
